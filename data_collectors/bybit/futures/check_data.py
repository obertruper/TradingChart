#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Å–∏–º–≤–æ–ª–∞–º –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö.
"""

import os
import sys
import datetime
import pytz
import psycopg2
from tabulate import tabulate
import argparse
import yaml
from typing import List, Tuple, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../..")))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à database manager
from data_collectors.bybit.futures.database import DatabaseManager


def format_timestamp(timestamp_ms: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    if timestamp_ms:
        dt = datetime.datetime.fromtimestamp(timestamp_ms / 1000, tz=pytz.UTC)
        return dt.strftime("%Y-%m-%d %H:%M:%S UTC")
    return "N/A"


def calculate_gaps(db_manager: DatabaseManager, symbol: str, hours: int = 24) -> List[Tuple[str, str, int]]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–µ–ª–æ–≤: (–Ω–∞—á–∞–ª–æ, –∫–æ–Ω–µ—Ü, –º–∏–Ω—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ)
    """
    gaps = []

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤
    end_time = datetime.datetime.now(pytz.UTC)
    start_time = end_time - datetime.timedelta(hours=hours)

    query = """
        SELECT open_time FROM candles_bybit_futures_1m 
        WHERE symbol = %s AND open_time >= %s AND open_time <= %s
        ORDER BY open_time
    """

    with db_manager.get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(
                query,
                (
                    symbol,
                    int(start_time.timestamp() * 1000),
                    int(end_time.timestamp() * 1000),
                ),
            )
            rows = cursor.fetchall()

            if len(rows) > 1:
                for i in range(1, len(rows)):
                    prev_time = rows[i - 1][0]
                    curr_time = rows[i][0]
                    diff_minutes = (curr_time - prev_time) / (1000 * 60)

                    # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 1 –º–∏–Ω—É—Ç—ã - –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª
                    if diff_minutes > 1:
                        gap_start = format_timestamp(prev_time + 60000)
                        gap_end = format_timestamp(curr_time - 60000)
                        gaps.append((gap_start, gap_end, int(diff_minutes - 1)))

    return gaps


def check_data_status(verbose: bool = False, hours: int = 24):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = os.path.join(os.path.dirname(__file__), "../../monitor_config.yaml")
    with open(config_path, "r") as f:
        config = yaml.safe_load(f)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    db_manager = DatabaseManager(config)

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Å–∏–º–≤–æ–ª–∞–º
        query = """
            SELECT 
                symbol,
                COUNT(*) as total_candles,
                MIN(open_time) as first_candle,
                MAX(open_time) as last_candle,
                MAX(open_time) - MIN(open_time) as time_range_ms
            FROM candles_bybit_futures_1m
            GROUP BY symbol
            ORDER BY symbol
        """

        with db_manager.get_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(query)
                rows = cursor.fetchall()

            if not rows:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            table_data = []
            current_time = datetime.datetime.now(pytz.UTC)

            for row in rows:
                symbol, total, first_ms, last_ms, range_ms = row

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                first_date = format_timestamp(first_ms)
                last_date = format_timestamp(last_ms)

                # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ (—Å–∫–æ–ª—å–∫–æ % –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫—Ä—ã—Ç–æ –¥–∞–Ω–Ω—ã–º–∏)
                expected_candles = range_ms / (1000 * 60) if range_ms else 0
                coverage = (total / expected_candles * 100) if expected_candles > 0 else 0

                # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                last_dt = datetime.datetime.fromtimestamp(last_ms / 1000, tz=pytz.UTC)
                delay = current_time - last_dt
                delay_str = f"{int(delay.total_seconds() / 60)} –º–∏–Ω"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤
                gaps = calculate_gaps(db_manager, symbol, hours)
                gaps_str = f"{len(gaps)} –ø—Ä–æ–±–µ–ª–æ–≤" if gaps else "‚úÖ –ù–µ—Ç"

                table_data.append(
                    [
                        symbol,
                        f"{total:,}",
                        first_date.split()[0],  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
                        last_date.split()[1],  # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è
                        f"{coverage:.1f}%",
                        delay_str,
                        gaps_str,
                    ]
                )

            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Å–∏–≤—É—é —Ç–∞–±–ª–∏—Ü—É
            headers = [
                "–°–∏–º–≤–æ–ª",
                "–°–≤–µ—á–µ–π",
                "–û—Ç",
                "–î–æ (–≤—Ä–µ–º—è)",
                "–ü–æ–∫—Ä—ã—Ç–∏–µ",
                "–ó–∞–¥–µ—Ä–∂–∫–∞",
                f"–ü—Ä–æ–±–µ–ª—ã ({hours}—á)",
            ]
            print("\nüìä –°–¢–ê–¢–£–° –î–ê–ù–ù–´–• –í POSTGRESQL")
            print("=" * 100)
            print(tabulate(table_data, headers=headers, tablefmt="grid"))

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print(f"\n‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%Y-%m-%d %H:%M:%S UTC')}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–µ–ª–æ–≤ –µ—Å–ª–∏ verbose
            if verbose:
                print("\nüìç –î–ï–¢–ê–õ–ò –ü–†–û–ë–ï–õ–û–í –í –î–ê–ù–ù–´–•:")
                print("-" * 100)
                for row in rows:
                    symbol = row[0]
                    gaps = calculate_gaps(db_manager, symbol, hours)
                    if gaps:
                        print(f"\n{symbol}:")
                        for gap_start, gap_end, minutes in gaps:
                            print(f"  ‚Ä¢ {gap_start} ‚Üí {gap_end} ({minutes} –º–∏–Ω—É—Ç)")

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for row in rows:
                symbol, total, first_ms, last_ms, _ = row
                last_dt = datetime.datetime.fromtimestamp(last_ms / 1000, tz=pytz.UTC)
                delay_minutes = (current_time - last_dt).total_seconds() / 60

                if delay_minutes > 5:
                    print(
                        f"  ‚ö†Ô∏è  {symbol}: –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –Ω–∞ {int(delay_minutes)} –º–∏–Ω—É—Ç - –∑–∞–ø—É—Å—Ç–∏—Ç–µ monitor.py"
                    )

                gaps = calculate_gaps(db_manager, symbol, 24)
                if len(gaps) > 5:
                    print(f"  ‚ö†Ô∏è  {symbol}: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(gaps)} –ø—Ä–æ–±–µ–ª–æ–≤ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ")

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
            query = "SELECT pg_database_size(current_database())"
            with conn.cursor() as cursor:
                cursor.execute(query)
                db_size = cursor.fetchone()[0]
                print(f"\nüíæ –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_size / 1024 / 1024:.1f} MB")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


def main():
    parser = argparse.ArgumentParser(description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–µ–ª–∞—Ö",
    )
    parser.add_argument(
        "--hours",
        type=int,
        default=24,
        help="–ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–æ–±–µ–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24)",
    )

    args = parser.parse_args()

    check_data_status(verbose=args.verbose, hours=args.hours)


if __name__ == "__main__":
    main()
