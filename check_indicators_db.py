#!/usr/bin/env python3
"""
Check Indicators Status in Database

This script analyzes all loaded indicators in the database and displays
a comprehensive status report with a visual table showing which indicators
are available for each trading pair.

Usage:
    python3 check_indicators_db.py
    python3 check_indicators_db.py --verbose  # Show detailed statistics

Author: Trading System
Date: 2025-10-22
"""

import sys
import argparse
from datetime import datetime
import psycopg2
from psycopg2.extras import RealDictCursor


# Database configuration
DB_CONFIG = {
    'host': '82.25.115.144',
    'port': 5432,
    'database': 'trading_data',
    'user': 'trading_admin',
    'password': 'K9mX3pQ8vN5bR2tL7wY4zA6cE1dF0gH'
}


# Indicators to check with their representative column
INDICATORS_MAP = {
    'SMA': 'sma_10',
    'EMA': 'ema_12',
    'RSI': 'rsi_14',
    'VMA': 'vma_20',
    'ATR': 'atr_14',
    'MACD': 'macd_12_26_9_line',
    'ADX': 'adx_14',
    'Stoch': 'stoch_14_3_3_k',
    'VWAP': 'vwap_daily',
    'MFI': 'mfi_14',
    'OBV': 'obv',
    'BB': 'bollinger_bands_sma_20_2_0_middle',
    'WR': 'williamsr_14',
    'F&G_Alt': 'fear_and_greed_index_alternative',  # Fear & Greed Alternative.me
    'F&G_CMC': 'fear_and_greed_index_coinmarketcap',  # Fear & Greed CoinMarketCap
    'Long/Short': 'long_short_ratio'  # Long/Short Ratio
}


# Mapping of indicators to timeframes where they are available
# Indicators not listed here default to checking '1m' timeframe
INDICATOR_TIMEFRAMES = {
    'Long/Short': ['15m', '1h'],  # API doesn't support 1m, check 15m and 1h instead
}


def get_database_connection():
    """Create database connection"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        sys.exit(1)


def get_all_symbols(conn):
    """Get all trading symbols from database"""
    with conn.cursor() as cur:
        cur.execute("""
            SELECT DISTINCT symbol
            FROM indicators_bybit_futures_1m
            ORDER BY symbol
        """)
        return [row[0] for row in cur.fetchall()]


def check_indicator_status(conn, symbols, days_back=7):
    """
    Check which indicators are loaded for each symbol

    Args:
        conn: Database connection
        symbols: List of trading symbols
        days_back: Check data from last N days (default: 7)

    Returns:
        Dictionary with status for each symbol and indicator
    """
    results = {}

    with conn.cursor() as cur:
        for symbol in symbols:
            results[symbol] = {}

            for indicator_name, column_name in INDICATORS_MAP.items():
                # Determine which timeframes to check for this indicator
                timeframes = INDICATOR_TIMEFRAMES.get(indicator_name, ['1m'])

                # Check if data exists in ANY of the timeframes
                has_data = False
                for timeframe in timeframes:
                    try:
                        cur.execute(f"""
                            SELECT COUNT({column_name}) as count
                            FROM indicators_bybit_futures_{timeframe}
                            WHERE symbol = %s
                            AND timestamp >= NOW() - INTERVAL '{days_back} days'
                        """, (symbol,))

                        count = cur.fetchone()[0]
                        if count > 0:
                            has_data = True
                            break  # Found data, no need to check other timeframes
                    except Exception:
                        # Table or column might not exist for this timeframe, skip
                        continue

                results[symbol][indicator_name] = has_data

    return results


def get_indicator_details(conn):
    """Get detailed information about each indicator"""
    details = {}

    with conn.cursor() as cur:
        for indicator_name, column_name in INDICATORS_MAP.items():
            # Determine which timeframes to check for this indicator
            timeframes = INDICATOR_TIMEFRAMES.get(indicator_name, ['1m'])

            # Count symbols with this indicator across all relevant timeframes
            symbol_count = 0
            for timeframe in timeframes:
                try:
                    cur.execute(f"""
                        SELECT COUNT(DISTINCT symbol) as symbol_count
                        FROM indicators_bybit_futures_{timeframe}
                        WHERE {column_name} IS NOT NULL
                        AND timestamp >= NOW() - INTERVAL '7 days'
                    """)

                    count = cur.fetchone()[0]
                    # Use the maximum count across all timeframes
                    symbol_count = max(symbol_count, count)
                except Exception:
                    # Table or column might not exist for this timeframe, skip
                    continue

            details[indicator_name] = {
                'symbol_count': symbol_count,
                'column': column_name
            }

    return details


def print_status_table(results, symbols):
    """Print beautiful status table"""

    print("\n" + "="*100)
    print("üìã –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ü–û –ú–û–ù–ï–¢–ê–ú")
    print("="*100)

    # Header
    headers = ['–ú–æ–Ω–µ—Ç–∞'] + list(INDICATORS_MAP.keys())

    # Fixed widths: first column (symbol) = 10
    # Most indicators = 5, longer ones (F&G_Alt, F&G_CMC, Long/Short) = 10
    symbol_width = 10

    # Calculate width for each indicator column
    col_widths = [symbol_width]
    for h in headers[1:]:
        if len(h) > 5:
            col_widths.append(10)  # Wider for long names
        else:
            col_widths.append(5)   # Compact for short names

    # Print header
    header_parts = []
    for h, w in zip(headers, col_widths):
        if h == '–ú–æ–Ω–µ—Ç–∞':
            header_parts.append(f"{h:<{w}}")
        else:
            header_parts.append(f"{h:^{w}}")

    header_line = " | ".join(header_parts)
    print(f"\n| {header_line} |")

    # Print separator
    separator_parts = ["-" * w for w in col_widths]
    separator = "-+-".join(separator_parts)
    print(f"|-{separator}-|")

    # Print data rows
    for symbol in symbols:
        row_parts = [f"{symbol:<{col_widths[0]}}"]

        for idx, indicator_name in enumerate(INDICATORS_MAP.keys(), 1):
            status = results[symbol][indicator_name]
            # Use text symbols instead of emojis for consistent width
            symbol_char = "‚úì" if status else "‚úó"
            # Center symbol in appropriate width
            row_parts.append(f"{symbol_char:^{col_widths[idx]}}")

        row_line = " | ".join(row_parts)
        print(f"| {row_line} |")

    print("="*100)


def print_summary_statistics(results, details, symbols):
    """Print summary statistics"""

    print("\n" + "="*100)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ò–ù–î–ò–ö–ê–¢–û–†–ê–ú")
    print("="*100)

    # Count indicators by status
    total_indicators = len(INDICATORS_MAP)

    fully_loaded = []  # All 10 symbols
    partially_loaded = []  # Some symbols
    not_loaded = []  # No symbols

    for indicator_name, detail in details.items():
        count = detail['symbol_count']

        if count == len(symbols):
            fully_loaded.append(indicator_name)
        elif count > 0:
            partially_loaded.append((indicator_name, count))
        else:
            not_loaded.append(indicator_name)

    print(f"\n‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ì–†–£–ñ–ï–ù–´ (–≤—Å–µ {len(symbols)} –º–æ–Ω–µ—Ç): {len(fully_loaded)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    for indicator in fully_loaded:
        print(f"   ‚Ä¢ {indicator}")

    print(f"\n‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–û –ó–ê–ì–†–£–ñ–ï–ù–´: {len(partially_loaded)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    for indicator, count in partially_loaded:
        symbols_with_data = [s for s in symbols if results[s][indicator]]
        print(f"   ‚Ä¢ {indicator}: {count}/{len(symbols)} –º–æ–Ω–µ—Ç ({', '.join(symbols_with_data)})")

    if not_loaded:
        print(f"\n‚ùå –ù–ï –ó–ê–ì–†–£–ñ–ï–ù–´: {len(not_loaded)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        for indicator in not_loaded:
            print(f"   ‚Ä¢ {indicator}")

    # Overall statistics
    print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {total_indicators}")
    print(f"   –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(fully_loaded)}")
    print(f"   –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(partially_loaded)}")
    print(f"   –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(not_loaded)}")
    print(f"   –¢–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –≤ –ë–î: {len(symbols)}")

    # Calculate completion percentage
    total_possible = total_indicators * len(symbols)
    total_loaded = sum(1 for s in symbols for i in INDICATORS_MAP.keys() if results[s][i])
    completion_pct = (total_loaded / total_possible) * 100

    print(f"\n   –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: {total_loaded}/{total_possible} ({completion_pct:.1f}%)")

    print("="*100)


def print_recommendations(results, details, symbols):
    """Print recommendations for next steps"""

    print("\n" + "="*100)
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –î–ê–õ–¨–ù–ï–ô–®–ï–ô –†–ê–ó–†–ê–ë–û–¢–ö–ò")
    print("="*100)

    # Find indicators that need completion
    needs_completion = []

    for indicator_name, detail in details.items():
        count = detail['symbol_count']

        if 0 < count < len(symbols):
            missing_symbols = [s for s in symbols if not results[s][indicator_name]]
            needs_completion.append({
                'indicator': indicator_name,
                'loaded': count,
                'total': len(symbols),
                'missing': missing_symbols
            })

    # Sort by priority (most loaded first)
    needs_completion.sort(key=lambda x: x['loaded'], reverse=True)

    if needs_completion:
        print("\nüìã –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –î–æ–∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
        print("-" * 100)

        for i, item in enumerate(needs_completion, 1):
            print(f"\n{i}. {item['indicator']}")
            print(f"   –°—Ç–∞—Ç—É—Å: {item['loaded']}/{item['total']} –º–æ–Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            print(f"   –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–ª—è: {', '.join(item['missing'])}")

    # Find not loaded indicators
    not_loaded = [name for name, detail in details.items() if detail['symbol_count'] == 0]

    if not_loaded:
        print("\n\nüìã –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
        print("-" * 100)

        for i, indicator in enumerate(not_loaded, 1):
            print(f"{i}. {indicator} - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç")

    print("\n" + "="*100)


def print_legend():
    """Print legend for table symbols"""

    print("\n" + "="*100)
    print("üìñ –õ–ï–ì–ï–ù–î–ê")
    print("="*100)
    print("""
‚úì = –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
‚úó = –î–∞–Ω–Ω—ã–µ –ù–ï –∑–∞–≥—Ä—É–∂–µ–Ω—ã

–°–æ–∫—Ä–∞—â–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:
  SMA         - Simple Moving Average (–ø—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è)
  EMA         - Exponential Moving Average (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è)
  RSI         - Relative Strength Index (–∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã)
  VMA         - Volume Moving Average (—Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è –æ–±—ä–µ–º–∞)
  ATR         - Average True Range (—Å—Ä–µ–¥–Ω–∏–π –∏—Å—Ç–∏–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)
  MACD        - Moving Average Convergence Divergence (—Å—Ö–æ–∂–¥–µ–Ω–∏–µ-—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö)
  ADX         - Average Directional Index (–∏–Ω–¥–µ–∫—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è)
  Stoch       - Stochastic Oscillator (—Å—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä)
  VWAP        - Volume Weighted Average Price (—Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ –æ–±—ä–µ–º—É)
  MFI         - Money Flow Index (–∏–Ω–¥–µ–∫—Å –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞)
  OBV         - On-Balance Volume (–±–∞–ª–∞–Ω—Å–æ–≤—ã–π –æ–±—ä–µ–º)
  BB          - Bollinger Bands (–ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞)
  WR          - Williams %R (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –£–∏–ª—å—è–º—Å–∞ %R)
  F&G_Alt     - Fear & Greed Index –æ—Ç Alternative.me
  F&G_CMC     - Fear & Greed Index –æ—Ç CoinMarketCap
  Long/Short  - Long/Short Ratio (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ª–æ–Ω–≥–æ–≤ –∏ —à–æ—Ä—Ç–æ–≤)
    """)
    print("="*100)


def main():
    """Main function"""

    parser = argparse.ArgumentParser(description='Check indicators status in database')
    parser.add_argument('--verbose', '-v', action='store_true', help='Show verbose output')
    parser.add_argument('--days', type=int, default=7, help='Check data from last N days (default: 7)')
    args = parser.parse_args()

    print("\n" + "="*100)
    print("üìä –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ò–ù–î–ò–ö–ê–¢–û–†–û–í –í –ë–î")
    print(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*100)

    # Connect to database
    print("\n‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    conn = get_database_connection()

    try:
        # Get all symbols
        print("‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
        symbols = get_all_symbols(conn)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(symbols)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {', '.join(symbols)}")

        # Check indicators status
        print(f"\n‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {args.days} –¥–Ω–µ–π)...")
        results = check_indicator_status(conn, symbols, args.days)

        # Get detailed statistics
        print("‚è≥ –°–±–æ—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        details = get_indicator_details(conn)

        # Print results
        print_status_table(results, symbols)
        print_summary_statistics(results, details, symbols)
        print_recommendations(results, details, symbols)
        print_legend()

        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

    finally:
        conn.close()


if __name__ == '__main__':
    main()
