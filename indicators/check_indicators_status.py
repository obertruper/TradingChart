#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import psycopg2
import yaml
from datetime import datetime
from tabulate import tabulate
import os

def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = os.path.join(os.path.dirname(__file__), 'indicators_config.yaml')
    with open(config_path, 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database']
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = psycopg2.connect(
        host=db_config['host'],
        port=db_config['port'],
        database=db_config['database'],
        user=db_config['user'],
        password=db_config['password']
    )
    cur = conn.cursor()
    
    print("="*100)
    print("üìä –°–¢–ê–¢–£–° –ò–ù–î–ò–ö–ê–¢–û–†–û–í –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("="*100)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    cur.execute("""
        SELECT table_name
        FROM information_schema.tables
        WHERE table_name LIKE 'indicators_bybit_futures_%'
        ORDER BY table_name
    """)
    
    tables = [row[0] for row in cur.fetchall()]
    
    if not tables:
        print("\n‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    for table in tables:
        timeframe = table.replace('indicators_bybit_futures_', '')
        print(f"\nüïê –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
        print("-"*80)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        cur.execute("""
            SELECT column_name
            FROM information_schema.columns
            WHERE table_name = %s
            AND (column_name LIKE 'sma_%%' OR column_name LIKE 'ema_%%')
            ORDER BY column_name
        """, (table,))
        
        columns = [row[0] for row in cur.fetchall()]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        sma_cols = [c for c in columns if c.startswith('sma_')]
        ema_cols = [c for c in columns if c.startswith('ema_')]
        
        if sma_cols:
            print(f"  üìä SMA –ø–µ—Ä–∏–æ–¥—ã: {', '.join([c.replace('sma_', '') for c in sma_cols])}")
        if ema_cols:
            print(f"  üìà EMA –ø–µ—Ä–∏–æ–¥—ã: {', '.join([c.replace('ema_', '') for c in ema_cols])}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å
        for symbol in ['BTCUSDT']:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cur.execute(f"""
                SELECT 
                    COUNT(*) as total,
                    MIN(timestamp) as first_date,
                    MAX(timestamp) as last_date
                FROM {table}
                WHERE symbol = %s
            """, (symbol,))
            
            stats = cur.fetchone()
            if stats[0] > 0:
                print(f"\n  üìä –°–∏–º–≤–æ–ª: {symbol}")
                print(f"    –ó–∞–ø–∏—Å–µ–π: {stats[0]:,}")
                print(f"    –ü–µ—Ä–∏–æ–¥: {stats[1]} - {stats[2]}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                if columns:
                    count_queries = [f"COUNT({col})" for col in columns]
                    cur.execute(f"""
                        SELECT {', '.join(count_queries)}
                        FROM {table}
                        WHERE symbol = %s
                    """, (symbol,))
                    
                    counts = cur.fetchone()
                    
                    print("\n    –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
                    
                    # SMA
                    if sma_cols:
                        print("    SMA:")
                        for i, col in enumerate(sma_cols):
                            percent = (counts[columns.index(col)] / stats[0]) * 100
                            status = "‚úÖ" if percent > 95 else "‚ö†Ô∏è" if percent > 50 else "‚ùå"
                            print(f"      {col}: {counts[columns.index(col)]:,}/{stats[0]:,} ({percent:.1f}%) {status}")
                    
                    # EMA
                    if ema_cols:
                        print("    EMA:")
                        for col in ema_cols:
                            idx = columns.index(col)
                            percent = (counts[idx] / stats[0]) * 100 if stats[0] > 0 else 0
                            status = "‚úÖ" if percent > 95 else "‚ö†Ô∏è" if percent > 50 else "‚ùå"
                            print(f"      {col}: {counts[idx]:,}/{stats[0]:,} ({percent:.1f}%) {status}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    print("\n" + "="*80)
    print("üîÑ –ü–û–°–õ–ï–î–ù–ò–ï –ó–ù–ê–ß–ï–ù–ò–Ø (1h —Ç–∞–π–º—Ñ—Ä–µ–π–º, BTCUSDT)")
    print("="*80)
    
    if 'indicators_bybit_futures_1h' in tables:
        cur.execute("""
            SELECT timestamp, sma_50, sma_200, ema_9, ema_21, ema_50
            FROM indicators_bybit_futures_1h
            WHERE symbol = 'BTCUSDT'
            ORDER BY timestamp DESC
            LIMIT 5
        """)
        
        rows = cur.fetchall()
        if rows:
            headers = ['Timestamp', 'SMA_50', 'SMA_200', 'EMA_9', 'EMA_21', 'EMA_50']
            table_data = []
            for row in rows:
                table_data.append([
                    row[0].strftime('%Y-%m-%d %H:%M'),
                    f"{float(row[1]):.2f}" if row[1] else "N/A",
                    f"{float(row[2]):.2f}" if row[2] else "N/A",
                    f"{float(row[3]):.2f}" if row[3] else "N/A",
                    f"{float(row[4]):.2f}" if row[4] else "N/A",
                    f"{float(row[5]):.2f}" if row[5] else "N/A"
                ])
            print("\n" + tabulate(table_data, headers=headers, tablefmt='grid'))
    
    cur.close()
    conn.close()
    
    print("\nüí° –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    print("   SMA: python indicators/sma_loader.py")
    print("   EMA: python indicators/ema_loader.py")
    print("\nüìÑ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
    print("   indicators/INDICATORS_REFERENCE.md - –ü–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º")
    print("   indicators/USAGE_GUIDE.md - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")

if __name__ == "__main__":
    main()