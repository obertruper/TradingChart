#!/usr/bin/env python3
"""
Bollinger Bands Status Checker
================================
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Bollinger Bands –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
- –ù–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–æ–∫ BB –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è BB
- –ü—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö (gaps)
- –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å Bybit/TradingView

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
==============
# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
python indicators/check_bollinger_status.py

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
python indicators/check_bollinger_status.py --timeframe 1h

# –° –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
python indicators/check_bollinger_status.py --examples

# –° –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–æ–≤ (gaps)
python indicators/check_bollinger_status.py --gaps --days 30

–ê–≤—Ç–æ—Ä: Claude Code
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-10-16
"""

import sys
import os
from datetime import datetime, timedelta
from typing import Dict, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from indicators.database import DatabaseConnection


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Bollinger Bands (–¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å bollinger_bands_loader.py)
BOLLINGER_CONFIGS = [
    {'name': 'ultrafast', 'period': 3, 'std_dev': 2.0, 'base': 'sma'},
    {'name': 'scalping', 'period': 5, 'std_dev': 2.0, 'base': 'sma'},
    {'name': 'short', 'period': 10, 'std_dev': 1.5, 'base': 'sma'},
    {'name': 'intraday', 'period': 14, 'std_dev': 2.0, 'base': 'sma'},
    {'name': 'tight', 'period': 20, 'std_dev': 1.0, 'base': 'sma'},
    {'name': 'golden', 'period': 20, 'std_dev': 1.618, 'base': 'sma'},
    {'name': 'classic', 'period': 20, 'std_dev': 2.0, 'base': 'sma'},
    {'name': 'wide', 'period': 20, 'std_dev': 3.0, 'base': 'sma'},
    {'name': 'fibonacci', 'period': 21, 'std_dev': 2.0, 'base': 'sma'},
    {'name': 'fibonacci_medium', 'period': 34, 'std_dev': 2.0, 'base': 'sma'},
    {'name': 'fibonacci_long', 'period': 89, 'std_dev': 2.0, 'base': 'sma'},
    {'name': 'classic_ema', 'period': 20, 'std_dev': 2.0, 'base': 'ema'},
    {'name': 'golden_ema', 'period': 20, 'std_dev': 1.618, 'base': 'ema'},
]


def format_std_dev(std_dev: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç std_dev –¥–ª—è –∏–º–µ–Ω–∏ –∫–æ–ª–æ–Ω–∫–∏"""
    return str(std_dev).replace('.', '_')


def get_column_names(period: int, std_dev: float, base: str) -> Dict[str, str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ BB"""
    std_str = format_std_dev(std_dev)
    prefix = f"bollinger_bands_{base}_{period}_{std_str}"

    return {
        'upper': f"{prefix}_upper",
        'middle': f"{prefix}_middle",
        'lower': f"{prefix}_lower",
        'percent_b': f"{prefix}_percent_b",
        'bandwidth': f"{prefix}_bandwidth",
        'squeeze': f"{prefix}_squeeze",
    }


def check_bollinger_columns(symbol: str = 'BTCUSDT', timeframe: str = '1m'):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–æ–∫ BB –≤ —Ç–∞–±–ª–∏—Ü–µ

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
    """
    table_name = f'indicators_bybit_futures_{timeframe}'

    print(f"\n{'='*100}")
    print(f"Bollinger Bands Status for {symbol} ({timeframe})")
    print(f"{'='*100}\n")

    db = DatabaseConnection()

    with db.get_connection() as conn:
        cur = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
        cur.execute(f"""
            SELECT COUNT(*)
            FROM {table_name}
            WHERE symbol = %s
        """, (symbol,))
        total_candles = cur.fetchone()[0]

        print(f"üìä –í—Å–µ–≥–æ —Å–≤–µ—á–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {total_candles:,}\n")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        for config in BOLLINGER_CONFIGS:
            period = config['period']
            std_dev = config['std_dev']
            base = config['base']
            name = config['name']

            columns = get_column_names(period, std_dev, base)

            print(f"Configuration: {name} ({period}, {std_dev}) {base.upper()}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
            column_exists = {}
            for comp_name, col_name in columns.items():
                cur.execute("""
                    SELECT EXISTS (
                        SELECT 1 FROM information_schema.columns
                        WHERE table_schema = 'public'
                        AND table_name = %s
                        AND column_name = %s
                    );
                """, (table_name, col_name))

                column_exists[comp_name] = cur.fetchone()[0]

            # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            if not all(column_exists.values()):
                print(f"  ‚ùå –ö–æ–ª–æ–Ω–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –≤ –ë–î")
                missing = [name for name, exists in column_exists.items() if not exists]
                print(f"  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}")
                print()
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            fill_stats = {}
            for comp_name, col_name in columns.items():
                cur.execute(f"""
                    SELECT COUNT(*)
                    FROM {table_name}
                    WHERE symbol = %s AND {col_name} IS NOT NULL
                """, (symbol,))

                filled = cur.fetchone()[0]
                fill_pct = (filled / total_candles * 100) if total_candles > 0 else 0
                fill_stats[comp_name] = {'filled': filled, 'percent': fill_pct}

            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"  ‚îú‚îÄ Upper:     {fill_stats['upper']['filled']:,} / {total_candles:,} ({fill_stats['upper']['percent']:.1f}%)")
            print(f"  ‚îú‚îÄ Middle:    {fill_stats['middle']['filled']:,} / {total_candles:,} ({fill_stats['middle']['percent']:.1f}%)")
            print(f"  ‚îú‚îÄ Lower:     {fill_stats['lower']['filled']:,} / {total_candles:,} ({fill_stats['lower']['percent']:.1f}%)")
            print(f"  ‚îú‚îÄ %B:        {fill_stats['percent_b']['filled']:,} / {total_candles:,} ({fill_stats['percent_b']['percent']:.1f}%)")
            print(f"  ‚îú‚îÄ Bandwidth: {fill_stats['bandwidth']['filled']:,} / {total_candles:,} ({fill_stats['bandwidth']['percent']:.1f}%)")
            print(f"  ‚îî‚îÄ Squeeze:   {fill_stats['squeeze']['filled']:,} / {total_candles:,} ({fill_stats['squeeze']['percent']:.1f}%)")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            upper_col = columns['upper']
            middle_col = columns['middle']
            lower_col = columns['lower']
            percent_b_col = columns['percent_b']
            bandwidth_col = columns['bandwidth']
            squeeze_col = columns['squeeze']

            cur.execute(f"""
                SELECT timestamp, {upper_col}, {middle_col}, {lower_col},
                       {percent_b_col}, {bandwidth_col}, {squeeze_col}
                FROM {table_name}
                WHERE symbol = %s
                  AND {upper_col} IS NOT NULL
                ORDER BY timestamp DESC
                LIMIT 1
            """, (symbol,))

            result = cur.fetchone()
            if result:
                ts, upper, middle, lower, percent_b, bandwidth, squeeze = result
                print(f"\n  Latest values ({ts}):")
                print(f"    Upper:     {upper:.8f}")
                print(f"    Middle:    {middle:.8f}")
                print(f"    Lower:     {lower:.8f}")
                print(f"    %B:        {percent_b:.4f}" if percent_b else "    %B:        NULL")
                print(f"    Bandwidth: {bandwidth:.4f}%" if bandwidth else "    Bandwidth: NULL")
                print(f"    Squeeze:   {'üü¢ YES' if squeeze else 'üî¥ NO'}" if squeeze is not None else "    Squeeze:   NULL")

                # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
                if percent_b is not None:
                    if percent_b > 1.0:
                        position = "üî¥ –í—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)"
                    elif percent_b < 0.0:
                        position = "üü¢ –ù–∏–∂–µ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)"
                    elif percent_b > 0.8:
                        position = "‚ö†Ô∏è  –ë–ª–∏–∑–∫–æ –∫ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å–µ"
                    elif percent_b < 0.2:
                        position = "‚ö†Ô∏è  –ë–ª–∏–∑–∫–æ –∫ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å–µ"
                    else:
                        position = "‚ö™ –í–Ω—É—Ç—Ä–∏ –ø–æ–ª–æ—Å (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)"

                    print(f"    Position: {position}")

            print()

        cur.close()


def check_bollinger_gaps(symbol: str = 'BTCUSDT', timeframe: str = '1m', days: int = 30):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö BB –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    table_name = f'indicators_bybit_futures_{timeframe}'

    print(f"\n{'='*100}")
    print(f"Gap Detection for Bollinger Bands (last {days} days)")
    print(f"{'='*100}\n")

    db = DatabaseConnection()

    with db.get_connection() as conn:
        cur = conn.cursor()

        # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        start_date = datetime.now() - timedelta(days=days)

        for config in BOLLINGER_CONFIGS:
            period = config['period']
            std_dev = config['std_dev']
            base = config['base']
            name = config['name']

            columns = get_column_names(period, std_dev, base)
            upper_col = columns['upper']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            cur.execute("""
                SELECT EXISTS (
                    SELECT 1 FROM information_schema.columns
                    WHERE table_schema = 'public'
                    AND table_name = %s
                    AND column_name = %s
                );
            """, (table_name, upper_col))

            if not cur.fetchone()[0]:
                continue  # –ö–æ–ª–æ–Ω–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

            # –ò—â–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
            cur.execute(f"""
                WITH bb_data AS (
                    SELECT
                        timestamp,
                        {upper_col},
                        LAG({upper_col}) OVER (ORDER BY timestamp) as prev_value
                    FROM {table_name}
                    WHERE symbol = %s
                      AND timestamp >= %s
                    ORDER BY timestamp
                )
                SELECT
                    timestamp,
                    {upper_col},
                    prev_value
                FROM bb_data
                WHERE {upper_col} IS NULL AND prev_value IS NOT NULL
            """, (symbol, start_date))

            gaps = cur.fetchall()

            if gaps:
                print(f"‚ö†Ô∏è  BB {name} ({period}, {std_dev}) {base.upper()}: {len(gaps)} gaps found")
                if len(gaps) <= 10:
                    for gap in gaps[:10]:
                        print(f"    {gap[0]}")
            else:
                print(f"‚úÖ BB {name} ({period}, {std_dev}) {base.upper()}: No gaps")

        cur.close()


def show_bollinger_examples(symbol: str = 'BTCUSDT', timeframe: str = '1m', limit: int = 10):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π BB –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
    """
    table_name = f'indicators_bybit_futures_{timeframe}'

    print(f"\n{'='*100}")
    print(f"Latest Bollinger Bands Values (Top {limit})")
    print(f"{'='*100}\n")

    db = DatabaseConnection()

    with db.get_connection() as conn:
        cur = conn.cursor()

        # –ë–µ—Ä—ë–º classic BB –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        config = BOLLINGER_CONFIGS[6]  # classic
        period = config['period']
        std_dev = config['std_dev']
        base = config['base']
        name = config['name']

        columns = get_column_names(period, std_dev, base)
        upper_col = columns['upper']
        middle_col = columns['middle']
        lower_col = columns['lower']
        percent_b_col = columns['percent_b']
        bandwidth_col = columns['bandwidth']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        cur.execute("""
            SELECT EXISTS (
                SELECT 1 FROM information_schema.columns
                WHERE table_schema = 'public'
                AND table_name = %s
                AND column_name = %s
            );
        """, (table_name, upper_col))

        if not cur.fetchone()[0]:
            print(f"‚ùå –ö–æ–ª–æ–Ω–∫–∏ BB classic –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å close —Ü–µ–Ω–æ–π –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        cur.execute(f"""
            SELECT
                i.timestamp,
                c.close,
                i.{upper_col},
                i.{middle_col},
                i.{lower_col},
                i.{percent_b_col},
                i.{bandwidth_col}
            FROM {table_name} i
            JOIN candles_bybit_futures_{timeframe} c
                ON i.timestamp = c.timestamp AND i.symbol = c.symbol
            WHERE i.symbol = %s
              AND i.{upper_col} IS NOT NULL
            ORDER BY i.timestamp DESC
            LIMIT %s
        """, (symbol, limit))

        results = cur.fetchall()

        if not results:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö BB")
            return

        print(f"Configuration: {name} ({period}, {std_dev}) {base.upper()}")
        print(f"\n{'Timestamp':<20} {'Close':<12} {'Upper':<12} {'Middle':<12} {'Lower':<12} {'%B':<10} {'Bandwidth':<10}")
        print('-' * 100)

        for row in results:
            ts, close, upper, middle, lower, percent_b, bandwidth = row
            percent_b_str = f"{percent_b:.4f}" if percent_b else "NULL"
            bandwidth_str = f"{bandwidth:.4f}" if bandwidth else "NULL"
            print(f"{str(ts):<20} {close:<12.2f} {upper:<12.2f} {middle:<12.2f} {lower:<12.2f} {percent_b_str:<10} {bandwidth_str:<10}")

        print(f"\nüí° Hint: –í—ã –º–æ–∂–µ—Ç–µ —Å–≤–µ—Ä–∏—Ç—å —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å TradingView –∏–ª–∏ Bybit –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á—ë—Ç–æ–≤")
        print(f"   TradingView: https://www.tradingview.com/chart/?symbol=BYBIT:{symbol}")
        print(f"   –ù–∞—Å—Ç—Ä–æ–π–∫–∏ BB: Period={period}, StdDev={std_dev}, Basis={'SMA' if base == 'sma' else 'EMA'}")

        cur.close()


def show_squeeze_events(symbol: str = 'BTCUSDT', timeframe: str = '1h', days: int = 30):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è Squeeze (—Å–∂–∞—Ç–∏—è –ø–æ–ª–æ—Å)

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    table_name = f'indicators_bybit_futures_{timeframe}'

    print(f"\n{'='*100}")
    print(f"Recent Bollinger Squeeze Events (last {days} days)")
    print(f"{'='*100}\n")

    db = DatabaseConnection()

    with db.get_connection() as conn:
        cur = conn.cursor()

        start_date = datetime.now() - timedelta(days=days)

        # –ë–µ—Ä—ë–º classic BB –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        config = BOLLINGER_CONFIGS[6]  # classic
        columns = get_column_names(config['period'], config['std_dev'], config['base'])
        squeeze_col = columns['squeeze']
        bandwidth_col = columns['bandwidth']
        upper_col = columns['upper']
        lower_col = columns['lower']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        cur.execute("""
            SELECT EXISTS (
                SELECT 1 FROM information_schema.columns
                WHERE table_schema = 'public'
                AND table_name = %s
                AND column_name = %s
            );
        """, (table_name, squeeze_col))

        if not cur.fetchone()[0]:
            print("‚ùå Squeeze –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return

        # –ò—â–µ–º squeeze —Å–æ–±—ã—Ç–∏—è
        cur.execute(f"""
            SELECT
                i.timestamp,
                c.close,
                i.{bandwidth_col},
                i.{upper_col},
                i.{lower_col}
            FROM {table_name} i
            JOIN candles_bybit_futures_{timeframe} c
                ON i.timestamp = c.timestamp AND i.symbol = c.symbol
            WHERE i.symbol = %s
              AND i.timestamp >= %s
              AND i.{squeeze_col} = TRUE
            ORDER BY i.timestamp DESC
            LIMIT 20
        """, (symbol, start_date))

        squeezes = cur.fetchall()

        if squeezes:
            print(f"üü¢ –ù–∞–π–¥–µ–Ω–æ {len(squeezes)} squeeze —Å–æ–±—ã—Ç–∏–π:\n")
            print(f"{'Timestamp':<20} {'Close':<12} {'Bandwidth':<12} {'Upper':<12} {'Lower':<12}")
            print('-' * 80)

            for sq in squeezes:
                ts, close, bandwidth, upper, lower = sq
                print(f"{str(ts):<20} {close:<12.2f} {bandwidth:<12.4f} {upper:<12.2f} {lower:<12.2f}")

            print(f"\nüí° Squeeze –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–∏–∑–∫—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å. –û–±—ã—á–Ω–æ –∑–∞ —Å–∂–∞—Ç–∏–µ–º —Å–ª–µ–¥—É–µ—Ç —Ä–µ–∑–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ!")
        else:
            print("‚ùå Squeeze —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {} –¥–Ω–µ–π".format(days))

        cur.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description='–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Bollinger Bands –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤')
    parser.add_argument('--symbol', type=str, default='BTCUSDT', help='–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞')
    parser.add_argument('--timeframe', type=str, default='1m', help='–¢–∞–π–º—Ñ—Ä–µ–π–º (1m, 15m, 1h)')
    parser.add_argument('--gaps', action='store_true', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--examples', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π')
    parser.add_argument('--squeeze', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å squeeze —Å–æ–±—ã—Ç–∏—è')
    parser.add_argument('--days', type=int, default=30, help='–î–Ω–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤/squeeze')
    parser.add_argument('--limit', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤')

    args = parser.parse_args()

    # –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    check_bollinger_columns(args.symbol, args.timeframe)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    if args.gaps:
        check_bollinger_gaps(args.symbol, args.timeframe, args.days)

    # –ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
    if args.examples:
        show_bollinger_examples(args.symbol, args.timeframe, args.limit)

    # Squeeze —Å–æ–±—ã—Ç–∏—è
    if args.squeeze:
        show_squeeze_events(args.symbol, args.timeframe, args.days)


if __name__ == '__main__':
    main()
