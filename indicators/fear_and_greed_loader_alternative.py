#!/usr/bin/env python3
"""
Fear & Greed Index Loader
=========================
–ó–∞–≥—Ä—É–∑—á–∏–∫ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ –¥–ª—è BTCUSDT.
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å API –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python fear_and_greed_loader.py
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from datetime import datetime, timedelta, timezone
import logging
from typing import Dict, List, Optional, Tuple
import requests
import yaml
from tqdm import tqdm
import psycopg2
from indicators.database import DatabaseConnection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—ã–≤–æ–¥–æ–º –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å"""
    log_dir = os.path.join(os.path.dirname(__file__), 'logs')
    os.makedirs(log_dir, exist_ok=True)

    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    log_file = os.path.join(log_dir, f'fear_greed_{timestamp}.log')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    file_handler = logging.FileHandler(log_file)
    file_handler.setFormatter(formatter)

    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

    logger.info(f"üìù Fear & Greed Loader: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –õ–æ–≥-—Ñ–∞–π–ª: {log_file}")
    return logger

logger = setup_logging()


class FearAndGreedLoader:
    """
    –ó–∞–≥—Ä—É–∑—á–∏–∫ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ –¥–ª—è BTCUSDT
    """

    def __init__(self, symbol: str = 'BTCUSDT'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ BTCUSDT –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        """
        self.db = DatabaseConnection()
        self.symbol = symbol
        self.config = self.load_config()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å BTCUSDT
        if symbol != 'BTCUSDT':
            raise ValueError("Fear & Greed Index –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è BTCUSDT")

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Fear & Greed
        self.fng_config = self.config.get('indicators', {}).get('fear_and_greed', {})
        self.api_url = self.fng_config.get('api_url', 'https://api.alternative.me/fng/?limit=0')
        self.batch_days = self.fng_config.get('batch_days', 1)
        self.retry_count = self.fng_config.get('retry_on_error', 3)
        self.timeframes = self.fng_config.get('timeframes', ['1m', '15m', '1h'])

        # –î–∞–Ω–Ω—ã–µ —Å API (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
        self.api_data = None

    def load_config(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        config_path = os.path.join(os.path.dirname(__file__), 'indicators_config.yaml')
        with open(config_path, 'r') as f:
            config = yaml.safe_load(f)
        logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
        return config

    def create_columns(self) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è Fear & Greed Index –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö indicators

        Returns:
            True –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        logger.info("üî® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ Fear & Greed...")

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            try:
                for timeframe in self.timeframes:
                    table_name = f'indicators_bybit_futures_{timeframe}'

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                    cur.execute("""
                        SELECT EXISTS (
                            SELECT FROM information_schema.tables
                            WHERE table_name = %s
                        )
                    """, (table_name,))

                    if not cur.fetchone()[0]:
                        logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                        return False

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
                    for column_name, column_type in [
                        ('fear_and_greed_index_alternative', 'SMALLINT'),
                        ('fear_and_greed_index_classification_alternative', 'VARCHAR(20)')
                    ]:
                        cur.execute("""
                            SELECT EXISTS (
                                SELECT FROM information_schema.columns
                                WHERE table_name = %s AND column_name = %s
                            )
                        """, (table_name, column_name))

                        if not cur.fetchone()[0]:
                            logger.info(f"  ‚ûï –°–æ–∑–¥–∞—é –∫–æ–ª–æ–Ω–∫—É {column_name} –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
                            cur.execute(f"""
                                ALTER TABLE {table_name}
                                ADD COLUMN {column_name} {column_type}
                            """)
                        else:
                            logger.info(f"  ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ {table_name}")

                conn.commit()
                logger.info("‚úÖ –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –≥–æ—Ç–æ–≤—ã")
                return True

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫: {e}")
                conn.rollback()
                return False

    def get_api_data(self) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å API Fear & Greed Index

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if self.api_data is not None:
            return self.api_data

        logger.info(f"üì° –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å API: {self.api_url}")

        for attempt in range(self.retry_count):
            try:
                response = requests.get(self.api_url, timeout=30)
                response.raise_for_status()

                data = response.json()

                if 'data' not in data:
                    logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API: {data}")
                    return None

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç {date: {value, classification}}
                self.api_data = {}
                for item in data['data']:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ –¥–∞—Ç—É UTC
                    timestamp = int(item['timestamp'])
                    date = datetime.fromtimestamp(timestamp, tz=timezone.utc).date()

                    self.api_data[date] = {
                        'value': int(item['value']),
                        'classification': item['value_classification']
                    }

                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.api_data)} –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö")
                logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {min(self.api_data.keys())} - {max(self.api_data.keys())}")

                return self.api_data

            except requests.RequestException as e:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.retry_count} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt == self.retry_count - 1:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å API –ø–æ—Å–ª–µ {self.retry_count} –ø–æ–ø—ã—Ç–æ–∫")
                    return None

        return None

    def get_checkpoint(self, timeframe: str) -> Optional[datetime]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –¥–∞—Ç—É –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º (1m, 15m, 1h)

        Returns:
            –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None
        """
        table_name = f'indicators_bybit_futures_{timeframe}'

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            cur.execute(f"""
                SELECT MAX(timestamp)
                FROM {table_name}
                WHERE symbol = %s
                  AND fear_and_greed_index_alternative IS NOT NULL
            """, (self.symbol,))

            result = cur.fetchone()
            if result and result[0]:
                return result[0]

            return None

    def get_start_date(self) -> Optional[datetime]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏–∑ –ë–î –¥–ª—è BTCUSDT

        Returns:
            –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ None
        """
        with self.db.get_connection() as conn:
            cur = conn.cursor()

            cur.execute("""
                SELECT MIN(timestamp)
                FROM indicators_bybit_futures_1m
                WHERE symbol = %s
            """, (self.symbol,))

            result = cur.fetchone()
            if result and result[0]:
                return result[0]

            logger.error(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {self.symbol} –≤ –ë–î")
            return None

    def update_batch(self, timeframe: str, date: datetime.date,
                    value: int, classification: str) -> int:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            date: –î–∞—Ç–∞ (–¥–µ–Ω—å)
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ (0-100)
            classification: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        table_name = f'indicators_bybit_futures_{timeframe}'

        # –ì—Ä–∞–Ω–∏—Ü—ã –¥–Ω—è –≤ UTC
        start_time = datetime.combine(date, datetime.min.time()).replace(tzinfo=timezone.utc)
        end_time = start_time + timedelta(days=1)

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å –¥–ª—è BTCUSDT
                cur.execute(f"""
                    UPDATE {table_name}
                    SET fear_and_greed_index_alternative = %s,
                        fear_and_greed_index_classification_alternative = %s
                    WHERE symbol = %s
                      AND timestamp >= %s
                      AND timestamp < %s
                """, (value, classification, self.symbol, start_time, end_time))

                updated_count = cur.rowcount
                conn.commit()

                return updated_count

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {table_name} –∑–∞ {date}: {e}")
                conn.rollback()
                raise

    def validate_day_consistency(self, date: datetime.date) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è

        Args:
            date: –î–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã
        """
        values = {}

        # –ì—Ä–∞–Ω–∏—Ü—ã –¥–Ω—è –≤ UTC
        start_time = datetime.combine(date, datetime.min.time()).replace(tzinfo=timezone.utc)
        end_time = start_time + timedelta(days=1)

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            for timeframe in self.timeframes:
                table_name = f'indicators_bybit_futures_{timeframe}'

                # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å
                cur.execute(f"""
                    SELECT DISTINCT fear_and_greed_index_alternative, fear_and_greed_index_classification_alternative
                    FROM {table_name}
                    WHERE symbol = %s
                      AND timestamp >= %s
                      AND timestamp < %s
                      AND fear_and_greed_index_alternative IS NOT NULL
                """, (self.symbol, start_time, end_time))

                results = cur.fetchall()

                if len(results) > 1:
                    logger.error(f"‚ùå –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ {table_name} –∑–∞ {date}: {results}")
                    return False

                if results:
                    values[timeframe] = results[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        unique_values = set(values.values())
        if len(unique_values) > 1:
            logger.error(f"‚ùå –†–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏ –∑–∞ {date}: {values}")
            return False

        return True

    def process_timeframe(self, timeframe: str, start_date: datetime, end_date: datetime) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞

        Returns:
            True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        """
        logger.info(f"\nüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {timeframe}")
        logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.date()} - {end_date.date()}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º checkpoint
        checkpoint = self.get_checkpoint(timeframe)

        if checkpoint:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            process_start = checkpoint.date() + timedelta(days=1)
            logger.info(f"‚è© –ü—Ä–æ–¥–æ–ª–∂–∞—é —Å checkpoint: {process_start}")
        else:
            # –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞
            process_start = start_date.date()
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Å –Ω–∞—á–∞–ª–∞: {process_start}")

        process_end = end_date.date()

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        total_days = (process_end - process_start).days + 1

        if total_days <= 0:
            logger.info(f"‚úÖ –¢–∞–π–º—Ñ—Ä–µ–π–º {timeframe} —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω")
            return True

        logger.info(f"üì¶ –î–Ω–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_days}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –¥–Ω—è–º
        current_date = process_start
        updated_total = 0

        with tqdm(total=total_days, desc=f"–ó–∞–≥—Ä—É–∑–∫–∞ {timeframe}") as pbar:
            while current_date <= process_end:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–Ω—è –∏–∑ API –¥–∞–Ω–Ω—ã—Ö
                if current_date in self.api_data:
                    fng_data = self.api_data[current_date]

                    try:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å
                        updated = self.update_batch(
                            timeframe,
                            current_date,
                            fng_data['value'],
                            fng_data['classification']
                        )

                        updated_total += updated

                        if updated > 0:
                            pbar.set_description(
                                f"{timeframe}: {current_date} "
                                f"(FNG={fng_data['value']}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ={updated})"
                            )

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {current_date}: {e}")
                        logger.info(f"üîÑ –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å {current_date}")
                        return False
                else:
                    # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ API –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
                    logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö API –¥–ª—è {current_date}, –ø—Ä–æ–ø—É—Å–∫–∞—é")

                current_date += timedelta(days=1)
                pbar.update(1)

        logger.info(f"‚úÖ –¢–∞–π–º—Ñ—Ä–µ–π–º {timeframe} –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated_total:,}")
        return True

    def run(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        """
        logger.info("="*60)
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Fear & Greed Index Loader")
        logger.info(f"üéØ –°–∏–º–≤–æ–ª: {self.symbol}")
        logger.info(f"‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(self.timeframes)}")
        logger.info("="*60)

        # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not self.create_columns():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏")
            return

        # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API
        if not self.get_api_data():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å API")
            return

        # –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        start_date = self.get_start_date()
        if not start_date:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É")
            return

        end_date = datetime.now(timezone.utc)

        logger.info(f"\nüìÖ –û–±—â–∏–π –ø–µ—Ä–∏–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        logger.info(f"   –ù–∞—á–∞–ª–æ: {start_date}")
        logger.info(f"   –ö–æ–Ω–µ—Ü: {end_date}")

        # –®–∞–≥ 4: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for timeframe in self.timeframes:
            if not self.process_timeframe(timeframe, start_date, end_date):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {timeframe}")
                logger.error("‚õî –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
                return

        # –®–∞–≥ 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        check_date = end_date.date()
        inconsistent_days = []

        for i in range(7):
            if check_date in self.api_data:
                if not self.validate_day_consistency(check_date):
                    inconsistent_days.append(check_date)
            check_date -= timedelta(days=1)

        if inconsistent_days:
            logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–Ω–∏: {inconsistent_days}")
        else:
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏")

        logger.info("\n" + "="*60)
        logger.info("üéâ Fear & Greed Index —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        logger.info("="*60)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    loader = FearAndGreedLoader(symbol='BTCUSDT')
    loader.run()


if __name__ == "__main__":
    main()