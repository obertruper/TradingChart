#!/usr/bin/env python3
"""
MFI (Money Flow Index) Loader

–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ MFI –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.

MFI = 100 - (100 / (1 + Money Flow Ratio))
–≥–¥–µ Money Flow Ratio = Œ£(Positive MF, N) / Œ£(Negative MF, N)

Money Flow = Typical Price √ó Volume
Typical Price = (High + Low + Close) / 3

Usage:
    python3 mfi_loader.py                                    # –í—Å–µ —Å–∏–º–≤–æ–ª—ã, –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
    python3 mfi_loader.py --symbol BTCUSDT                   # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª
    python3 mfi_loader.py --symbol BTCUSDT --timeframe 1m    # –°–∏–º–≤–æ–ª + —Ç–∞–π–º—Ñ—Ä–µ–π–º
    python3 mfi_loader.py --batch-days 7                     # –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
"""

import sys
import logging
import argparse
import warnings
from pathlib import Path
from datetime import datetime, timedelta
import yaml
import pandas as pd
import numpy as np
from tqdm import tqdm

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ pandas –æ DBAPI2 connection
warnings.filterwarnings('ignore', message='pandas only supports SQLAlchemy connectable')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from indicators.database import DatabaseConnection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class MFILoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ MFI (Money Flow Index) –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, symbol: str, timeframe: str, config: dict):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ MFI

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º (1m, 15m, 1h)
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ indicators_config.yaml
        """
        self.symbol = symbol
        self.timeframe = timeframe
        self.timeframe_minutes = self._parse_timeframe(timeframe)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        mfi_config = config['indicators']['mfi']
        self.periods = mfi_config['periods']
        self.batch_days = mfi_config.get('batch_days', 1)
        self.lookback_multiplier = mfi_config.get('lookback_multiplier', 2)

        # –í—ã—á–∏—Å–ª—è–µ–º lookback
        max_period = max(self.periods)
        self.lookback_periods = max_period * self.lookback_multiplier

        # –î–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ)
        self.symbol_progress = ""

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        self.db = DatabaseConnection()
        self.candles_table = "candles_bybit_futures_1m"  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º 1m —Ç–∞–±–ª–∏—Ü—É
        self.indicators_table = f"indicators_bybit_futures_{timeframe}"

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω MFILoader –¥–ª—è {symbol} –Ω–∞ {timeframe}")
        logger.info(f"–ü–µ—Ä–∏–æ–¥—ã: {self.periods}, Lookback: {self.lookback_periods} –ø–µ—Ä–∏–æ–¥–æ–≤")

    def _parse_timeframe(self, tf: str) -> int:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤ –º–∏–Ω—É—Ç—ã

        Args:
            tf: –¢–∞–π–º—Ñ—Ä–µ–π–º (1m, 15m, 1h, etc.)

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
        """
        if tf.endswith('m'):
            return int(tf[:-1])
        elif tf.endswith('h'):
            return int(tf[:-1]) * 60
        elif tf.endswith('d'):
            return int(tf[:-1]) * 1440
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {tf}")

    def ensure_columns_exist(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ MFI –≤ —Ç–∞–±–ª–∏—Ü–µ indicators"""

        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–ª–æ–Ω–æ–∫ MFI –≤ —Ç–∞–±–ª–∏—Ü–µ...")

        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
                cur.execute(f"""
                    SELECT column_name
                    FROM information_schema.columns
                    WHERE table_name = '{self.indicators_table}'
                """)
                existing_columns = {row[0] for row in cur.fetchall()}

                # –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
                columns_to_add = []

                for period in self.periods:
                    col_name = f'mfi_{period}'
                    if col_name not in existing_columns:
                        columns_to_add.append(f'{col_name} DECIMAL(10,2)')
                        logger.info(f"  - {col_name} (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)")

                # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if columns_to_add:
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ {len(columns_to_add)} –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫...")

                    for col_def in columns_to_add:
                        col_name = col_def.split()[0]
                        sql = f"ALTER TABLE {self.indicators_table} ADD COLUMN IF NOT EXISTS {col_def}"
                        cur.execute(sql)
                        logger.info(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {col_name}")

                    conn.commit()
                    logger.info("‚úÖ –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ MFI —Å–æ–∑–¥–∞–Ω—ã")
                else:
                    logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")

    def get_date_range(self):
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

        Returns:
            tuple: (start_date, end_date) –≤ UTC
        """

        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É MFI –≤ indicators —Ç–∞–±–ª–∏—Ü–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º mfi_14 –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å)
                cur.execute(f"""
                    SELECT MAX(timestamp)
                    FROM {self.indicators_table}
                    WHERE symbol = %s AND mfi_14 IS NOT NULL
                """, (self.symbol,))

                last_mfi_date = cur.fetchone()[0]

                # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö –≤ candles —Ç–∞–±–ª–∏—Ü–µ
                cur.execute(f"""
                    SELECT MIN(timestamp), MAX(timestamp)
                    FROM {self.candles_table}
                    WHERE symbol = %s
                """, (self.symbol,))

                min_candle_date, max_candle_date = cur.fetchone()

                if min_candle_date is None or max_candle_date is None:
                    logger.warning(f"‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {self.symbol} –≤ {self.candles_table}")
                    return None, None

                # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º start_date
                if last_mfi_date is None:
                    # –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞
                    start_date = min_candle_date
                    logger.info(f"üìÖ –î–∞–Ω–Ω—ã—Ö MFI –Ω–µ—Ç. –ù–∞—á–∏–Ω–∞–µ–º —Å: {start_date}")
                else:
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã
                    start_date = last_mfi_date + timedelta(minutes=self.timeframe_minutes)
                    logger.info(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ MFI: {last_mfi_date}")
                    logger.info(f"‚ñ∂Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å: {start_date}")

                # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º end_date (–ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–≤–µ—á–∞)
                end_date = max_candle_date

                # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–æ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
                if self.timeframe == '1m':
                    end_date = end_date.replace(second=0, microsecond=0)
                elif self.timeframe == '15m':
                    minutes = (end_date.minute // 15) * 15
                    end_date = end_date.replace(minute=minutes, second=0, microsecond=0)
                elif self.timeframe == '1h':
                    end_date = end_date.replace(minute=0, second=0, microsecond=0)

                logger.info(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î: {min_candle_date} - {max_candle_date}")
                logger.info(f"‚è∏Ô∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ end_date –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–≤–µ—á–∏: {end_date}")

                return start_date, end_date

    def calculate_mfi(self, df: pd.DataFrame, period: int) -> pd.Series:
        """
        –†–∞—Å—á–µ—Ç MFI –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞

        Formula:
        1. Typical Price (TP) = (High + Low + Close) / 3
        2. Money Flow (MF) = TP √ó Volume
        3. Positive/Negative —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:
           - –ï—Å–ª–∏ TP > TP_prev: Positive_MF = MF, Negative_MF = 0
           - –ï—Å–ª–∏ TP < TP_prev: Positive_MF = 0, Negative_MF = MF
           - –ï—Å–ª–∏ TP == TP_prev: –æ–±–∞ = 0 (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º)
        4. Rolling sum –∑–∞ period –ø–µ—Ä–∏–æ–¥–æ–≤
        5. Money Flow Ratio = Œ£(Positive_MF) / Œ£(Negative_MF)
        6. MFI = 100 - (100 / (1 + Ratio))

        Edge cases:
        - Volume = 0: MF = 0 (—É—á–∏—Ç—ã–≤–∞–µ–º –≤ rolling window, –Ω–æ –≤–∫–ª–∞–¥ = 0)
        - Negative_Sum = 0: MFI = 100.0 (—Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∫–∏)
        - Positive_Sum = 0: MFI = 0.0 (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–∏)
        - –û–±–∞ = 0: MFI = NaN (–Ω–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è)
        - –ü–µ—Ä–≤—ã–µ (period-1) —Å–≤–µ—á–µ–π: MFI = NaN

        Args:
            df: DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ high, low, close, volume
            period: –ü–µ—Ä–∏–æ–¥ MFI (7, 10, 14, 20, 25)

        Returns:
            pd.Series —Å MFI –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        """

        # 1. Typical Price
        tp = (df['high'] + df['low'] + df['close']) / 3

        # 2. Money Flow (–Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º volume = 0, –ø—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º)
        money_flow = tp * df['volume']

        # 3. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ Positive/Negative
        tp_diff = tp.diff()  # TP - TP_prev

        # –ï—Å–ª–∏ TP > TP_prev (—Ä–∞—Å—Ç–µ—Ç) ‚Üí positive_mf = money_flow, negative_mf = 0
        # –ï—Å–ª–∏ TP < TP_prev (–ø–∞–¥–∞–µ—Ç) ‚Üí positive_mf = 0, negative_mf = money_flow
        # –ï—Å–ª–∏ TP == TP_prev (–Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å) ‚Üí –æ–±–∞ = 0
        positive_mf = pd.Series(np.where(tp_diff > 0, money_flow, 0), index=df.index)
        negative_mf = pd.Series(np.where(tp_diff < 0, money_flow, 0), index=df.index)

        # 4. Rolling sum (min_periods=period ‚Üí NULL –¥–ª—è –ø–µ—Ä–≤—ã—Ö period-1 —Å–≤–µ—á–µ–π)
        positive_sum = positive_mf.rolling(window=period, min_periods=period).sum()
        negative_sum = negative_mf.rolling(window=period, min_periods=period).sum()

        # 5. MFI —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        mfi = pd.Series(index=df.index, dtype=float)

        for i in range(len(df)):
            pos_sum = positive_sum.iloc[i]
            neg_sum = negative_sum.iloc[i]

            if pd.isna(pos_sum) or pd.isna(neg_sum):
                # –ü–µ—Ä–≤—ã–µ (period-1) —Å–≤–µ—á–µ–π - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                mfi.iloc[i] = np.nan
            elif pos_sum == 0 and neg_sum == 0:
                # –ù–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
                mfi.iloc[i] = np.nan
            elif neg_sum == 0:
                # –¢–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∫–∏ (—Ç–æ–ª—å–∫–æ —Ä–æ—Å—Ç TP)
                mfi.iloc[i] = 100.0
            elif pos_sum == 0:
                # –¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–∏ (—Ç–æ–ª—å–∫–æ –ø–∞–¥–µ–Ω–∏–µ TP)
                mfi.iloc[i] = 0.0
            else:
                # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                ratio = pos_sum / neg_sum
                mfi.iloc[i] = 100 - (100 / (1 + ratio))

        return mfi

    def load_candles_with_lookback(self, start_date, end_date):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–µ–π –∏–∑ –ë–î —Å lookback –ø–µ—Ä–∏–æ–¥–æ–º

        –î–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ 15m –∏ 1h –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ 1m —Å–≤–µ—á–µ–π

        Args:
            start_date: –ù–∞—á–∞–ª–æ –±–∞—Ç—á–∞
            end_date: –ö–æ–Ω–µ—Ü –±–∞—Ç—á–∞

        Returns:
            pd.DataFrame —Å –∏–Ω–¥–µ–∫—Å–æ–º timestamp –∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏: high, low, close, volume
        """

        # –í—ã—á–∏—Å–ª—è–µ–º lookback_start
        lookback_start = start_date - timedelta(minutes=self.lookback_periods * self.timeframe_minutes)

        with self.db.get_connection() as conn:
            if self.timeframe == '1m':
                # –î–ª—è 1m - —á–∏—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
                query = f"""
                    SELECT timestamp, high, low, close, volume
                    FROM {self.candles_table}
                    WHERE symbol = %s
                      AND timestamp >= %s
                      AND timestamp <= %s
                    ORDER BY timestamp ASC
                """

                df = pd.read_sql_query(
                    query,
                    conn,
                    params=(self.symbol, lookback_start, end_date),
                    parse_dates=['timestamp']
                )
            else:
                # –î–ª—è 15m –∏ 1h - –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –∏–∑ 1m –¥–∞–Ω–Ω—ã—Ö
                interval_minutes = self.timeframe_minutes
                query = f"""
                    SELECT
                        date_trunc('hour', timestamp) +
                        INTERVAL '{interval_minutes} minutes' * (EXTRACT(MINUTE FROM timestamp)::INTEGER / {interval_minutes}) as timestamp,
                        MAX(high) as high,
                        MIN(low) as low,
                        (array_agg(close ORDER BY timestamp DESC))[1] as close,
                        SUM(volume) as volume
                    FROM {self.candles_table}
                    WHERE symbol = %s
                      AND timestamp >= %s
                      AND timestamp <= %s
                    GROUP BY date_trunc('hour', timestamp) +
                             INTERVAL '{interval_minutes} minutes' * (EXTRACT(MINUTE FROM timestamp)::INTEGER / {interval_minutes})
                    ORDER BY timestamp ASC
                """

                df = pd.read_sql_query(
                    query,
                    conn,
                    params=(self.symbol, lookback_start, end_date),
                    parse_dates=['timestamp']
                )

            if df.empty:
                return pd.DataFrame()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timestamp –∫–∞–∫ –∏–Ω–¥–µ–∫—Å
            df.set_index('timestamp', inplace=True)

            return df

    def save_to_db(self, df: pd.DataFrame, batch_start, batch_end, columns: list):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ indicators —Ç–∞–±–ª–∏—Ü—É

        Args:
            df: DataFrame —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ MFI –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            batch_start: –ù–∞—á–∞–ª–æ –±–∞—Ç—á–∞ (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
            batch_end: –ö–æ–Ω–µ—Ü –±–∞—Ç—á–∞ (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
            columns: –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, ['mfi_14'])
        """

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞—Ç—á (–±–µ–∑ lookback)
        df_batch = df[(df.index >= batch_start) & (df.index <= batch_end)].copy()

        if df_batch.empty:
            return

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è UPDATE
        update_data = []
        for timestamp, row in df_batch.iterrows():
            for col in columns:
                if col in row and pd.notna(row[col]):
                    update_data.append({
                        'timestamp': timestamp,
                        'symbol': self.symbol,
                        'column': col,
                        'value': float(row[col])
                    })

        if not update_data:
            return

        # Bulk UPDATE
        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                for data in update_data:
                    sql = f"""
                        UPDATE {self.indicators_table}
                        SET {data['column']} = %s
                        WHERE timestamp = %s AND symbol = %s
                    """
                    cur.execute(sql, (data['value'], data['timestamp'], data['symbol']))

                conn.commit()

    def load_mfi_for_symbol(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ MFI –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""

        logger.info("")
        logger.info("=" * 80)
        logger.info(f"üìä {self.symbol} {self.symbol_progress} –ó–∞–≥—Ä—É–∑–∫–∞ MFI")
        logger.info("=" * 80)
        logger.info(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: {self.timeframe}")
        logger.info(f"üì¶ Batch size: {self.batch_days} –¥–µ–Ω—å(–¥–Ω–µ–π)")
        logger.info(f"üìä –ü–µ—Ä–∏–æ–¥—ã: {self.periods}")

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        self.ensure_columns_exist()

        # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        start_date, end_date = self.get_date_range()

        if start_date is None or end_date is None:
            logger.warning(f"‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {self.symbol}")
            return

        if start_date >= end_date:
            logger.info(f"‚úÖ {self.symbol} - –¥–∞–Ω–Ω—ã–µ MFI –∞–∫—Ç—É–∞–ª—å–Ω—ã")
            return

        # 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π
        total_days = (end_date - start_date).days + 1
        total_batches = max(1, (total_days + self.batch_days - 1) // self.batch_days)

        logger.info(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏: {start_date} ‚Üí {end_date}")
        logger.info(f"üìä –í—Å–µ–≥–æ –¥–Ω–µ–π: {total_days}, –±–∞—Ç—á–µ–π: {total_batches}")
        logger.info("")

        # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ MFI
        for idx, period in enumerate(self.periods, start=1):
            logger.info(f"[{idx}/{len(self.periods)}] MFI –ø–µ—Ä–∏–æ–¥ {period}")

            current_date = start_date
            batch_num = 0

            pbar = tqdm(
                total=total_batches,
                desc=f"{self.symbol} {self.symbol_progress} {self.timeframe} MFI-{period}",
                unit="–±–∞—Ç—á"
            )

            while current_date < end_date:
                batch_end = min(current_date + timedelta(days=self.batch_days), end_date)

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å lookback
                df = self.load_candles_with_lookback(current_date, batch_end)

                if not df.empty:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MFI –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                    col_name = f'mfi_{period}'
                    df[col_name] = self.calculate_mfi(df, period)

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
                    self.save_to_db(df, current_date, batch_end, [col_name])

                batch_num += 1
                pbar.update(1)
                current_date = batch_end

            pbar.close()

        logger.info(f"‚úÖ {self.symbol} –∑–∞–≤–µ—Ä—à–µ–Ω")
        logger.info("")


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    logs_dir = Path(__file__).parent / 'logs'
    logs_dir.mkdir(exist_ok=True)

    # –ò–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    log_file = logs_dir / f'mfi_loader_{timestamp}.log'

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º root logger
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        handlers=[
            logging.FileHandler(log_file, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )

    logger.info(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –õ–æ–≥-—Ñ–∞–π–ª: {log_file}")

    return log_file


def parse_args():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""

    parser = argparse.ArgumentParser(
        description='MFI Loader - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ MFI –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python3 mfi_loader.py                                    # –í—Å–µ —Å–∏–º–≤–æ–ª—ã, –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
  python3 mfi_loader.py --symbol BTCUSDT                   # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª
  python3 mfi_loader.py --symbol BTCUSDT --timeframe 1m    # –°–∏–º–≤–æ–ª + —Ç–∞–π–º—Ñ—Ä–µ–π–º
  python3 mfi_loader.py --symbol BTCUSDT ETHUSDT           # –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤
  python3 mfi_loader.py --batch-days 7                     # –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        """
    )

    parser.add_argument(
        '--symbol',
        nargs='+',
        help='–°–∏–º–≤–æ–ª(—ã) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT ETHUSDT). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—Å–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞'
    )

    parser.add_argument(
        '--timeframe',
        help='–¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (1m, 15m, 1h). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—Å–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞'
    )

    parser.add_argument(
        '--batch-days',
        type=int,
        help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–æ–±—ã—á–Ω–æ 1)'
    )

    return parser.parse_args()


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ YAML —Ñ–∞–π–ª–∞"""

    config_path = Path(__file__).parent / 'indicators_config.yaml'

    if not config_path.exists():
        raise FileNotFoundError(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")

    with open(config_path, 'r', encoding='utf-8') as f:
        config = yaml.safe_load(f)

    return config


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_file = setup_logging()

    logger.info("=" * 80)
    logger.info("üöÄ MFI Loader - –ó–∞–ø—É—Å–∫")
    logger.info("=" * 80)

    # 2. –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args = parse_args()

    # 3. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        config = load_config()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)

    # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã
    if args.symbol:
        symbols = args.symbol
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {symbols}")
    else:
        symbols = config.get('symbols', [])
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {symbols}")

    if not symbols:
        logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        sys.exit(1)

    # 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
    if args.timeframe:
        timeframes = [args.timeframe]
        logger.info(f"‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {timeframes}")
    else:
        timeframes = config.get('timeframes', ['1m', '15m', '1h'])
        logger.info(f"‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {timeframes}")

    # 6. –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º batch_days –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if args.batch_days:
        config['indicators']['mfi']['batch_days'] = args.batch_days
        logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {args.batch_days} –¥–Ω–µ–π")

    logger.info(f"üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä: MFI")
    logger.info("")

    # 7. –û–±—Ä–∞–±–æ—Ç–∫–∞
    total_symbols = len(symbols)

    for symbol_idx, symbol in enumerate(symbols, start=1):
        logger.info("")
        logger.info("=" * 80)
        logger.info(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–º–≤–æ–ª–∞: {symbol} [{symbol_idx}/{total_symbols}]")
        logger.info("=" * 80)
        logger.info("")

        for timeframe in timeframes:
            try:
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
                loader = MFILoader(symbol, timeframe, config)
                loader.symbol_progress = f"[{symbol_idx}/{total_symbols}]"

                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                loader.load_mfi_for_symbol()

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol} –Ω–∞ {timeframe}: {e}", exc_info=True)
                continue

    logger.info("")
    logger.info("=" * 80)
    logger.info("‚úÖ MFI Loader - –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
    logger.info(f"üìù –õ–æ–≥-—Ñ–∞–π–ª: {log_file}")
    logger.info("=" * 80)


if __name__ == '__main__':
    main()
