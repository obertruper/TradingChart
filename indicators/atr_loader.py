#!/usr/bin/env python3
"""
ATR (Average True Range) Loader with Multi-Timeframe Support
==============================================================
–ó–∞–≥—Ä—É–∑—á–∏–∫ ATR –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ (7, 14, 21, 30, 50, 100)
- –ë–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å checkpoint
- –õ—é–±—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ (1m, 15m, 1h)
- –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
- –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–∏–æ–¥–æ–≤ (–º–æ–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å)
- –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –£–∞–π–ª–¥–µ—Ä–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta, timezone
import psycopg2
import psycopg2.extras
from typing import Dict, List, Tuple, Optional
import logging
from tqdm import tqdm
import sys
import os
import warnings
import yaml
import argparse
import time

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è pandas
warnings.filterwarnings('ignore', message='pandas only supports SQLAlchemy')

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from indicators.database import DatabaseConnection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª"""
    log_dir = os.path.join(os.path.dirname(__file__), 'logs')
    os.makedirs(log_dir, exist_ok=True)

    log_filename = os.path.join(log_dir, f'atr_loader_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')

    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler(log_filename, encoding='utf-8')
        ]
    )

    logger = logging.getLogger(__name__)
    logger.info(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –õ–æ–≥-—Ñ–∞–π–ª: {log_filename}")

    return logger

logger = setup_logging()


class ATRLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ ATR (Average True Range) –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""

    def __init__(self, symbol: str = 'BTCUSDT'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        """
        self.db = DatabaseConnection()
        self.symbol = symbol
        self.config = self.load_config()
        self.symbol_progress = ""  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ main() –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∞–ø–∏–Ω–≥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –Ω–∞ –º–∏–Ω—É—Ç—ã
        self.timeframe_minutes = self._parse_timeframes()

    def _parse_timeframes(self) -> dict:
        """
        –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–∞—Ä—Å–∏—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: 1m, 5m, 15m, 30m, 1h, 4h, 1d, 1w

        Returns:
            dict: –ú–∞–ø–∏–Ω–≥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
        """
        timeframe_map = {}

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
        timeframes = self.config.get('timeframes', ['1m', '15m', '1h'])

        for tf in timeframes:
            # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ –∏ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
            import re
            match = re.match(r'^(\d+)([mhdw])$', tf.lower())
            if match:
                number = int(match.group(1))
                unit = match.group(2)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã
                if unit == 'm':
                    minutes = number
                elif unit == 'h':
                    minutes = number * 60
                elif unit == 'd':
                    minutes = number * 60 * 24
                elif unit == 'w':
                    minutes = number * 60 * 24 * 7
                else:
                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏: {unit}")
                    continue

                timeframe_map[tf] = minutes
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º: {tf}")

        logger.info(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: {timeframe_map}")
        return timeframe_map

    def load_config(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞"""
        config_path = os.path.join(os.path.dirname(__file__), 'indicators_config.yaml')

        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)

        return config

    def get_table_name(self, timeframe: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
        return f"indicators_bybit_futures_{timeframe}"

    def get_candles_table_name(self, timeframe: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è —Ç–∞–±–ª–∏—Ü—ã —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
        return f"candles_bybit_futures_{timeframe}"

    def ensure_atr_columns(self, timeframe: str, periods: List[int]):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è ATR –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º (1m, 15m, 1h)
            periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ ATR
        """
        table_name = self.get_table_name(timeframe)

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            try:
                for period in periods:
                    col_name = f'atr_{period}'

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
                    cur.execute(f"""
                        SELECT column_name
                        FROM information_schema.columns
                        WHERE table_name = %s AND column_name = %s
                    """, (table_name, col_name))

                    if cur.fetchone() is None:
                        logger.info(f"‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ {col_name} –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
                        cur.execute(f"""
                            ALTER TABLE {table_name}
                            ADD COLUMN {col_name} DECIMAL(20,8)
                        """)
                        conn.commit()
                        logger.info(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {col_name} —Å–æ–∑–¥–∞–Ω–∞")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫: {e}")
                conn.rollback()
                raise
            finally:
                cur.close()

    def get_data_range(self, timeframe: str) -> Tuple[datetime, datetime]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ —Å–≤–µ—á–µ–π
        –í—Å–µ–≥–¥–∞ —á–∏—Ç–∞–µ—Ç –∏–∑ candles_bybit_futures_1m, —Ç.–∫. —Å—Ç–∞—Ä—à–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
        –∞–≥—Ä–µ–≥–∏—Ä—É—é—Ç—Å—è –∏–∑ –º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

        Returns:
            (min_date, max_date)
        """
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É 1m –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        with self.db.get_connection() as conn:
            cur = conn.cursor()

            try:
                cur.execute("""
                    SELECT MIN(timestamp), MAX(timestamp)
                    FROM candles_bybit_futures_1m
                    WHERE symbol = %s
                """, (self.symbol,))

                result = cur.fetchone()

                if not result or result[0] is None:
                    raise ValueError(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {self.symbol} –≤ candles_bybit_futures_1m")

                return result[0], result[1]
            finally:
                cur.close()

    def get_last_atr_date(self, timeframe: str, period: int) -> Optional[datetime]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º ATR –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            period: –ü–µ—Ä–∏–æ–¥ ATR

        Returns:
            –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –∏–ª–∏ None
        """
        table_name = self.get_table_name(timeframe)
        col_name = f'atr_{period}'

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            try:
                cur.execute(f"""
                    SELECT MAX(timestamp)
                    FROM {table_name}
                    WHERE symbol = %s AND {col_name} IS NOT NULL
                """, (self.symbol,))

                result = cur.fetchone()
                return result[0] if result[0] else None
            finally:
                cur.close()

    def get_last_complete_period(self, current_time: datetime, timeframe: str) -> datetime:
        """
        –ü–æ–ª—É—á–∞–µ—Ç timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ó–ê–í–ï–†–®–ï–ù–ù–û–ì–û –ø–µ—Ä–∏–æ–¥–∞

        Args:
            current_time: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º

        Returns:
            Timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        """
        minutes = self.timeframe_minutes[timeframe]

        if timeframe == '1m':
            # –î–ª—è –º–∏–Ω—É—Ç: –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –Ω–∞ 1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥
            return current_time.replace(second=0, microsecond=0) - timedelta(minutes=1)

        elif timeframe == '15m':
            # –î–ª—è 15m: –æ–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö 15 –º–∏–Ω—É—Ç
            minute = (current_time.minute // 15) * 15
            result = current_time.replace(minute=minute, second=0, microsecond=0)

            # –ï—Å–ª–∏ –º—ã —Ç–æ—á–Ω–æ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –ø–µ—Ä–∏–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å
            if current_time.minute % 15 == 0 and current_time.second == 0:
                # –û—Ç—Å—Ç—É–ø–∞–µ–º –Ω–∞ 15 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
                result -= timedelta(minutes=15)

            return result

        elif timeframe == '1h':
            # –î–ª—è —á–∞—Å–æ–≤: –æ–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–æ –Ω–∞—á–∞–ª–∞ —á–∞—Å–∞
            result = current_time.replace(minute=0, second=0, microsecond=0)

            # –ï—Å–ª–∏ –º—ã —Ç–æ—á–Ω–æ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ —á–∞—Å–∞
            if current_time.minute == 0 and current_time.second == 0:
                result -= timedelta(hours=1)

            return result

        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: –æ–±—â–∞—è –ª–æ–≥–∏–∫–∞
            total_minutes = int(current_time.timestamp() / 60)
            period_start_minutes = (total_minutes // minutes) * minutes
            result = datetime.fromtimestamp(period_start_minutes * 60)

            # –ï—Å–ª–∏ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ - –æ—Ç—Å—Ç—É–ø–∞–µ–º –Ω–∞ –ø–µ—Ä–∏–æ–¥ –Ω–∞–∑–∞–¥
            if total_minutes % minutes == 0:
                result -= timedelta(minutes=minutes)

            return result

    def aggregate_candles(self, start_date: datetime, end_date: datetime, timeframe: str) -> pd.DataFrame:
        """
        –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ –≤ –Ω—É–∂–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –∏–ª–∏ —á–∏—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é

        Args:
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
            timeframe: –¶–µ–ª–µ–≤–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º

        Returns:
            DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: timestamp, symbol, high, low, close
        """
        with self.db.get_connection() as conn:
            if timeframe == '1m':
                # –î–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–∏—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
                query = """
                    SELECT timestamp, symbol, high, low, close
                    FROM candles_bybit_futures_1m
                    WHERE symbol = %s
                      AND timestamp >= %s
                      AND timestamp <= %s
                    ORDER BY timestamp
                """
                df = pd.read_sql_query(query, conn, params=(self.symbol, start_date, end_date))
            else:
                # –î–ª—è —Å—Ç–∞—Ä—à–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –∏–∑ –º–∏–Ω—É—Ç–Ω—ã—Ö
                minutes = self.timeframe_minutes[timeframe]

                query = f"""
                    WITH time_groups AS (
                        SELECT
                            timestamp,
                            DATE_TRUNC('hour', timestamp) +
                            INTERVAL '1 minute' * (FLOOR(EXTRACT(MINUTE FROM timestamp) / {minutes}) * {minutes}) as period_start,
                            high,
                            low,
                            close,
                            symbol
                        FROM candles_bybit_futures_1m
                        WHERE symbol = %s
                          AND timestamp >= %s
                          AND timestamp <= %s
                    )
                    SELECT
                        period_start + INTERVAL '{minutes} minutes' as timestamp,
                        symbol,
                        MAX(high) as high,
                        MIN(low) as low,
                        (ARRAY_AGG(close ORDER BY period_start DESC))[1] as close
                    FROM time_groups
                    GROUP BY period_start, symbol
                    ORDER BY period_start
                """

                df = pd.read_sql_query(query, conn, params=(self.symbol, start_date, end_date))

            return df

    def calculate_true_range(self, df: pd.DataFrame) -> pd.Series:
        """
        –†–∞—Å—á–µ—Ç True Range –¥–ª—è –∫–∞–∂–¥–æ–π —Å–≤–µ—á–∏
        TR = max(High - Low, |High - Previous Close|, |Low - Previous Close|)

        Args:
            df: DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ high, low, close

        Returns:
            Series —Å True Range
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        df = df.copy()
        df['prev_close'] = df['close'].shift(1)

        # –¢—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ True Range
        df['hl'] = df['high'] - df['low']
        df['hc'] = abs(df['high'] - df['prev_close'])
        df['lc'] = abs(df['low'] - df['prev_close'])

        # True Range = –º–∞–∫—Å–∏–º—É–º –∏–∑ —Ç—Ä–µ—Ö
        df['tr'] = df[['hl', 'hc', 'lc']].max(axis=1)

        # –î–ª—è –ø–µ—Ä–≤–æ–π —Å–≤–µ—á–∏ (–≥–¥–µ –Ω–µ—Ç prev_close) –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ hl
        df.loc[df['prev_close'].isna(), 'tr'] = df.loc[df['prev_close'].isna(), 'hl']

        return df['tr']

    def calculate_atr(self, df: pd.DataFrame, period: int) -> pd.Series:
        """
        –†–∞—Å—á–µ—Ç ATR –∏—Å–ø–æ–ª—å–∑—É—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –£–∞–π–ª–¥–µ—Ä–∞

        –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = SMA(TR, period)
        –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ: ATR = (ATR_prev √ó (period - 1) + TR_current) / period

        Args:
            df: DataFrame —Å –∫–æ–ª–æ–Ω–∫–æ–π 'tr' (True Range)
            period: –ü–µ—Ä–∏–æ–¥ ATR

        Returns:
            Series —Å ATR –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        """
        df = df.copy()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        if len(df) < period:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ATR_{period}: {len(df)} < {period}")
            return pd.Series([np.nan] * len(df), index=df.index)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ATR
        atr_values = []

        # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –ø—Ä–æ—Å—Ç–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –ø–µ—Ä–≤—ã—Ö period –∑–Ω–∞—á–µ–Ω–∏–π TR
        first_atr = df['tr'].iloc[:period].mean()

        # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –¥–ª—è –ø–µ—Ä–≤—ã—Ö period-1 –∑–Ω–∞—á–µ–Ω–∏–π
        atr_values = [np.nan] * (period - 1)
        atr_values.append(first_atr)

        # –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ–º –£–∞–π–ª–¥–µ—Ä–∞
        for i in range(period, len(df)):
            current_atr = (atr_values[-1] * (period - 1) + df['tr'].iloc[i]) / period
            atr_values.append(current_atr)

        return pd.Series(atr_values, index=df.index)

    def save_single_column_to_db(self, df: pd.DataFrame, table_name: str, period: int):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É ATR –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        Args:
            df: DataFrame —Å –∫–æ–ª–æ–Ω–∫–æ–π atr_{period}
            table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
            period: –ü–µ—Ä–∏–æ–¥ ATR
        """
        col_name = f'atr_{period}'

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ-NULL –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        df_to_save = df[df[col_name].notna()].copy()

        if len(df_to_save) == 0:
            logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ {col_name}")
            return

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º batch update –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                update_query = f"""
                    UPDATE {table_name}
                    SET {col_name} = %s
                    WHERE timestamp = %s AND symbol = %s
                """

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è batch update
                data = [
                    (float(row[col_name]), row['timestamp'], row['symbol'])
                    for _, row in df_to_save.iterrows()
                ]

                # –í—ã–ø–æ–ª–Ω—è–µ–º batch update
                psycopg2.extras.execute_batch(cur, update_query, data, page_size=1000)
                conn.commit()

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å tqdm progress bar
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ pbar.set_postfix()

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ {col_name}: {e}")
                conn.rollback()
                raise
            finally:
                cur.close()

    def calculate_and_save_atr(self, timeframe: str, periods: List[int], batch_days: int = 1):
        """
        –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç ATR –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º (1m, 15m, 1h)
            periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ ATR
            batch_days: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö
        """
        table_name = self.get_table_name(timeframe)

        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ ATR –¥–ª—è {self.symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}")
        logger.info(f"üìä –ü–µ—Ä–∏–æ–¥—ã: {periods}")
        logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_days} –¥–Ω–µ–π")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        min_date, max_date = self.get_data_range(timeframe)
        logger.info(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î: {min_date} - {max_date}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–∏—Å–ø–æ–ª—å–∑—É–µ–º max_date –∏–∑ –ë–î –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è)
        last_complete_period = self.get_last_complete_period(max_date, timeframe)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º max_date –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
        if max_date > last_complete_period:
            logger.info(f"‚è∏Ô∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ max_date –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {last_complete_period}")
            max_date = last_complete_period

        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        for period in periods:
            logger.info(f"\n{'='*80}")
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–∏–æ–¥–∞: ATR_{period}")
            logger.info(f"{'='*80}")

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            last_date = self.get_last_atr_date(timeframe, period)

            if last_date:
                # –ù–∞—á–∏–Ω–∞–µ–º —Å –¥–Ω—è –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                start_date = last_date + timedelta(days=1)
                start_date = start_date.replace(hour=0, minute=0, second=0, microsecond=0)
                logger.info(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ ATR_{period}: {last_date}")
                logger.info(f"‚ñ∂Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å: {start_date}")
            else:
                # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞
                start_date = min_date
                logger.info(f"üÜï ATR_{period} –ø—É—Å—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞: {start_date}")

            # –ï—Å–ª–∏ —É–∂–µ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
            if start_date > max_date:
                logger.info(f"‚úÖ ATR_{period} —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω (–¥–æ {max_date})")
                continue

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            total_days = (max_date.date() - start_date.date()).days + 1
            logger.info(f"üìÜ –í—Å–µ–≥–æ –¥–Ω–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_days}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏
            current_date = start_date
            processed_days = 0
            total_records = 0  # –°—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π

            # Lookback –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ = period √ó 2 √ó timeframe_minutes
            lookback_minutes = period * 2 * self.timeframe_minutes[timeframe]
            lookback_delta = timedelta(minutes=lookback_minutes)

            logger.info(f"üîô Lookback –ø–µ—Ä–∏–æ–¥: {lookback_minutes} –º–∏–Ω—É—Ç ({period} √ó 2 √ó {self.timeframe_minutes[timeframe]})")

            with tqdm(total=total_days,
                     desc=f"{self.symbol} {self.symbol_progress} {timeframe.upper()} ATR-{period}",
                     unit="day",
                     bar_format='{desc}: {percentage:3.0f}%|{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}] {postfix}') as pbar:
                while current_date <= max_date:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—Ü –±–∞—Ç—á–∞
                    batch_end = min(
                        current_date + timedelta(days=batch_days) - timedelta(seconds=1),
                        max_date
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º lookback –∫ –Ω–∞—á–∞–ª—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
                    data_start = current_date - lookback_delta

                    try:
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å lookback
                        df = self.aggregate_candles(data_start, batch_end, timeframe)

                        if len(df) == 0:
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –±–∞—Ç—á–∏ –±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å (–Ω–µ –º–µ—à–∞–µ–º tqdm)
                            current_date += timedelta(days=batch_days)
                            processed_days += batch_days
                            pbar.update(min(batch_days, total_days - processed_days + batch_days))
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º True Range
                        df['tr'] = self.calculate_true_range(df)

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ATR
                        df[f'atr_{period}'] = self.calculate_atr(df, period)

                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–±–µ–∑ lookback)
                        df_to_save = df[df['timestamp'] >= current_date].copy()

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å retry –ª–æ–≥–∏–∫–æ–π
                        max_retries = 3
                        for attempt in range(max_retries):
                            try:
                                self.save_single_column_to_db(df_to_save, table_name, period)
                                break
                            except Exception as e:
                                if attempt < max_retries - 1:
                                    wait_time = 2 ** attempt
                                    # –ù–µ –≤—ã–≤–æ–¥–∏–º warning –≤ –∫–æ–Ω—Å–æ–ª—å, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å tqdm
                                    time.sleep(wait_time)
                                else:
                                    # –¢–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø—Ä–æ–≤–∞–ª–µ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É (—ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ)
                                    logger.error(f"‚ùå –í—Å–µ {max_retries} –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å –¥–ª—è –±–∞—Ç—á–∞ {current_date.date()}")
                                    raise

                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        days_in_batch = min(batch_days, (max_date.date() - current_date.date()).days + 1)
                        processed_days += days_in_batch
                        total_records += len(df_to_save)
                        pbar.update(days_in_batch)

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ progress bar
                        if not df_to_save.empty:
                            latest_timestamp = df_to_save['timestamp'].max()
                            pbar.set_postfix({
                                '–≤—Å–µ–≥–æ': f'{total_records:,}',
                                '–ø–æ—Å–ª–µ–¥–Ω—è—è': latest_timestamp.strftime('%Y-%m-%d %H:%M')
                            })

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞—Ç—á–∞ {current_date.date()}: {e}")
                        raise

                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–∞—Ç—á—É
                    current_date += timedelta(days=batch_days)

            logger.info(f"‚úÖ ATR_{period} –∑–∞–≤–µ—Ä—à–µ–Ω: {total_records:,} –∑–∞–ø–∏—Å–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {processed_days} –¥–Ω–µ–π")

        logger.info(f"\n{'='*80}")
        logger.info(f"üéâ –í—Å–µ –ø–µ—Ä–∏–æ–¥—ã ATR –¥–ª—è {timeframe} –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        logger.info(f"{'='*80}")

    def run(self, timeframe: str = None, batch_days: int = None):
        """
        –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ ATR

        Args:
            timeframe: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö
            batch_days: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        atr_config = self.config['indicators']['atr']
        periods = atr_config['periods']

        if batch_days is None:
            batch_days = atr_config.get('batch_days', 1)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if timeframe:
            timeframes = [timeframe]
        else:
            timeframes = self.config.get('timeframes', ['1m', '15m', '1h'])

        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ ATR Loader –¥–ª—è {self.symbol}")
        logger.info(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {timeframes}")
        logger.info(f"üìä –ü–µ—Ä–∏–æ–¥—ã: {periods}")
        logger.info(f"üì¶ Batch size: {batch_days} –¥–Ω–µ–π")

        for tf in timeframes:
            logger.info(f"\n{'#'*80}")
            logger.info(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: {tf}")
            logger.info(f"{'#'*80}")

            # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            self.ensure_atr_columns(tf, periods)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ATR
            self.calculate_and_save_atr(tf, periods, batch_days)

        logger.info(f"\n{'#'*80}")
        logger.info(f"üéâ –ó–∞–≥—Ä—É–∑–∫–∞ ATR –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤!")
        logger.info(f"{'#'*80}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='ATR Loader –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤')
    parser.add_argument('--symbol', type=str, default=None,
                       help='–û–¥–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)')
    parser.add_argument('--symbols', type=str, default=None,
                       help='–ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT,ETHUSDT)')
    parser.add_argument('--timeframe', type=str, help='–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º (1m, 15m, 1h)')
    parser.add_argument('--batch-days', type=int, help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö')

    args = parser.parse_args()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if args.symbols:
        symbols = [s.strip() for s in args.symbols.split(',')]
    elif args.symbol:
        symbols = [args.symbol]
    else:
        config_path = os.path.join(os.path.dirname(__file__), 'indicators_config.yaml')
        if os.path.exists(config_path):
            import yaml
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
                symbols = config.get('symbols', ['BTCUSDT'])
        else:
            symbols = ['BTCUSDT']

    logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤: {symbols}")

    # –¶–∏–∫–ª –ø–æ –≤—Å–µ–º —Å–∏–º–≤–æ–ª–∞–º
    total_symbols = len(symbols)
    for idx, symbol in enumerate(symbols, 1):
        logger.info(f"\n{'='*80}")
        logger.info(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–º–≤–æ–ª–∞: {symbol} [{idx}/{total_symbols}]")
        logger.info(f"{'='*80}\n")

        loader = ATRLoader(symbol=symbol)
        loader.symbol_progress = f"[{idx}/{total_symbols}]"
        loader.run(timeframe=args.timeframe, batch_days=args.batch_days)

        logger.info(f"\n‚úÖ –°–∏–º–≤–æ–ª {symbol} –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n")

    logger.info(f"\nüéâ –í—Å–µ —Å–∏–º–≤–æ–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {symbols}")


if __name__ == "__main__":
    main()
