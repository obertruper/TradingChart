#!/usr/bin/env python3
"""
RSI (Relative Strength Index) Loader with Enhanced Batch Processing
===================================================================
–ó–∞–≥—Ä—É–∑—á–∏–∫ RSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
- –†–∞–∑–¥–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ (7, 9, 14, 21, 25)
- –ë–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å checkpoint
- –õ—é–±—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ (1m, 15m, 1h –∏ —Ç.–¥.)
- –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from datetime import datetime, timedelta, timezone
import logging
from typing import Dict, List, Optional, Tuple
import pandas as pd
import numpy as np
import yaml
from tqdm import tqdm
import argparse
import warnings

warnings.filterwarnings('ignore')

from database import DatabaseConnection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—ã–≤–æ–¥–æ–º –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å"""
    log_dir = os.path.join(os.path.dirname(__file__), 'logs')
    os.makedirs(log_dir, exist_ok=True)

    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    log_file = os.path.join(log_dir, f'rsi_{timestamp}.log')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    file_handler = logging.FileHandler(log_file)
    file_handler.setFormatter(formatter)

    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

    logger.info(f"üìù RSI Loader: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –õ–æ–≥-—Ñ–∞–π–ª: {log_file}")
    return logger

logger = setup_logging()

class RSILoader:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ RSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø—É—Å—Ç—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    """

    def __init__(self, symbol: str = 'BTCUSDT'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        """
        self.db = DatabaseConnection()
        self.symbol = symbol
        self.config = self.load_config()
        self.symbol_progress = ""  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ main() –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.timeframe_minutes = self._parse_timeframes()

    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        config_path = os.path.join(os.path.dirname(__file__), 'indicators_config.yaml')
        with open(config_path, 'r') as f:
            config = yaml.safe_load(f)
        logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
        return config

    def _parse_timeframes(self) -> dict:
        """–ü–∞—Ä—Å–∏—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        timeframe_map = {}
        timeframes = self.config.get('timeframes', ['1m'])

        for tf in timeframes:
            import re
            match = re.match(r'^(\d+)([mhdw])$', tf.lower())
            if match:
                number = int(match.group(1))
                unit = match.group(2)
                if unit == 'm':
                    timeframe_map[tf] = number
                elif unit == 'h':
                    timeframe_map[tf] = number * 60
                elif unit == 'd':
                    timeframe_map[tf] = number * 1440
                elif unit == 'w':
                    timeframe_map[tf] = number * 10080

        return timeframe_map

    def create_rsi_columns(self, timeframe: str, periods: List[int]) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è RSI –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        table_name = f'indicators_bybit_futures_{timeframe}'

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            cur.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables
                    WHERE table_name = %s
                )
            """, (table_name,))

            if not cur.fetchone()[0]:
                logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return False

            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            cur.execute("""
                SELECT column_name
                FROM information_schema.columns
                WHERE table_name = %s
            """, (table_name,))

            existing_columns = {row[0] for row in cur.fetchall()}

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            columns_added = []
            for period in periods:
                col_name = f'rsi_{period}'
                if col_name not in existing_columns:
                    cur.execute(f"""
                        ALTER TABLE {table_name}
                        ADD COLUMN IF NOT EXISTS {col_name} DECIMAL(10,4)
                    """)
                    columns_added.append(col_name)

            if columns_added:
                conn.commit()
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ RSI: {columns_added} –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}")
            else:
                logger.info(f"‚ÑπÔ∏è –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ RSI —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ {table_name}")

            return True

    def analyze_rsi_periods(self, timeframe: str, periods: List[int]) -> Dict[str, List[int]]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å RSI –ø–µ—Ä–∏–æ–¥–æ–≤ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏—Ö –ø–æ —Å—Ç–∞—Ç—É—Å—É

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–µ—Ä–∏–æ–¥–æ–≤:
            - 'empty': –ø—É—Å—Ç—ã–µ –ø–µ—Ä–∏–æ–¥—ã (< 50% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è)
            - 'partial': —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ (50-95%)
            - 'complete': –ø–æ—á—Ç–∏ –ø–æ–ª–Ω—ã–µ (> 95%)
        """
        table_name = f'indicators_bybit_futures_{timeframe}'
        groups = {
            'empty': [],
            'partial': [],
            'complete': []
        }
        checkpoints = {}

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            logger.info(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö RSI:")

            for period in periods:
                col_name = f'rsi_{period}'

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                cur.execute(f"""
                    SELECT
                        COUNT(*) as total,
                        COUNT({col_name}) as filled,
                        MIN(timestamp) FILTER (WHERE {col_name} IS NOT NULL) as first_rsi,
                        MAX(timestamp) FILTER (WHERE {col_name} IS NOT NULL) as last_rsi
                    FROM {table_name}
                    WHERE symbol = %s
                """, (self.symbol,))

                result = cur.fetchone()
                if result:
                    total, filled, first_rsi, last_rsi = result
                    if total > 0:
                        fill_percent = (filled / total) * 100 if filled else 0

                        if fill_percent < 50:
                            groups['empty'].append(period)
                            logger.info(f"  ‚ùå RSI_{period}: {fill_percent:.1f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–æ (–±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —Å –Ω–∞—á–∞–ª–∞)")
                        elif fill_percent < 95:
                            groups['partial'].append(period)
                            checkpoints[period] = {'date': last_rsi, 'state': {}}
                            logger.info(f"  ‚ö†Ô∏è RSI_{period}: {fill_percent:.1f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–æ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å {last_rsi.strftime('%Y-%m-%d %H:%M') if last_rsi else '–Ω–∞—á–∞–ª–∞'})")
                        else:
                            groups['complete'].append(period)
                            checkpoints[period] = {'date': last_rsi, 'state': {}}
                            logger.info(f"  ‚úÖ RSI_{period}: {fill_percent:.1f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–æ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å {last_rsi.strftime('%Y-%m-%d %H:%M') if last_rsi else '–∫–æ–Ω—Ü–∞'})")
                    else:
                        groups['empty'].append(period)
                        logger.info(f"  üìù RSI_{period}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ (–±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —Å –Ω–∞—á–∞–ª–∞)")
                else:
                    groups['empty'].append(period)
                    logger.info(f"  üìù RSI_{period}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö (–±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —Å –Ω–∞—á–∞–ª–∞)")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º checkpoints –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.checkpoints = checkpoints

        return groups

    def calculate_rsi_batch(self, closes: np.ndarray, period: int,
                           initial_avg_gain: float = None,
                           initial_avg_loss: float = None):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç RSI –¥–ª—è –±–∞—Ç—á–∞ –¥–∞–Ω–Ω—ã—Ö

        Returns:
            Tuple[–º–∞—Å—Å–∏–≤ RSI, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π avg_gain, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π avg_loss]
        """
        if len(closes) < period + 1:
            return np.full(len(closes), np.nan), None, None

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        deltas = np.diff(closes)
        gains = np.where(deltas > 0, deltas, 0)
        losses = np.where(deltas < 0, -deltas, 0)

        rsi_values = np.full(len(closes), np.nan)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ checkpoint
        if initial_avg_gain is None or initial_avg_loss is None:
            # –ü–µ—Ä–≤—ã–π —Ä–∞—Å—á–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º SMA –¥–ª—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            avg_gain = np.mean(gains[:period])
            avg_loss = np.mean(losses[:period])
            start_idx = period
        else:
            avg_gain = initial_avg_gain
            avg_loss = initial_avg_loss
            start_idx = 0

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏
        for i in range(start_idx, len(gains)):
            # –°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ (Wilder's smoothing)
            avg_gain = (avg_gain * (period - 1) + gains[i]) / period
            avg_loss = (avg_loss * (period - 1) + losses[i]) / period

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI
            if avg_loss == 0:
                rsi = 100
            else:
                rs = avg_gain / avg_loss
                rsi = 100 - (100 / (1 + rs))

            rsi_values[i + 1] = rsi  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ deltas –∫–æ—Ä–æ—á–µ –Ω–∞ 1

        return rsi_values, avg_gain, avg_loss

    def process_batch(self, timeframe: str, periods: List[int],
                     start_date: datetime, end_date: datetime,
                     initial_states: Dict[int, Dict]) -> Dict[int, Dict]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç RSI –≤ –ë–î

        Returns:
            –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞
        """
        table_name = f'indicators_bybit_futures_{timeframe}'

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            # –î–ª—è RSI –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è (close)
            price_column = 'close'  # RSI –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø–æ close –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if timeframe == '1m':
                cur.execute(f"""
                    SELECT timestamp, close
                    FROM candles_bybit_futures_1m
                    WHERE symbol = %s
                    AND timestamp > %s
                    AND timestamp <= %s
                    ORDER BY timestamp
                """, (self.symbol, start_date, end_date))
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –∏–∑ 1m –¥–∞–Ω–Ω—ã—Ö
                interval_minutes = self.timeframe_minutes[timeframe]
                cur.execute(f"""
                    SELECT
                        date_trunc('hour', timestamp) +
                        INTERVAL '{interval_minutes} minutes' * (EXTRACT(MINUTE FROM timestamp)::INTEGER / {interval_minutes}) as period_start,
                        (array_agg(close ORDER BY timestamp DESC))[1] as close_price
                    FROM candles_bybit_futures_1m
                    WHERE symbol = %s
                    AND timestamp > %s
                    AND timestamp <= %s
                    GROUP BY period_start
                    ORDER BY period_start
                """, (self.symbol, start_date, end_date))

            data = cur.fetchall()
            if not data:
                return initial_states

            timestamps = [row[0] for row in data]
            closes = np.array([float(row[1]) for row in data])

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            rsi_results = {}
            final_states = {}

            for period in periods:
                initial_state = initial_states.get(period, {})
                initial_avg_gain = initial_state.get('avg_gain')
                initial_avg_loss = initial_state.get('avg_loss')

                # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –Ω—É–∂–µ–Ω –±—É—Ñ–µ—Ä –¥–∞–Ω–Ω—ã—Ö
                if initial_avg_gain is None:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                    buffer_start = start_date - timedelta(minutes=period * self.timeframe_minutes.get(timeframe, 1) * 2)

                    if timeframe == '1m':
                        cur.execute(f"""
                            SELECT close
                            FROM candles_bybit_futures_1m
                            WHERE symbol = %s
                            AND timestamp > %s
                            AND timestamp <= %s
                            ORDER BY timestamp
                        """, (self.symbol, buffer_start, start_date))
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –∏–∑ 1m –¥–∞–Ω–Ω—ã—Ö
                        interval_minutes = self.timeframe_minutes[timeframe]
                        cur.execute(f"""
                            SELECT
                                (array_agg(close ORDER BY timestamp DESC))[1] as close_price
                            FROM (
                                SELECT
                                    date_trunc('hour', timestamp) +
                                    INTERVAL '{interval_minutes} minutes' * (EXTRACT(MINUTE FROM timestamp)::INTEGER / {interval_minutes}) as period_start,
                                    timestamp,
                                    close
                                FROM candles_bybit_futures_1m
                                WHERE symbol = %s
                                AND timestamp > %s
                                AND timestamp <= %s
                            ) t
                            GROUP BY period_start
                            ORDER BY period_start
                        """, (self.symbol, buffer_start, start_date))

                    buffer_data = [float(row[0]) for row in cur.fetchall()]
                    if len(buffer_data) >= period:
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –±—É—Ñ–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏
                        all_closes = np.concatenate([buffer_data, closes])
                        rsi_values, avg_gain, avg_loss = self.calculate_rsi_batch(
                            all_closes, period
                        )
                        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ RSI –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        rsi_values = rsi_values[len(buffer_data):]
                    else:
                        # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                        rsi_values, avg_gain, avg_loss = self.calculate_rsi_batch(
                            closes, period
                        )
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º checkpoint
                    rsi_values, avg_gain, avg_loss = self.calculate_rsi_batch(
                        closes, period, initial_avg_gain, initial_avg_loss
                    )

                rsi_results[period] = rsi_values
                final_states[period] = {
                    'avg_gain': avg_gain,
                    'avg_loss': avg_loss
                }

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
            for i, timestamp in enumerate(timestamps):
                updates = []
                params = []

                for period in periods:
                    if i < len(rsi_results[period]):
                        rsi_value = rsi_results[period][i]
                        if not np.isnan(rsi_value):
                            updates.append(f"rsi_{period} = %s")
                            params.append(float(rsi_value))

                if updates:
                    params.extend([self.symbol, timestamp])
                    update_query = f"""
                        UPDATE {table_name}
                        SET {', '.join(updates)}
                        WHERE symbol = %s AND timestamp = %s
                    """
                    cur.execute(update_query, params)

            conn.commit()

        return final_states

    def process_periods_group(self, timeframe: str, periods: List[int],
                             batch_days: int, start_date: Optional[datetime] = None,
                             from_beginning: bool = False):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥—Ä—É–ø–ø—É –ø–µ—Ä–∏–æ–¥–æ–≤ RSI

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            batch_days: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            from_beginning: –ù–∞—á–∞—Ç—å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ (–¥–ª—è –ø—É—Å—Ç—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤)
        """
        if not periods:
            return

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É
            if start_date:
                current_date = start_date
            elif from_beginning:
                # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ - –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 1m —Å–≤–µ—á–µ–π
                cur.execute(f"""
                    SELECT MIN(timestamp)
                    FROM candles_bybit_futures_1m
                    WHERE symbol = %s
                """, (self.symbol,))
                result = cur.fetchone()
                if result and result[0]:
                    current_date = result[0]
                else:
                    logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    return
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π checkpoint —Å—Ä–µ–¥–∏ –ø–µ—Ä–∏–æ–¥–æ–≤
                valid_dates = []
                for period in periods:
                    if period in self.checkpoints and self.checkpoints[period].get('date'):
                        valid_dates.append(self.checkpoints[period]['date'])

                if valid_dates:
                    current_date = min(valid_dates)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç checkpoint'–æ–≤, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞
                    cur.execute(f"""
                        SELECT MIN(timestamp)
                        FROM candles_bybit_futures_1m
                        WHERE symbol = %s
                    """, (self.symbol,))
                    result = cur.fetchone()
                    if result and result[0]:
                        current_date = result[0]
                    else:
                        logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                        return

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
            cur.execute(f"""
                SELECT MAX(timestamp)
                FROM candles_bybit_futures_1m
                WHERE symbol = %s
            """, (self.symbol,))
            max_date = cur.fetchone()[0]

            if not max_date or current_date >= max_date:
                logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
                return

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∏
            total_days = (max_date - current_date).days
            total_batches = (total_days + batch_days - 1) // batch_days

            logger.info(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {total_days} –¥–Ω–µ–π ({current_date.strftime('%Y-%m-%d')} ‚Üí {max_date.strftime('%Y-%m-%d')})")
            logger.info(f"   ‚Ä¢ –ë–∞—Ç—á–µ–π: {total_batches}")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_states = {}
            for period in periods:
                if period in self.checkpoints and not from_beginning:
                    current_states[period] = self.checkpoints[period].get('state', {})
                else:
                    current_states[period] = {}

            action = '–ó–∞–≥—Ä—É–∑–∫–∞' if from_beginning else '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ'
            progress_desc = f"{self.symbol} {self.symbol_progress} RSI {periods} {timeframe.upper()}" if self.symbol_progress else f"{self.symbol} RSI {periods} {timeframe.upper()}"
            with tqdm(total=total_batches, desc=f"üìä {progress_desc} - {action}") as pbar:
                batch_num = 0

                while current_date < max_date:
                    batch_end = min(current_date + timedelta(days=batch_days), max_date)

                    try:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
                        current_states = self.process_batch(
                            timeframe, periods,
                            current_date, batch_end,
                            current_states
                        )

                        batch_num += 1
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ –≤ progress bar
                        symbol_info = f"{self.symbol} {self.symbol_progress} " if self.symbol_progress else f"{self.symbol} "
                        pbar.set_description(
                            f"{symbol_info}–ë–∞—Ç—á {batch_num}/{total_batches} "
                            f"(–¥–æ {batch_end.strftime('%Y-%m-%d %H:%M')})"
                        )
                        pbar.update(1)

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞—Ç—á–∞: {e}")
                        import traceback
                        traceback.print_exc()
                        break

                    current_date = batch_end

    def process_timeframe(self, timeframe: str, batch_days: int = 7,
                         start_date: Optional[datetime] = None):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç RSI –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø—É—Å—Ç—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            batch_days: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (–µ—Å–ª–∏ None, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å checkpoint)
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        periods = self.config.get('indicators', {}).get('rsi', {}).get('periods', [14])
        batch_days = self.config.get('indicators', {}).get('rsi', {}).get('batch_days', batch_days)

        logger.info(f"\n{'='*60}")
        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ RSI –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {timeframe}")
        logger.info(f"üìà –ü–µ—Ä–∏–æ–¥—ã RSI: {periods}")
        logger.info(f"üéØ –°–∏–º–≤–æ–ª: {self.symbol}")
        logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_days} –¥–Ω–µ–π")
        logger.info(f"{'='*60}")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not self.create_rsi_columns(timeframe, periods):
            return

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–æ–≤
        groups = self.analyze_rsi_periods(timeframe, periods)

        # –í—ã–≤–æ–¥–∏–º –ø–ª–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
        if groups['empty'] or groups['partial'] or groups['complete']:
            logger.info(f"\nüìã –ü–ª–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏:")
            if groups['empty']:
                logger.info(f"  üîÑ –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –Ω–∞—á–∞–ª–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤: {groups['empty']}")
            if groups['partial']:
                logger.info(f"  ‚è© –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤: {groups['partial']}")
            if groups['complete']:
                logger.info(f"  üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤: {groups['complete']}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–µ—Ä–∏–æ–¥—ã (—Å –Ω–∞—á–∞–ª–∞)
        if groups['empty']:
            logger.info(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –ø—É—Å—Ç—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ RSI: {groups['empty']}")
            self.process_periods_group(timeframe, groups['empty'], batch_days, start_date, from_beginning=True)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã (—Å checkpoint'–∞)
        if groups['partial']:
            logger.info(f"\nüöÄ –ü—Ä–æ–¥–æ–ª–∂–∞—é –∑–∞–≥—Ä—É–∑–∫—É —á–∞—Å—Ç–∏—á–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ RSI: {groups['partial']}")
            self.process_periods_group(timeframe, groups['partial'], batch_days, start_date, from_beginning=False)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
        if groups['complete']:
            logger.info(f"\nüöÄ –û–±–Ω–æ–≤–ª—è—é –ø–æ–ª–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã RSI: {groups['complete']}")
            self.process_periods_group(timeframe, groups['complete'], batch_days, start_date, from_beginning=False)

        if not groups['empty'] and not groups['partial'] and not groups['complete']:
            logger.info(f"\n‚úÖ –í—Å–µ –ø–µ—Ä–∏–æ–¥—ã RSI –¥–ª—è {timeframe} —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã!")

        logger.info(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ RSI –¥–ª—è {timeframe} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    def run(self, timeframes: List[str] = None, batch_days: int = 7,
            start_date: Optional[datetime] = None):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É RSI –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤

        Args:
            timeframes: –°–ø–∏—Å–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
            batch_days: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
        """
        if not timeframes:
            timeframes = self.config.get('timeframes', ['1m'])

        logger.info(f"\n{'='*60}")
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ RSI Loader")
        logger.info(f"üìä –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {timeframes}")
        logger.info(f"üéØ –°–∏–º–≤–æ–ª: {self.symbol}")
        logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_days} –¥–Ω–µ–π")
        if start_date:
            logger.info(f"üìÖ –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {start_date}")
        else:
            logger.info(f"‚ôªÔ∏è –†–µ–∂–∏–º: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤")
        logger.info(f"{'='*60}")

        for timeframe in timeframes:
            if timeframe not in self.timeframe_minutes:
                logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
                continue

            self.process_timeframe(timeframe, batch_days, start_date)

        logger.info(f"\n{'='*60}")
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"{'='*60}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='RSI Indicator Loader - –∑–∞–≥—Ä—É–∑—á–∏–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø—É—Å—Ç—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python rsi_loader.py                          # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—É—Å—Ç—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
  python rsi_loader.py --timeframe 1m           # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ 1m —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
  python rsi_loader.py --timeframes 1m,15m,1h   # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
  python rsi_loader.py --batch-days 7           # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞—Ç—á–∏ –ø–æ 7 –¥–Ω–µ–π
  python rsi_loader.py --start-date 2024-01-01  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞—Ç—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
  python rsi_loader.py --symbol ETHUSDT         # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        """
    )

    parser.add_argument('--symbol', type=str, default=None,
                       help='–û–¥–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)')
    parser.add_argument('--symbols', type=str, default=None,
                       help='–ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT,ETHUSDT)')
    parser.add_argument('--timeframe', type=str,
                       help='–û–¥–∏–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--timeframes', type=str,
                       help='–ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1m,15m,1h)')
    parser.add_argument('--batch-days', type=int, default=7,
                       help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 7)')
    parser.add_argument('--start-date', type=str,
                       help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)')

    args = parser.parse_args()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if args.symbols:
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç --symbols
        symbols = [s.strip() for s in args.symbols.split(',')]
    elif args.symbol:
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç --symbol
        symbols = [args.symbol]
    else:
        # –ß–∏—Ç–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ config.yaml
        config_path = os.path.join(os.path.dirname(__file__), 'indicators_config.yaml')
        if os.path.exists(config_path):
            import yaml
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
                symbols = config.get('symbols', ['BTCUSDT'])
        else:
            symbols = ['BTCUSDT']

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
    timeframes = None
    if args.timeframe:
        timeframes = [args.timeframe]
    elif args.timeframes:
        timeframes = args.timeframes.split(',')

    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    start_date = None
    if args.start_date:
        try:
            start_date = datetime.strptime(args.start_date, '%Y-%m-%d').replace(tzinfo=timezone.utc)
        except ValueError:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {args.start_date}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
            sys.exit(1)

    logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤: {symbols}")

    # –¶–∏–∫–ª –ø–æ –≤—Å–µ–º —Å–∏–º–≤–æ–ª–∞–º
    total_symbols = len(symbols)
    for idx, symbol in enumerate(symbols, 1):
        logger.info(f"\n{'='*80}")
        logger.info(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–º–≤–æ–ª–∞: {symbol} [{idx}/{total_symbols}]")
        logger.info(f"{'='*80}\n")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
        try:
            loader = RSILoader(symbol=symbol)
            loader.symbol_progress = f"[{idx}/{total_symbols}]"
            loader.run(timeframes, args.batch_days, start_date)
            logger.info(f"\n‚úÖ –°–∏–º–≤–æ–ª {symbol} –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n")
        except KeyboardInterrupt:
            logger.info("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ —Å —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞.")
            sys.exit(0)
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
            import traceback
            traceback.print_exc()
            continue

    logger.info(f"\nüéâ –í—Å–µ —Å–∏–º–≤–æ–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {symbols}")

if __name__ == "__main__":
    main()