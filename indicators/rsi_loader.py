#!/usr/bin/env python3
"""
RSI (Relative Strength Index) Loader with Batch Processing
===========================================================
–ó–∞–≥—Ä—É–∑—á–∏–∫ RSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ (7, 9, 14, 21, 25)
- –ë–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å checkpoint
- –õ—é–±—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ (1m, 15m, 1h –∏ —Ç.–¥.)
- –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from datetime import datetime, timedelta
import logging
from typing import Dict, List, Optional, Tuple
import pandas as pd
import numpy as np
import yaml
from tqdm import tqdm
import argparse
import warnings

warnings.filterwarnings('ignore')

from database import DatabaseConnection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—ã–≤–æ–¥–æ–º –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å"""
    log_dir = os.path.join(os.path.dirname(__file__), 'logs')
    os.makedirs(log_dir, exist_ok=True)

    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    log_file = os.path.join(log_dir, f'rsi_{timestamp}.log')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    file_handler = logging.FileHandler(log_file)
    file_handler.setFormatter(formatter)

    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

    logger.info(f"üìù RSI Loader: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –õ–æ–≥-—Ñ–∞–π–ª: {log_file}")
    return logger

logger = setup_logging()

class RSILoader:
    """
    –ó–∞–≥—Ä—É–∑—á–∏–∫ RSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏ checkpoint —Å–∏—Å—Ç–µ–º–æ–π
    """

    def __init__(self, symbol: str = 'BTCUSDT'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        """
        self.db = DatabaseConnection()
        self.symbol = symbol
        self.config = self.load_config()
        self.timeframe_minutes = self._parse_timeframes()

    def _parse_timeframes(self) -> dict:
        """
        –ü–∞—Ä—Å–∏—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        timeframe_map = {}
        timeframes = self.config.get('timeframes', ['1m'])

        for tf in timeframes:
            import re
            match = re.match(r'^(\d+)([mhdw])$', tf.lower())
            if match:
                number = int(match.group(1))
                unit = match.group(2)

                if unit == 'm':
                    minutes = number
                elif unit == 'h':
                    minutes = number * 60
                elif unit == 'd':
                    minutes = number * 1440
                elif unit == 'w':
                    minutes = number * 10080
                else:
                    continue

                timeframe_map[tf] = minutes

        return timeframe_map

    def load_config(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ indicators_config.yaml"""
        config_path = os.path.join(os.path.dirname(__file__), 'indicators_config.yaml')

        if os.path.exists(config_path):
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = yaml.safe_load(f)
                    logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
                    return config
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å indicators_config.yaml: {e}")
                raise
        else:
            logger.error("‚ùå indicators_config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise FileNotFoundError("indicators_config.yaml not found")

    def create_rsi_columns(self, timeframe: str, periods: List[int]) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è RSI –ø–µ—Ä–∏–æ–¥–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ RSI
        """
        table_name = f'indicators_bybit_futures_{timeframe}'

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            cur.execute("""
                SELECT EXISTS (
                    SELECT 1 FROM information_schema.tables
                    WHERE table_name = %s
                )
            """, (table_name,))

            if not cur.fetchone()[0]:
                logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            cur.execute("""
                SELECT column_name
                FROM information_schema.columns
                WHERE table_name = %s
                AND column_name LIKE 'rsi_%%'
            """, (table_name,))

            existing_columns = [row[0] for row in cur.fetchall()]

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            columns_added = []
            for period in periods:
                col_name = f'rsi_{period}'
                if col_name not in existing_columns:
                    try:
                        cur.execute(f"""
                            ALTER TABLE {table_name}
                            ADD COLUMN IF NOT EXISTS {col_name} DECIMAL(10, 4)
                        """)
                        columns_added.append(col_name)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ {col_name}: {e}")
                        conn.rollback()
                        return False

            if columns_added:
                conn.commit()
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ RSI: {', '.join(columns_added)} –≤ {table_name}")
            else:
                logger.info(f"‚ÑπÔ∏è –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ RSI —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ {table_name}")

            return True

    def get_last_rsi_checkpoint(self, timeframe: str, period: int) -> Tuple[Optional[datetime], Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RSI –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤

        Returns:
            Tuple[–ø–æ—Å–ª–µ–¥–Ω–∏–π timestamp, —Å–ª–æ–≤–∞—Ä—å —Å avg_gain –∏ avg_loss]
        """
        table_name = f'indicators_bybit_futures_{timeframe}'
        col_name = f'rsi_{period}'

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å —Å RSI
            cur.execute(f"""
                SELECT timestamp, {col_name}
                FROM {table_name}
                WHERE symbol = %s AND {col_name} IS NOT NULL
                ORDER BY timestamp DESC
                LIMIT 1
            """, (self.symbol,))

            result = cur.fetchone()
            if result:
                # –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–º –Ω—É–∂–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ avg_gain –∏ avg_loss
                # –ò—Ö –º–æ–∂–Ω–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ RSI, –Ω–æ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
                # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ timestamp
                return result[0], {}

            return None, {}

    def calculate_rsi_batch(self, closes: np.ndarray, period: int,
                           initial_avg_gain: float = None,
                           initial_avg_loss: float = None):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç RSI –¥–ª—è –±–∞—Ç—á–∞ –¥–∞–Ω–Ω—ã—Ö

        Args:
            closes: –ú–∞—Å—Å–∏–≤ —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è
            period: –ü–µ—Ä–∏–æ–¥ RSI
            initial_avg_gain: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏—Ä–æ—Å—Ç–∞
            initial_avg_loss: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å

        Returns:
            Tuple[–º–∞—Å—Å–∏–≤ RSI, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π avg_gain, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π avg_loss]
        """
        if len(closes) < period + 1:
            return np.full(len(closes), np.nan), None, None

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        deltas = np.diff(closes)
        gains = np.where(deltas > 0, deltas, 0)
        losses = np.where(deltas < 0, -deltas, 0)

        rsi_values = np.full(len(closes), np.nan)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ checkpoint
        if initial_avg_gain is None or initial_avg_loss is None:
            # –ü–µ—Ä–≤—ã–π —Ä–∞—Å—á–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º SMA –¥–ª—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            avg_gain = np.mean(gains[:period])
            avg_loss = np.mean(losses[:period])
            start_idx = period
        else:
            avg_gain = initial_avg_gain
            avg_loss = initial_avg_loss
            start_idx = 0

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏
        for i in range(start_idx, len(gains)):
            # –°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ (Wilder's smoothing)
            avg_gain = (avg_gain * (period - 1) + gains[i]) / period
            avg_loss = (avg_loss * (period - 1) + losses[i]) / period

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI
            if avg_loss == 0:
                rsi = 100
            else:
                rs = avg_gain / avg_loss
                rsi = 100 - (100 / (1 + rs))

            rsi_values[i + 1] = rsi  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ deltas –∫–æ—Ä–æ—á–µ –Ω–∞ 1

        return rsi_values, avg_gain, avg_loss

    def process_batch(self, timeframe: str, periods: List[int],
                     start_date: datetime, end_date: datetime,
                     initial_states: Dict[int, Dict]) -> Dict[int, Dict]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç RSI –≤ –ë–î

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ RSI
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –±–∞—Ç—á–∞
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –±–∞—Ç—á–∞
            initial_states: –ù–∞—á–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞

        Returns:
            –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞
        """
        table_name = f'indicators_bybit_futures_{timeframe}'

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é —Ü–µ–Ω—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            price_column = 'close' if timeframe == '1m' else 'open'

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            # –î–ª—è 1m –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É candles, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –∏–∑ 1m –¥–∞–Ω–Ω—ã—Ö
            if timeframe == '1m':
                cur.execute(f"""
                    SELECT timestamp, close
                    FROM candles_bybit_futures_1m
                    WHERE symbol = %s
                    AND timestamp > %s
                    AND timestamp <= %s
                    ORDER BY timestamp
                """, (self.symbol, start_date, end_date))
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –∏–∑ 1m –¥–∞–Ω–Ω—ã—Ö
                interval_minutes = self.timeframe_minutes[timeframe]
                cur.execute(f"""
                    SELECT
                        date_trunc('hour', timestamp) +
                        INTERVAL '{interval_minutes} minutes' * (EXTRACT(MINUTE FROM timestamp)::INTEGER / {interval_minutes}) as period_start,
                        (array_agg(open ORDER BY timestamp))[1] as open_price
                    FROM candles_bybit_futures_1m
                    WHERE symbol = %s
                    AND timestamp > %s
                    AND timestamp <= %s
                    GROUP BY period_start
                    ORDER BY period_start
                """, (self.symbol, start_date, end_date))

            data = cur.fetchall()
            if not data:
                return initial_states

            timestamps = [row[0] for row in data]
            closes = np.array([float(row[1]) for row in data])

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            rsi_results = {}
            final_states = {}

            for period in periods:
                initial_state = initial_states.get(period, {})
                initial_avg_gain = initial_state.get('avg_gain')
                initial_avg_loss = initial_state.get('avg_loss')

                # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –Ω—É–∂–µ–Ω –±—É—Ñ–µ—Ä –¥–∞–Ω–Ω—ã—Ö
                if initial_avg_gain is None:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                    buffer_start = start_date - timedelta(minutes=period * self.timeframe_minutes.get(timeframe, 1) * 2)

                    if timeframe == '1m':
                        cur.execute(f"""
                            SELECT close
                            FROM candles_bybit_futures_1m
                            WHERE symbol = %s
                            AND timestamp > %s
                            AND timestamp <= %s
                            ORDER BY timestamp
                        """, (self.symbol, buffer_start, start_date))
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –∏–∑ 1m –¥–∞–Ω–Ω—ã—Ö
                        interval_minutes = self.timeframe_minutes[timeframe]
                        cur.execute(f"""
                            SELECT
                                (array_agg(open ORDER BY timestamp))[1] as open_price
                            FROM (
                                SELECT
                                    date_trunc('hour', timestamp) +
                                    INTERVAL '{interval_minutes} minutes' * (EXTRACT(MINUTE FROM timestamp)::INTEGER / {interval_minutes}) as period_start,
                                    timestamp,
                                    open
                                FROM candles_bybit_futures_1m
                                WHERE symbol = %s
                                AND timestamp > %s
                                AND timestamp <= %s
                            ) t
                            GROUP BY period_start
                            ORDER BY period_start
                        """, (self.symbol, buffer_start, start_date))

                    buffer_data = [float(row[0]) for row in cur.fetchall()]
                    if len(buffer_data) >= period:
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –±—É—Ñ–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏
                        all_closes = np.concatenate([buffer_data, closes])
                        rsi_values, avg_gain, avg_loss = self.calculate_rsi_batch(
                            all_closes, period
                        )
                        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞—Ç—á–∞
                        rsi_results[period] = rsi_values[len(buffer_data):]
                    else:
                        # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                        logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RSI_{period}")
                        rsi_results[period] = np.full(len(closes), np.nan)
                        avg_gain, avg_loss = None, None
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    rsi_values, avg_gain, avg_loss = self.calculate_rsi_batch(
                        closes, period, initial_avg_gain, initial_avg_loss
                    )
                    rsi_results[period] = rsi_values

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                final_states[period] = {
                    'avg_gain': avg_gain,
                    'avg_loss': avg_loss
                }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –±–∞—Ç—á–µ–≤—ã–º UPDATE
            for i, timestamp in enumerate(timestamps):
                set_clause_parts = []
                params = []

                for period in periods:
                    rsi_value = rsi_results[period][i]
                    if not np.isnan(rsi_value):
                        set_clause_parts.append(f"rsi_{period} = %s")
                        params.append(float(rsi_value))

                if set_clause_parts:
                    set_clause = ', '.join(set_clause_parts)
                    params.extend([timestamp, self.symbol])

                    cur.execute(f"""
                        UPDATE {table_name}
                        SET {set_clause}
                        WHERE timestamp = %s AND symbol = %s
                    """, params)

            conn.commit()

        return final_states

    def process_timeframe(self, timeframe: str, batch_days: int = 7,
                         start_date: Optional[datetime] = None):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç RSI –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —Å –±–∞—Ç—á–µ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            batch_days: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (–µ—Å–ª–∏ None, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å checkpoint)
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        periods = self.config.get('indicators', {}).get('rsi', {}).get('periods', [14])
        batch_days = self.config.get('indicators', {}).get('rsi', {}).get('batch_days', batch_days)

        logger.info(f"\n{'='*60}")
        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ RSI –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {timeframe}")
        logger.info(f"üìà –ü–µ—Ä–∏–æ–¥—ã RSI: {periods}")
        logger.info(f"üéØ –°–∏–º–≤–æ–ª: {self.symbol}")
        logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_days} –¥–Ω–µ–π")
        logger.info(f"{'='*60}")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not self.create_rsi_columns(timeframe, periods):
            return

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
            checkpoints = {}
            latest_checkpoint = None

            logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (checkpoint):")
            for period in periods:
                last_timestamp, state = self.get_last_rsi_checkpoint(timeframe, period)
                checkpoints[period] = {
                    'last_timestamp': last_timestamp,
                    'state': state
                }

                if last_timestamp:
                    logger.info(f"  ‚úÖ RSI_{period}: –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å {last_timestamp}")
                    if not latest_checkpoint or last_timestamp > latest_checkpoint:
                        latest_checkpoint = last_timestamp
                else:
                    logger.info(f"  üìù RSI_{period}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö (–±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω —Å –Ω–∞—á–∞–ª–∞)")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É
            if start_date:
                current_date = start_date
            elif latest_checkpoint:
                current_date = latest_checkpoint
            else:
                # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ - –≤—Å–µ–≥–¥–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 1m —Å–≤–µ—á–µ–π
                cur.execute(f"""
                    SELECT MIN(timestamp)
                    FROM candles_bybit_futures_1m
                    WHERE symbol = %s
                """, (self.symbol,))
                result = cur.fetchone()
                if result and result[0]:
                    current_date = result[0]
                else:
                    logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    return

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É - –≤—Å–µ–≥–¥–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 1m —Å–≤–µ—á–µ–π
            cur.execute(f"""
                SELECT MAX(timestamp)
                FROM candles_bybit_futures_1m
                WHERE symbol = %s
            """, (self.symbol,))
            max_date = cur.fetchone()[0]

            if not max_date or current_date >= max_date:
                logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
                return

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
            initial_states = {}
            for period, checkpoint in checkpoints.items():
                initial_states[period] = checkpoint.get('state', {})

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∏
            total_days = (max_date - current_date).days
            total_batches = (total_days + batch_days - 1) // batch_days

            logger.info(f"\nüìä –ü–ª–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏:")
            logger.info(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {total_days} –¥–Ω–µ–π ({current_date.strftime('%Y-%m-%d')} ‚Üí {max_date.strftime('%Y-%m-%d')})")
            logger.info(f"   ‚Ä¢ –ë–∞—Ç—á–µ–π: {total_batches}")
            logger.info(f"   ‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
            logger.info(f"   ‚Ä¢ RSI –ø–µ—Ä–∏–æ–¥—ã: {periods}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏
            logger.info(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            current_states = initial_states.copy()

            with tqdm(total=total_batches, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–µ–π") as pbar:
                batch_num = 0

                while current_date < max_date:
                    batch_end = min(current_date + timedelta(days=batch_days), max_date)

                    try:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
                        current_states = self.process_batch(
                            timeframe, periods,
                            current_date, batch_end,
                            current_states
                        )

                        batch_num += 1
                        pbar.set_description(
                            f"–ë–∞—Ç—á {batch_num}/{total_batches} "
                            f"(–¥–æ {batch_end.strftime('%Y-%m-%d %H:%M')})"
                        )
                        pbar.update(1)

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞—Ç—á–∞: {e}")
                        import traceback
                        traceback.print_exc()
                        break

                    current_date = batch_end

            logger.info(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ RSI –¥–ª—è {timeframe} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    def run(self, timeframes: List[str] = None, batch_days: int = 7,
            start_date: Optional[datetime] = None):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É RSI –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤

        Args:
            timeframes: –°–ø–∏—Å–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
            batch_days: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
        """
        if not timeframes:
            timeframes = self.config.get('timeframes', ['1m'])

        logger.info(f"\n{'='*60}")
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ RSI Loader")
        logger.info(f"üìä –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {timeframes}")
        logger.info(f"üéØ –°–∏–º–≤–æ–ª: {self.symbol}")
        logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_days} –¥–Ω–µ–π")
        if start_date:
            logger.info(f"üìÖ –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {start_date}")
        else:
            logger.info(f"‚ôªÔ∏è –†–µ–∂–∏–º: –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ checkpoint")
        logger.info(f"{'='*60}")

        for timeframe in timeframes:
            if timeframe not in self.timeframe_minutes:
                logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
                continue

            self.process_timeframe(timeframe, batch_days, start_date)

        logger.info(f"\n{'='*60}")
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"{'='*60}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='RSI Indicator Loader - –∑–∞–≥—Ä—É–∑—á–∏–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ RSI',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python rsi_loader.py                          # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∏–∑ indicators_config.yaml
  python rsi_loader.py --timeframe 1m           # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ 1m —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
  python rsi_loader.py --timeframes 1m,15m,1h   # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
  python rsi_loader.py --batch-days 7           # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞—Ç—á–∏ –ø–æ 7 –¥–Ω–µ–π
  python rsi_loader.py --start-date 2024-01-01  # –ù–∞—á–∞—Ç—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
  python rsi_loader.py --symbol ETHUSDT         # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        """
    )

    parser.add_argument('--symbol', type=str, default='BTCUSDT',
                       help='–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: BTCUSDT)')
    parser.add_argument('--timeframe', type=str,
                       help='–û–¥–∏–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--timeframes', type=str,
                       help='–ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1m,15m,1h)')
    parser.add_argument('--batch-days', type=int, default=7,
                       help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 7)')
    parser.add_argument('--start-date', type=str,
                       help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å checkpoint)')

    args = parser.parse_args()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
    timeframes = None
    if args.timeframe:
        timeframes = [args.timeframe]
    elif args.timeframes:
        timeframes = args.timeframes.split(',')

    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    start_date = None
    if args.start_date:
        try:
            start_date = datetime.strptime(args.start_date, '%Y-%m-%d')
        except ValueError:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {args.start_date}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
            sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    try:
        loader = RSILoader(symbol=args.symbol)
        loader.run(timeframes, args.batch_days, start_date)
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ —Å —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞.")
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()