#!/usr/bin/env python3
"""
SMA (Simple Moving Average) Indicator Loader
=============================================
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ SMA –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
- –ü–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
- –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import psycopg2
import psycopg2.extras
from typing import Dict, List, Tuple, Optional
import logging
from tqdm import tqdm
import sys
import os

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from indicators.database import DatabaseConnection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class SMALoader:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ SMA –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""

    def __init__(self, symbol: str = 'BTCUSDT', batch_days: int = 30):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTCUSDT, ETHUSDT –∏ —Ç.–¥.)
            batch_days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –æ–¥–∏–Ω –±–∞—Ç—á
        """
        self.db = DatabaseConnection()
        self.symbol = symbol
        self.batch_days = batch_days
        self.source_table = 'candles_bybit_futures_1m'
        self.target_table = 'indicators_bybit_futures_1m'

    def check_and_create_columns(self, sma_periods: List[int]) -> Tuple[set, List[int]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ SMA –∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ

        Args:
            sma_periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ SMA –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏/—Å–æ–∑–¥–∞–Ω–∏—è

        Returns:
            Tuple (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã, –Ω–æ–≤—ã–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã)
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
        query = """
            SELECT column_name
            FROM information_schema.columns
            WHERE table_name = 'indicators_bybit_futures_1m'
            AND column_name LIKE 'sma_%';
        """

        existing_columns = self.db.execute_query(query)
        existing_sma = set()

        if existing_columns:
            for row in existing_columns:
                col_name = row['column_name']
                try:
                    period = int(col_name.split('_')[1])
                    existing_sma.add(period)
                except (IndexError, ValueError):
                    continue

        logger.info(f"üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ SMA –ø–µ—Ä–∏–æ–¥—ã: {sorted(existing_sma)}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
        columns_to_create = []
        for period in sma_periods:
            if period not in existing_sma:
                columns_to_create.append(period)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        if columns_to_create:
            logger.info(f"üî® –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤: {columns_to_create}")

            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    for period in columns_to_create:
                        try:
                            alter_query = f"""
                                ALTER TABLE {self.target_table}
                                ADD COLUMN IF NOT EXISTS sma_{period} DECIMAL(20,8);
                            """
                            cur.execute(alter_query)
                            conn.commit()
                            logger.info(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ sma_{period}")
                        except Exception as e:
                            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ sma_{period}: {e}")
                            conn.rollback()
        else:
            logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")

        return existing_sma, columns_to_create

    def get_date_range(self) -> Tuple[Optional[datetime], Optional[datetime]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å–≤–µ—á–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞

        Returns:
            Tuple (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞)
        """
        query = f"""
            SELECT MIN(timestamp) as min_ts, MAX(timestamp) as max_ts
            FROM {self.source_table}
            WHERE symbol = %s;
        """
        result = self.db.execute_query(query, (self.symbol,))
        if result and result[0]['min_ts']:
            return result[0]['min_ts'], result[0]['max_ts']
        return None, None

    def get_last_indicator_timestamp(self, sma_periods: List[int]) -> Optional[datetime]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π timestamp —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤

        Args:
            sma_periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            –ü–æ—Å–ª–µ–¥–Ω–∏–π timestamp –∏–ª–∏ None
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        conditions = []
        for period in sma_periods:
            conditions.append(f"sma_{period} IS NOT NULL")

        if not conditions:
            return None

        where_clause = " OR ".join(conditions)

        query = f"""
            SELECT MAX(timestamp) as last_ts
            FROM {self.target_table}
            WHERE symbol = %s
            AND ({where_clause});
        """

        result = self.db.execute_query(query, (self.symbol,))
        return result[0]['last_ts'] if result and result[0]['last_ts'] else None

    def calculate_sma_batch(self, df: pd.DataFrame, sma_periods: List[int]) -> pd.DataFrame:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å SMA –¥–ª—è –±–∞—Ç—á–∞ –¥–∞–Ω–Ω—ã—Ö

        Args:
            df: DataFrame —Å–æ —Å–≤–µ—á–∞–º–∏ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É 'close')
            sma_periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ SMA –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞

        Returns:
            DataFrame —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ SMA
        """
        result_df = pd.DataFrame(index=df.index)
        result_df['symbol'] = self.symbol

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SMA –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        for period in sma_periods:
            col_name = f'sma_{period}'
            result_df[col_name] = df['close'].rolling(
                window=period,
                min_periods=period
            ).mean().round(8)

        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –≤—Å–µ SMA = NaN
        sma_columns = [f'sma_{p}' for p in sma_periods]
        result_df = result_df.dropna(subset=sma_columns, how='all')

        return result_df

    def save_to_database(self, df: pd.DataFrame, sma_periods: List[int]):
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ –ë–î

        Args:
            df: DataFrame —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
            sma_periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ SMA –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        if df.empty:
            return 0

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        records = []
        sma_columns = [f'sma_{p}' for p in sma_periods]

        for timestamp, row in df.iterrows():
            record = [timestamp, row['symbol']]
            for col in sma_columns:
                record.append(row.get(col, None))
            records.append(tuple(record))

        # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å
        columns = ['timestamp', 'symbol'] + sma_columns
        placeholders = ['%s'] * len(columns)

        insert_query = f"""
            INSERT INTO {self.target_table} ({', '.join(columns)})
            VALUES ({', '.join(placeholders)})
            ON CONFLICT (timestamp, symbol)
            DO UPDATE SET
        """

        # –î–æ–±–∞–≤–ª—è–µ–º UPDATE —á–∞—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π SMA –∫–æ–ª–æ–Ω–∫–∏
        update_parts = []
        for col in sma_columns:
            update_parts.append(f"{col} = COALESCE(EXCLUDED.{col}, {self.target_table}.{col})")

        insert_query += ', '.join(update_parts) + ';'

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ç—á–∞–º–∏
        batch_size = 1000
        total_saved = 0

        for i in range(0, len(records), batch_size):
            batch = records[i:i + batch_size]
            rows_affected = self.db.execute_many(insert_query, batch)
            total_saved += len(batch)

        return total_saved

    def process_date_range(self, start_date: datetime, end_date: datetime,
                          sma_periods: List[int], show_progress: bool = True):
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç

        Args:
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
            sma_periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ SMA
            show_progress: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        """
        current_date = start_date
        total_records = 0

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è lookback
        max_period = max(sma_periods)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if show_progress:
            total_days = (end_date - start_date).days
            pbar = tqdm(total=total_days, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞", unit="–¥–µ–Ω—å")

        while current_date < end_date:
            batch_end = min(current_date + timedelta(days=self.batch_days), end_date)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ—á–∏ —Å –∑–∞–ø–∞—Å–æ–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ SMA
            lookback_start = current_date - timedelta(minutes=max_period)

            query = f"""
                SELECT timestamp, close
                FROM {self.source_table}
                WHERE symbol = %s
                AND timestamp >= %s
                AND timestamp < %s
                ORDER BY timestamp;
            """

            with self.db.get_connection() as conn:
                df = pd.read_sql_query(query, conn,
                                      params=(self.symbol, lookback_start, batch_end))

            if not df.empty:
                df.set_index('timestamp', inplace=True)

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SMA
                sma_df = self.calculate_sma_batch(df, sma_periods)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞ (–±–µ–∑ lookback)
                sma_df = sma_df[sma_df.index >= current_date]

                if not sma_df.empty:
                    saved = self.save_to_database(sma_df, sma_periods)
                    total_records += saved
                    logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {current_date.date()} - {batch_end.date()}: "
                              f"{saved:,} –∑–∞–ø–∏—Å–µ–π")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if show_progress:
                days_processed = (batch_end - current_date).days
                pbar.update(days_processed)

            current_date = batch_end

        if show_progress:
            pbar.close()

        logger.info(f"‚úÖ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_records:,} –∑–∞–ø–∏—Å–µ–π")

    def run(self, sma_periods: List[int] = None):
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞

        Args:
            sma_periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ SMA (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é [10, 20, 50, 100, 200])
        """
        if sma_periods is None:
            sma_periods = [10, 20, 50, 100, 200]

        logger.info("=" * 60)
        logger.info(f"üöÄ SMA LOADER –¥–ª—è {self.symbol}")
        logger.info(f"üìä –ü–µ—Ä–∏–æ–¥—ã: {sma_periods}")
        logger.info("=" * 60)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        if not self.db.check_table_exists(self.target_table):
            logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {self.target_table} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            logger.error("–°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–º–æ—â—å—é SQL –∫–æ–º–∞–Ω–¥—ã")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —Å–≤–µ—á–µ–π
        min_date, max_date = self.get_date_range()
        if not min_date:
            logger.error(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {self.symbol} –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–≤–µ—á–µ–π")
            return

        logger.info(f"üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {min_date} - {max_date}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        existing_sma, new_columns = self.check_and_create_columns(sma_periods)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å –∫–∞–∫–æ–π –¥–∞—Ç—ã –Ω–∞—á–∏–Ω–∞—Ç—å
        last_timestamp = self.get_last_indicator_timestamp(sma_periods)

        if last_timestamp:
            logger.info(f"üìà –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–æ {last_timestamp}")
            start_date = last_timestamp + timedelta(minutes=1)

            if start_date >= max_date:
                logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã!")
                return

            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å {start_date}")
        else:
            logger.info("üìä –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –Ω–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É")
            start_date = min_date

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.process_date_range(start_date, max_date, sma_periods)

        logger.info("\n" + "=" * 60)
        logger.info("‚úÖ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        logger.info("=" * 60)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    import argparse

    parser = argparse.ArgumentParser(description='SMA Indicator Loader')
    parser.add_argument('--symbol', type=str, default='BTCUSDT',
                       help='–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é BTCUSDT)')
    parser.add_argument('--periods', type=str, default='10,20,50,100,200',
                       help='–ü–µ—Ä–∏–æ–¥—ã SMA —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
    parser.add_argument('--batch-days', type=int, default=30,
                       help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)')

    args = parser.parse_args()

    # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–∏–æ–¥—ã
    sma_periods = [int(p.strip()) for p in args.periods.split(',')]

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
    loader = SMALoader(symbol=args.symbol, batch_days=args.batch_days)
    loader.run(sma_periods)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise