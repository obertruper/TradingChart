#!/usr/bin/env python3
"""
Universal SMA Loader with Multi-Timeframe Support
==================================================
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ SMA –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
- –õ—é–±—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ (1m, 5m, 15m, 30m, 1h, 4h, 1d –∏ —Ç.–¥.)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∏–∑ 1m –¥–∞–Ω–Ω—ã—Ö
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
- –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import psycopg2
import psycopg2.extras
from typing import Dict, List, Tuple, Optional, Any
import logging
from tqdm import tqdm
import sys
import os
import warnings
import yaml
import argparse
import time

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ pandas –æ psycopg2
warnings.filterwarnings('ignore', message='pandas only supports SQLAlchemy')

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from indicators.database import DatabaseConnection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª"""
    log_dir = os.path.join(os.path.dirname(__file__), 'logs')
    os.makedirs(log_dir, exist_ok=True)

    log_filename = os.path.join(log_dir, f'sma_multi_tf_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')

    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler(log_filename, encoding='utf-8')
        ]
    )

    logger = logging.getLogger(__name__)
    logger.info(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –õ–æ–≥-—Ñ–∞–π–ª: {log_filename}")

    return logger

logger = setup_logging()


class SMALoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ SMA –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""

    def __init__(self, symbol: str = 'BTCUSDT'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        """
        self.db = DatabaseConnection()
        self.symbol = symbol
        self.config = self.load_config()
        self.symbol_progress = ""  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ main() –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∞–ø–∏–Ω–≥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –Ω–∞ –º–∏–Ω—É—Ç—ã (–ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞)
        self.timeframe_minutes = self._parse_timeframes()

    def _parse_timeframes(self) -> dict:
        """
        –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–∞—Ä—Å–∏—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: 1m, 5m, 15m, 30m, 1h, 4h, 1d, 1w

        Returns:
            dict: –ú–∞–ø–∏–Ω–≥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
        """
        timeframe_map = {}

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
        timeframes = self.config.get('timeframes', ['1m', '15m', '1h'])

        for tf in timeframes:
            # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ –∏ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
            import re
            match = re.match(r'^(\d+)([mhdw])$', tf.lower())
            if match:
                number = int(match.group(1))
                unit = match.group(2)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã
                if unit == 'm':
                    minutes = number
                elif unit == 'h':
                    minutes = number * 60
                elif unit == 'd':
                    minutes = number * 1440
                elif unit == 'w':
                    minutes = number * 10080  # 7 * 24 * 60
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {tf}")
                    continue

                timeframe_map[tf] = minutes
                logger.debug(f"üìä –¢–∞–π–º—Ñ—Ä–µ–π–º {tf} = {minutes} –º–∏–Ω—É—Ç")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {tf} (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ 1m, 5m, 1h, 1d)")

        if not timeframe_map:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã, –∏—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ")
            timeframe_map = {'1m': 1, '15m': 15, '1h': 60}

        return timeframe_map

    def load_config(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ indicators_config.yaml"""
        config_path = os.path.join(os.path.dirname(__file__), 'indicators_config.yaml')
        if os.path.exists(config_path):
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = yaml.safe_load(f)
                    logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
                    return config
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å indicators_config.yaml: {e}")
                raise
        else:
            logger.error("‚ùå indicators_config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise FileNotFoundError("indicators_config.yaml not found")

    def create_indicators_table(self, timeframe: str) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º (1m, 15m, 1h)

        Returns:
            True –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        table_name = f'indicators_bybit_futures_{timeframe}'

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                cur.execute("""
                    SELECT EXISTS (
                        SELECT 1 FROM information_schema.tables
                        WHERE table_schema = 'public'
                        AND table_name = %s
                    );
                """, (table_name,))

                exists = cur.fetchone()[0]

                if not exists:
                    logger.info(f"üî® –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É {table_name}")

                    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                    create_query = f"""
                    CREATE TABLE {table_name} (
                        timestamp TIMESTAMPTZ NOT NULL,
                        symbol VARCHAR(20) NOT NULL,
                        -- SMA –∫–æ–ª–æ–Ω–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                        PRIMARY KEY (timestamp, symbol)
                    );

                    -- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
                    CREATE INDEX idx_{timeframe}_symbol_timestamp
                    ON {table_name} (symbol, timestamp);

                    CREATE INDEX idx_{timeframe}_timestamp
                    ON {table_name} (timestamp);
                    """

                    cur.execute(create_query)
                    conn.commit()
                    logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —Å–æ–∑–¥–∞–Ω–∞")
                else:
                    logger.info(f"‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

                return True

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
                conn.rollback()
                return False
            finally:
                cur.close()

    def create_sma_columns(self, timeframe: str, periods: List[int]):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è SMA –ø–µ—Ä–∏–æ–¥–æ–≤

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ SMA
        """
        table_name = f'indicators_bybit_futures_{timeframe}'

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            try:
                for period in periods:
                    column_name = f'sma_{period}'

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
                    cur.execute("""
                        SELECT EXISTS (
                            SELECT 1 FROM information_schema.columns
                            WHERE table_schema = 'public'
                            AND table_name = %s
                            AND column_name = %s
                        );
                    """, (table_name, column_name))

                    exists = cur.fetchone()[0]

                    if not exists:
                        logger.info(f"  üìä –°–æ–∑–¥–∞—é –∫–æ–ª–æ–Ω–∫—É {column_name} –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
                        cur.execute(f"""
                            ALTER TABLE {table_name}
                            ADD COLUMN {column_name} DECIMAL(20,8);
                        """)

                conn.commit()
                logger.info(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∏ SMA —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è {table_name}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫: {e}")
                conn.rollback()
            finally:
                cur.close()

    def aggregate_candles(self, start_date: datetime, end_date: datetime,
                         timeframe: str) -> pd.DataFrame:
        """
        –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç 1m —Å–≤–µ—á–∏ –≤ –Ω—É–∂–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º

        Args:
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
            timeframe: –¶–µ–ª–µ–≤–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º

        Returns:
            DataFrame —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–≤–µ—á–∞–º–∏
        """
        minutes = self.timeframe_minutes[timeframe]

        with self.db.get_connection() as conn:
            # –î–ª—è 1m –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if timeframe == '1m':
                query = """
                    SELECT timestamp, symbol, close
                    FROM candles_bybit_futures_1m
                    WHERE symbol = %s AND timestamp >= %s AND timestamp < %s
                    ORDER BY timestamp
                """
                df = pd.read_sql_query(query, conn, params=(self.symbol, start_date, end_date))
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º
                query = f"""
                    WITH time_groups AS (
                        SELECT
                            date_trunc('hour', timestamp) +
                            INTERVAL '{minutes} minutes' * (EXTRACT(MINUTE FROM timestamp)::integer / {minutes}) as period_start,
                            close,
                            symbol,
                            timestamp as original_timestamp
                        FROM candles_bybit_futures_1m
                        WHERE symbol = %s AND timestamp >= %s AND timestamp < %s
                    ),
                    last_in_period AS (
                        SELECT DISTINCT ON (period_start, symbol)
                            period_start + INTERVAL '{minutes} minutes' as timestamp,
                            symbol,
                            close
                        FROM time_groups
                        ORDER BY period_start, symbol, original_timestamp DESC
                    )
                    SELECT * FROM last_in_period
                    ORDER BY timestamp
                """
                df = pd.read_sql_query(query, conn, params=(self.symbol, start_date, end_date))

            if df.empty:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {self.symbol} –≤ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}")
                return pd.DataFrame()

            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ timestamp - —ç—Ç–æ datetime
            df['timestamp'] = pd.to_datetime(df['timestamp'])

            return df

    def calculate_and_save_sma(self, timeframe: str, periods: List[int],
                               batch_days: int = 30):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç SMA –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ SMA
            batch_days: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö
        """
        table_name = f'indicators_bybit_futures_{timeframe}'

        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        with self.db.get_connection() as conn:
            cur = conn.cursor()

            try:
                # –ù–∞—Ö–æ–¥–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ 1m –¥–∞–Ω–Ω—ã—Ö
                cur.execute("""
                    SELECT MIN(timestamp), MAX(timestamp)
                    FROM candles_bybit_futures_1m
                    WHERE symbol = %s
                """, (self.symbol,))

                result = cur.fetchone()
                if not result or result[0] is None:
                    logger.error(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {self.symbol}")
                    return

                min_date, max_date = result
                logger.info(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö: {min_date} - {max_date}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –¥–∞—Ç—É –¥–ª—è –ö–ê–ñ–î–û–ì–û –ø–µ—Ä–∏–æ–¥–∞ SMA (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)
                logger.info(f"\nüìä –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è SMA –ø–µ—Ä–∏–æ–¥–æ–≤:")

                # –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö SMA –ø–µ—Ä–∏–æ–¥–æ–≤
                sma_columns = [f'sma_{p}' for p in periods]
                sma_max_queries = ', '.join([f'MAX({col}) as max_{col}' for col in sma_columns])

                cur.execute(f"""
                    SELECT {sma_max_queries}
                    FROM (
                        SELECT timestamp, {', '.join(sma_columns)}
                        FROM {table_name}
                        WHERE symbol = %s
                        ORDER BY timestamp DESC
                        LIMIT 1000
                    ) t
                """, (self.symbol,))

                result_row = cur.fetchone()

                sma_status = {}
                earliest_date = max_date  # –ù–∞—á–∏–Ω–∞–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã

                # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–µ—Ä–∏–æ–¥
                for idx, period in enumerate(tqdm(periods, desc="   –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–∏–æ–¥–æ–≤ SMA", unit="–ø–µ—Ä–∏–æ–¥",
                                                  leave=False, bar_format='{desc}: {n}/{total} [{elapsed}]')):
                    column_name = f'sma_{period}'

                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ SMA
                    cur.execute(f"""
                        SELECT MAX(timestamp)
                        FROM {table_name}
                        WHERE symbol = %s AND {column_name} IS NOT NULL
                    """, (self.symbol,))

                    last_sma_date = cur.fetchone()[0]

                    if last_sma_date:
                        gap_days = (max_date - last_sma_date).days
                        gap_hours = (max_date - last_sma_date).total_seconds() / 3600

                        if gap_hours < 24:
                            logger.info(f"   ‚Ä¢ SMA_{period}: –∞–∫—Ç—É–∞–ª–µ–Ω (–æ—Ç—Å—Ç–∞–µ—Ç –Ω–∞ {gap_hours:.1f} —á–∞—Å–æ–≤)")
                        else:
                            logger.info(f"   ‚Ä¢ SMA_{period}: –ø–æ—Å–ª–µ–¥–Ω—è—è {last_sma_date.strftime('%Y-%m-%d %H:%M')} (–æ—Ç—Å—Ç–∞–µ—Ç –Ω–∞ {gap_days} –¥–Ω–µ–π)")

                        sma_status[period] = last_sma_date

                        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É –∏–∑ –≤—Å–µ—Ö SMA
                        if last_sma_date < earliest_date:
                            earliest_date = last_sma_date
                    else:
                        # –≠—Ç–æ—Ç SMA —Å–æ–≤—Å–µ–º –ø—É—Å—Ç–æ–π
                        min_start = min_date + timedelta(minutes=period * self.timeframe_minutes[timeframe])
                        sma_status[period] = None
                        logger.info(f"   ‚Ä¢ SMA_{period}: –ü–£–°–¢–û (–Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)")

                        if min_start < earliest_date:
                            earliest_date = min_start

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                if earliest_date < max_date:
                    start_date = earliest_date
                    logger.info(f"\nüìç –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Å {start_date} (—Å–∞–º—ã–π –æ—Ç—Å—Ç–∞—é—â–∏–π –ø–µ—Ä–∏–æ–¥)")
                else:
                    start_date = max_date
                    logger.info(f"\n‚úÖ –í—Å–µ SMA –∞–∫—Ç—É–∞–ª—å–Ω—ã!")

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                # –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –¥–Ω–∏, –Ω–æ –∏ —á–∞—Å—ã/–º–∏–Ω—É—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
                total_time_diff = max_date - start_date
                total_days = total_time_diff.days
                total_hours = total_time_diff.total_seconds() / 3600

                # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –±–∞—Ç—á–µ–π
                if total_days == 0:
                    # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ –¥–Ω—è, –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç 1 –±–∞—Ç—á
                    total_batches = 1
                else:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π
                    total_batches = (total_days + batch_days - 1) // batch_days  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
                logger.info(f"\nüìä –ü–ª–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏:")

                if total_hours < 1:
                    logger.info(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: –º–µ–Ω–µ–µ —á–∞—Å–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∏–Ω—É—Ç—ã)")
                elif total_hours < 24:
                    logger.info(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {total_hours:.1f} —á–∞—Å–æ–≤ ({start_date.strftime('%H:%M')} ‚Üí {max_date.strftime('%H:%M')})")
                else:
                    logger.info(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {total_days} –¥–Ω–µ–π ({start_date.strftime('%Y-%m-%d')} ‚Üí {max_date.strftime('%Y-%m-%d')})")

                logger.info(f"   ‚Ä¢ –ë–∞—Ç—á–µ–π: {total_batches} –ø–æ {batch_days} –¥–Ω–µ–π")
                logger.info(f"   ‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
                logger.info(f"   ‚Ä¢ SMA –ø–µ—Ä–∏–æ–¥—ã: {periods}")

                # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                if timeframe == '1m':
                    est_records = int(total_hours * 60) if total_days == 0 else total_days * 1440
                else:
                    minutes = self.timeframe_minutes[timeframe]
                    if total_days == 0:
                        est_records = int((total_hours * 60) / minutes)
                    else:
                        est_records = (total_days * 1440) // minutes

                if est_records > 0:
                    logger.info(f"   ‚Ä¢ –û–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–ø–∏—Å–µ–π: ~{est_records:,}")
                    if total_batches <= 1:
                        logger.info(f"   ‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: –º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã")
                    else:
                        logger.info(f"   ‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ~{(total_batches * 1.5)/60:.1f} –º–∏–Ω—É—Ç")
                else:
                    logger.info(f"   ‚Ä¢ –î–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–∫—Ç—É–∞–ª—å–Ω—ã!")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞–º–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
                current_date = start_date
                total_records = 0
                processed_batches = 0

                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞—Ç—á–µ–π
                sma_list = ','.join([str(p) for p in periods])
                progress_desc = f"{self.symbol} {self.symbol_progress} SMA[{sma_list}] {timeframe.upper()}" if self.symbol_progress else f"{self.symbol} SMA[{sma_list}] {timeframe.upper()}"
                with tqdm(total=total_batches,
                         desc=f"üìä {progress_desc}",
                         unit="batch",
                         bar_format='{desc}: {percentage:3.0f}%|{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]') as pbar:

                    while current_date <= max_date:
                        batch_end = min(current_date + timedelta(days=batch_days), max_date)

                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–ø–∞—Å–æ–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ SMA
                        max_period = max(periods)
                        lookback = timedelta(minutes=max_period * self.timeframe_minutes[timeframe])
                        data_start = current_date - lookback

                        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Å–≤–µ—á–∏
                        df = self.aggregate_candles(data_start, batch_end, timeframe)

                        if df.empty:
                            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞—Ç—á–∞ {current_date} - {batch_end}")
                            current_date = batch_end
                            pbar.update(1)
                            continue

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SMA
                        for period in periods:
                            df[f'sma_{period}'] = df['close'].rolling(window=period, min_periods=period).mean()

                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (—É–±–∏—Ä–∞–µ–º lookback –¥–∞–Ω–Ω—ã–µ)
                        df_to_save = df[df['timestamp'] >= current_date].copy()

                        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –≤—Å–µ SMA = NaN
                        sma_columns = [f'sma_{p}' for p in periods]
                        df_to_save = df_to_save.dropna(subset=sma_columns, how='all')

                        if not df_to_save.empty:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                            self.save_to_db(df_to_save, table_name, periods)
                            total_records += len(df_to_save)

                        processed_batches += 1
                        pbar.update(1)

                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        if not df_to_save.empty:
                            progress_pct = (processed_batches / total_batches) * 100
                            pbar.set_postfix({
                                '–∑–∞–ø–∏—Å–µ–π': f'{total_records:,}',
                                '–ø–æ—Å–ª–µ–¥–Ω—è—è': df_to_save['timestamp'].max().strftime('%Y-%m-%d %H:%M'),
                                '–ø—Ä–æ–≥—Ä–µ—Å—Å': f'{progress_pct:.1f}%'
                            })

                        current_date = batch_end

                        # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        if current_date >= max_date:
                            break

                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_records} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {timeframe}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ SMA: {e}")
                raise
            finally:
                cur.close()

    def save_to_db(self, df: pd.DataFrame, table_name: str, periods: List[int]):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î

        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
            table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
            periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ SMA
        """
        with self.db.get_connection() as conn:
            cur = conn.cursor()

            try:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                sma_columns = [f'sma_{p}' for p in periods]
                columns = ['timestamp', 'symbol'] + sma_columns

                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                records = []
                for _, row in df.iterrows():
                    record = [row['timestamp'], self.symbol]
                    for col in sma_columns:
                        value = row[col] if pd.notna(row[col]) else None
                        record.append(value)
                    records.append(tuple(record))

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
                placeholders = ','.join(['%s'] * len(columns))
                update_set = ','.join([f"{col} = EXCLUDED.{col}" for col in sma_columns])

                insert_query = f"""
                    INSERT INTO {table_name} ({','.join(columns)})
                    VALUES ({placeholders})
                    ON CONFLICT (timestamp, symbol) DO UPDATE SET
                    {update_set};
                """

                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—Ç–∞–≤–∫—É –±–∞—Ç—á–∞–º–∏
                psycopg2.extras.execute_batch(cur, insert_query, records, page_size=1000)
                conn.commit()

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
                conn.rollback()
                raise
            finally:
                cur.close()

    def process_timeframe(self, timeframe: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        logger.info(f"\n{'='*50}")
        logger.info(f"‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {timeframe}")
        logger.info(f"{'='*50}")

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        sma_config = self.config.get('indicators', {}).get('sma', {})
        if not sma_config.get('enabled', False):
            logger.info(f"‚è≠Ô∏è SMA –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return

        periods = sma_config.get('periods', [])
        if not periods:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–∏–æ–¥—ã SMA")
            return

        logger.info(f"üìä –ü–µ—Ä–∏–æ–¥—ã SMA: {periods}")

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not self.create_indicators_table(timeframe):
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è {timeframe}")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è SMA
        self.create_sma_columns(timeframe, periods)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º SMA
        self.calculate_and_save_sma(timeframe, periods)

    def run(self, timeframes: Optional[List[str]] = None):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤

        Args:
            timeframes: –°–ø–∏—Å–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∏–ª–∏ None –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        """
        if not timeframes:
            timeframes = self.config.get('timeframes', ['1m'])

        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {timeframes}")
        logger.info(f"üìà –°–∏–º–≤–æ–ª: {self.symbol}")

        for timeframe in timeframes:
            if timeframe not in self.timeframe_minutes:
                logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
                continue

            self.process_timeframe(timeframe)

        logger.info(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    parser = argparse.ArgumentParser(description='Universal SMA Loader')
    parser.add_argument('--symbol', type=str, default=None,
                      help='–û–¥–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)')
    parser.add_argument('--symbols', type=str, default=None,
                      help='–ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT,ETHUSDT)')
    parser.add_argument('--timeframes', type=str, default=None,
                      help='–¢–∞–π–º—Ñ—Ä–µ–π–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (1m,15m,1h) –∏–ª–∏ –ø—É—Å—Ç–æ –¥–ª—è –≤—Å–µ—Ö –∏–∑ config.yaml')
    parser.add_argument('--timeframe', type=str, default=None,
                      help='–û–¥–∏–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)')
    parser.add_argument('--batch-days', type=int, default=30,
                      help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)')

    args = parser.parse_args()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if args.symbols:
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç --symbols
        symbols = [s.strip() for s in args.symbols.split(',')]
    elif args.symbol:
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç --symbol
        symbols = [args.symbol]
    else:
        # –ß–∏—Ç–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ config.yaml
        config_path = os.path.join(os.path.dirname(__file__), 'indicators_config.yaml')
        if os.path.exists(config_path):
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
                symbols = config.get('symbols', ['BTCUSDT'])
        else:
            symbols = ['BTCUSDT']

    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω --timeframe, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if args.timeframe:
        timeframes = [args.timeframe]
    elif args.timeframes:
        timeframes = [tf.strip() for tf in args.timeframes.split(',')]
    else:
        timeframes = None  # –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∏–∑ config.yaml

    logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤: {symbols}")

    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    start_time = time.time()

    # –¶–∏–∫–ª –ø–æ –≤—Å–µ–º —Å–∏–º–≤–æ–ª–∞–º
    total_symbols = len(symbols)
    for idx, symbol in enumerate(symbols, 1):
        logger.info(f"\n{'='*80}")
        logger.info(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–º–≤–æ–ª–∞: {symbol} [{idx}/{total_symbols}]")
        logger.info(f"{'='*80}\n")

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
        loader = SMALoader(symbol=symbol)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Å–∏–º–≤–æ–ª–æ–≤
        loader.symbol_progress = f"[{idx}/{total_symbols}]"

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
        if timeframes and len(timeframes) == 1:
            loader.process_timeframe(timeframes[0])
        else:
            loader.run(timeframes=timeframes)

        logger.info(f"\n‚úÖ –°–∏–º–≤–æ–ª {symbol} –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n")

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    elapsed_time = time.time() - start_time
    minutes = int(elapsed_time // 60)
    seconds = int(elapsed_time % 60)

    logger.info(f"\nüéâ –í—Å–µ —Å–∏–º–≤–æ–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {symbols}")
    logger.info(f"‚è±Ô∏è  Total time: {minutes}m {seconds}s")


if __name__ == "__main__":
    main()