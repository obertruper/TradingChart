#!/usr/bin/env python3
"""
OBV (On-Balance Volume) Loader

–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ OBV –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.

OBV - –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–º–∞, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π Joe Granville (1963).
–ü—Ä–∏–Ω—Ü–∏–ø: –æ–±—ä–µ–º –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã –∏ –≤—ã—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏.

–§–æ—Ä–º—É–ª–∞:
    If Close(t) > Close(t-1):  OBV(t) = OBV(t-1) + Volume(t)
    If Close(t) < Close(t-1):  OBV(t) = OBV(t-1) - Volume(t)
    If Close(t) = Close(t-1):  OBV(t) = OBV(t-1)
    Initial: OBV(0) = 0

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
    - –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç: —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    - –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç: –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤–µ—Å—å OBV –æ—Ç –Ω–∞—á–∞–ª–∞
    - –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å: –≤ –ë–î –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    - –ë–µ–∑ —á–µ–∫–ø–æ–π–Ω—Ç–æ–≤: –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç MAX(timestamp) –≤ –ë–î
    - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: —Ä–∞—Å—á–µ—Ç 5 –ª–µ—Ç –¥–∞–Ω–Ω—ã—Ö ~1-2 –º–∏–Ω—É—Ç—ã

Usage:
    python3 obv_loader.py                                    # –í—Å–µ —Å–∏–º–≤–æ–ª—ã, –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
    python3 obv_loader.py --symbol BTCUSDT                   # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª
    python3 obv_loader.py --symbol BTCUSDT --timeframe 1m    # –°–∏–º–≤–æ–ª + —Ç–∞–π–º—Ñ—Ä–µ–π–º
    python3 obv_loader.py --batch-days 7                     # –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
"""

import sys
import logging
import argparse
import warnings
from pathlib import Path
from datetime import datetime
import time
import yaml
import pandas as pd
import numpy as np
from tqdm import tqdm

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ pandas –æ DBAPI2 connection
warnings.filterwarnings('ignore', message='pandas only supports SQLAlchemy connectable')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from indicators.database import DatabaseConnection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class OBVLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ OBV (On-Balance Volume) –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, symbol: str, timeframe: str, config: dict):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ OBV

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º (1m, 15m, 1h)
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ indicators_config.yaml
        """
        self.symbol = symbol
        self.timeframe = timeframe
        self.timeframe_minutes = self._parse_timeframe(timeframe)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        obv_config = config['indicators']['obv']
        self.batch_days = obv_config.get('batch_days', 1)

        # –î–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ)
        self.symbol_progress = ""

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        self.db = DatabaseConnection()
        self.candles_table = "candles_bybit_futures_1m"  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º 1m —Ç–∞–±–ª–∏—Ü—É
        self.indicators_table = f"indicators_bybit_futures_{timeframe}"

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω OBVLoader –¥–ª—è {symbol} –Ω–∞ {timeframe}")
        logger.info(f"Batch size: {self.batch_days} –¥–µ–Ω—å(–¥–Ω–µ–π)")

    def _parse_timeframe(self, tf: str) -> int:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤ –º–∏–Ω—É—Ç—ã

        Args:
            tf: –¢–∞–π–º—Ñ—Ä–µ–π–º (1m, 15m, 1h, etc.)

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
        """
        if tf.endswith('m'):
            return int(tf[:-1])
        elif tf.endswith('h'):
            return int(tf[:-1]) * 60
        elif tf.endswith('d'):
            return int(tf[:-1]) * 1440
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {tf}")

    def create_indicators_table(self) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

        Returns:
            True –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                    cur.execute("""
                        SELECT EXISTS (
                            SELECT 1 FROM information_schema.tables
                            WHERE table_schema = 'public'
                            AND table_name = %s
                        );
                    """, (self.indicators_table,))

                    exists = cur.fetchone()[0]

                    if not exists:
                        logger.info(f"üî® –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É {self.indicators_table}")

                        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                        create_query = f"""
                        CREATE TABLE {self.indicators_table} (
                            timestamp TIMESTAMPTZ NOT NULL,
                            symbol VARCHAR(20) NOT NULL,
                            PRIMARY KEY (timestamp, symbol)
                        );

                        -- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
                        CREATE INDEX idx_{self.timeframe}_symbol_timestamp
                        ON {self.indicators_table} (symbol, timestamp);

                        CREATE INDEX idx_{self.timeframe}_timestamp
                        ON {self.indicators_table} (timestamp);
                        """

                        cur.execute(create_query)
                        conn.commit()
                        logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {self.indicators_table} —Å–æ–∑–¥–∞–Ω–∞")
                    else:
                        logger.info(f"‚úì –¢–∞–±–ª–∏—Ü–∞ {self.indicators_table} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

                    return True

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
                    conn.rollback()
                    return False

    def ensure_columns_exist(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ OBV –≤ —Ç–∞–±–ª–∏—Ü–µ indicators"""
        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ obv
                cur.execute("""
                    SELECT column_name
                    FROM information_schema.columns
                    WHERE table_name = %s AND column_name = 'obv'
                """, (self.indicators_table,))

                exists = cur.fetchone() is not None

                if not exists:
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ obv –≤ —Ç–∞–±–ª–∏—Ü–µ {self.indicators_table}")
                    cur.execute(f"""
                        ALTER TABLE {self.indicators_table}
                        ADD COLUMN IF NOT EXISTS obv DECIMAL(30, 8)
                    """)
                    conn.commit()
                    logger.info("‚úì –ö–æ–ª–æ–Ω–∫–∞ obv —Å–æ–∑–¥–∞–Ω–∞")
                else:
                    logger.info("‚úì –ö–æ–ª–æ–Ω–∫–∞ obv —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    def get_last_obv_date(self) -> datetime:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ OBV –≤ –ë–î

        Returns:
            –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º OBV –∏–ª–∏ None –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
        """
        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(f"""
                    SELECT MAX(timestamp)
                    FROM {self.indicators_table}
                    WHERE symbol = %s AND obv IS NOT NULL
                """, (self.symbol,))

                result = cur.fetchone()
                last_date = result[0] if result and result[0] else None

                if last_date:
                    logger.info(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ OBV –≤ –ë–î: {last_date}")
                else:
                    logger.info("OBV –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ë–î - –±—É–¥–µ—Ç –ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")

                return last_date

    def get_earliest_candle_date(self) -> datetime:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π —Å–≤–µ—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞

        Returns:
            –î–∞—Ç–∞ —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π —Å–≤–µ—á–∏
        """
        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(f"""
                    SELECT MIN(timestamp)
                    FROM {self.candles_table}
                    WHERE symbol = %s
                """, (self.symbol,))

                result = cur.fetchone()
                if result and result[0]:
                    return result[0]
                else:
                    raise ValueError(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {self.symbol} –≤ —Ç–∞–±–ª–∏—Ü–µ {self.candles_table}")

    def calculate_obv(self, df: pd.DataFrame) -> pd.Series:
        """
        –†–∞—Å—á–µ—Ç OBV –¥–ª—è –≤—Å–µ–≥–æ DataFrame

        Args:
            df: DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ 'close' –∏ 'volume'

        Returns:
            Series —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ OBV
        """
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        price_change = df['close'].diff()

        # Signed volume (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏)
        signed_volume = np.where(
            price_change > 0, df['volume'],
            np.where(price_change < 0, -df['volume'], 0)
        )

        # –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è —Å—É–º–º–∞ (–±—ã—Å—Ç—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
        obv = pd.Series(signed_volume, index=df.index).cumsum()

        # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = 0 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç –∏–Ω–¥—É—Å—Ç—Ä–∏–∏)
        obv.iloc[0] = 0

        return obv

    def load_all_candles(self, start_date: datetime = None) -> pd.DataFrame:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ OBV

        Args:
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è —Å–∞–º–∞—è —Ä–∞–Ω–Ω—è—è)

        Returns:
            DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ timestamp, close, volume
        """
        if start_date is None:
            start_date = self.get_earliest_candle_date()

        with self.db.get_connection() as conn:
            # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –∏–∑ 1m –¥–∞–Ω–Ω—ã—Ö
            if self.timeframe == '1m':
                # –î–ª—è 1m –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –≤—Å–µ —Å–≤–µ—á–∏
                query = f"""
                    SELECT timestamp, close, volume
                    FROM {self.candles_table}
                    WHERE symbol = %s AND timestamp >= %s
                    ORDER BY timestamp ASC
                """
                df = pd.read_sql_query(
                    query,
                    conn,
                    params=(self.symbol, start_date),
                    parse_dates=['timestamp']
                )
            else:
                # –î–ª—è 15m –∏ 1h - –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –∏–∑ 1m –¥–∞–Ω–Ω—ã—Ö
                interval_minutes = self.timeframe_minutes
                query = f"""
                    SELECT
                        date_trunc('hour', timestamp) +
                        INTERVAL '{interval_minutes} minutes' * (EXTRACT(MINUTE FROM timestamp)::INTEGER / {interval_minutes}) as timestamp,
                        (array_agg(close ORDER BY timestamp DESC))[1] as close,
                        SUM(volume) as volume
                    FROM {self.candles_table}
                    WHERE symbol = %s AND timestamp >= %s
                    GROUP BY date_trunc('hour', timestamp) +
                             INTERVAL '{interval_minutes} minutes' * (EXTRACT(MINUTE FROM timestamp)::INTEGER / {interval_minutes})
                    ORDER BY timestamp ASC
                """
                df = pd.read_sql_query(
                    query,
                    conn,
                    params=(self.symbol, start_date),
                    parse_dates=['timestamp']
                )

            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df):,} —Å–≤–µ—á–µ–π –æ—Ç {df['timestamp'].min()} –¥–æ {df['timestamp'].max()}")
            return df

    def batch_update_obv(self, df: pd.DataFrame):
        """
        –ë–∞—Ç—á-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ OBV –≤ –ë–î –ø–æ –¥–Ω—è–º

        Args:
            df: DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ timestamp, obv
        """
        if df.empty:
            logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        df['date'] = pd.to_datetime(df['timestamp']).dt.date
        grouped = df.groupby('date')

        total_days = len(grouped)
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {total_days} –¥–Ω–µ–π")

        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                # Progress bar –¥–ª—è –±–∞—Ç—á-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                progress_desc = f"{self.symbol} {self.symbol_progress}{self.timeframe.upper()}"
                pbar = tqdm(
                    total=total_days,
                    desc=f"üìä {progress_desc} - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î",
                    unit=" –¥–µ–Ω—å",
                    leave=False,
                    ncols=120,
                    bar_format='{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}]'
                )

                try:
                    for date, day_data in grouped:
                        # –ë–∞—Ç—á UPDATE –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è
                        update_values = [
                            (float(row['obv']), row['timestamp'], self.symbol)
                            for _, row in day_data.iterrows()
                        ]

                        cur.executemany(f"""
                            UPDATE {self.indicators_table}
                            SET obv = %s
                            WHERE timestamp = %s AND symbol = %s
                        """, update_values)

                        pbar.update(1)

                    pbar.close()
                    conn.commit()
                    logger.info(f"‚úì –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(df):,} –∑–∞–ø–∏—Å–µ–π OBV")

                except Exception as e:
                    conn.rollback()
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î: {e}")
                    raise

    def load_obv_for_timeframe(self):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ OBV –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞

        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É OBV –≤ –ë–î
        2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –í–°–ï —Å–≤–µ—á–∏ –æ—Ç –Ω–∞—á–∞–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏
        3. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å OBV –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ)
        4. –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        5. –ó–∞–ø–∏—Å–∞—Ç—å –±–∞—Ç—á–∞–º–∏ –ø–æ –¥–Ω—è–º
        """
        logger.info("=" * 80)
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ OBV –¥–ª—è {self.symbol} –Ω–∞ {self.timeframe}")
        logger.info("=" * 80)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not self.create_indicators_table():
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É {self.indicators_table}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ obv
        self.ensure_columns_exist()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É OBV –≤ –ë–î
        last_obv_date = self.get_last_obv_date()

        # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–ª–Ω–æ–º –ø–µ—Ä–µ—Å—á–µ—Ç–µ
        print()
        print(f"üîÑ [{self.symbol}] {self.symbol_progress} [{self.timeframe}] OBV: –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á—ë—Ç –æ—Ç –Ω–∞—á–∞–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã")
        print("‚ÑπÔ∏è  –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ OBV (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏)")
        print()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï —Å–≤–µ—á–∏ –æ—Ç –Ω–∞—á–∞–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π...")
        start_time = time.time()

        df = self.load_all_candles()

        if df.empty:
            logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ OBV –¥–ª—è {self.symbol}")
            return

        # –†–∞—Å—á–µ—Ç OBV –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info("–†–∞—Å—á–µ—Ç OBV (cumulative)...")
        print(f"üî¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—á—ë—Ç OBV –¥–ª—è {len(df):,} —Å–≤–µ—á–µ–π...")
        df['obv'] = self.calculate_obv(df)

        calc_time = time.time() - start_time

        # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—á–µ—Ç–∞
        if calc_time < 60:
            time_str = f"{calc_time:.1f} —Å–µ–∫—É–Ω–¥"
        else:
            minutes = int(calc_time // 60)
            seconds = int(calc_time % 60)
            time_str = f"{minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"

        print(f"‚è±Ô∏è  –†–∞—Å—á—ë—Ç OBV –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {time_str}")
        print()

        logger.info(f"‚úì OBV —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –¥–ª—è {len(df):,} –∑–∞–ø–∏—Å–µ–π –∑–∞ {calc_time:.2f}s")

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        if last_obv_date:
            df_to_update = df[df['timestamp'] > last_obv_date].copy()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(df_to_update):,} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ—Å–ª–µ {last_obv_date})")
        else:
            df_to_update = df.copy()
            logger.info(f"–ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {len(df_to_update):,} –∑–∞–ø–∏—Å–µ–π")

        if df_to_update.empty:
            logger.info("‚úì –í—Å–µ –¥–∞–Ω–Ω—ã–µ OBV —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
            return

        # –ë–∞—Ç—á-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
        self.batch_update_obv(df_to_update)

        logger.info("‚úì –ó–∞–≥—Ä—É–∑–∫–∞ OBV –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def setup_logging(log_dir: Path):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    Args:
        log_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥-—Ñ–∞–π–ª–æ–≤
    """
    log_dir.mkdir(parents=True, exist_ok=True)

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    log_file = log_dir / f"obv_loader_{timestamp}.log"

    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file),
            logging.StreamHandler()
        ]
    )

    logger.info(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –õ–æ–≥-—Ñ–∞–π–ª: {log_file}")


def load_config(config_path: Path) -> dict:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ YAML

    Args:
        config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    """
    if not config_path.exists():
        raise FileNotFoundError(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")

    with open(config_path, 'r', encoding='utf-8') as f:
        config = yaml.safe_load(f)

    logger.info(f"‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
    return config


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='OBV (On-Balance Volume) Loader')
    parser.add_argument('--symbol', type=str, help='–°–∏–º–≤–æ–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)')
    parser.add_argument('--timeframe', type=str, help='–¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (1m, 15m, 1h)')
    parser.add_argument('--batch-days', type=int, help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)')

    args = parser.parse_args()

    # –ü—É—Ç–∏
    base_dir = Path(__file__).parent
    config_path = base_dir / 'indicators_config.yaml'
    log_dir = base_dir / 'logs'

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(log_dir)

    logger.info("=" * 80)
    logger.info("OBV (On-Balance Volume) Loader")
    logger.info("=" * 80)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config(config_path)

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ batch_days –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if args.batch_days:
        config['indicators']['obv']['batch_days'] = args.batch_days
        logger.info(f"–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {args.batch_days} –¥–µ–Ω—å(–¥–Ω–µ–π)")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if args.symbol:
        symbols = [args.symbol]
    else:
        symbols = config['symbols']

    if args.timeframe:
        timeframes = [args.timeframe]
    else:
        timeframes = config['indicators']['obv']['timeframes']

    logger.info(f"–°–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {symbols}")
    logger.info(f"–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {timeframes}")

    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    start_time = time.time()

    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤
    total_symbols = len(symbols)
    current_symbol = 0

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    for symbol in symbols:
        current_symbol += 1

        for timeframe in timeframes:
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ [1/10] - –Ω–æ–º–µ—Ä —Å–∏–º–≤–æ–ª–∞ –∏–∑ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            symbol_progress = f"[{current_symbol}/{total_symbols}] "

            logger.info("")
            logger.info("*" * 80)
            logger.info(f"{symbol_progress}–û–±—Ä–∞–±–æ—Ç–∫–∞ {symbol} –Ω–∞ {timeframe}")
            logger.info("*" * 80)

            try:
                loader = OBVLoader(symbol, timeframe, config)
                loader.symbol_progress = symbol_progress
                loader.load_obv_for_timeframe()

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {symbol} –Ω–∞ {timeframe}: {e}", exc_info=True)
                continue

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    elapsed_time = time.time() - start_time
    minutes = int(elapsed_time // 60)
    seconds = int(elapsed_time % 60)

    logger.info("")
    logger.info("=" * 80)
    logger.info("‚úì –ó–∞–≥—Ä—É–∑–∫–∞ OBV –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
    logger.info(f"‚è±Ô∏è  Total time: {minutes}m {seconds}s")
    logger.info("=" * 80)


if __name__ == '__main__':
    main()
