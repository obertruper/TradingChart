#!/usr/bin/env python3
"""
EMA Loader - –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑—á–∏–∫ EMA –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
–° –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏ —Å–∏—Å—Ç–µ–º–æ–π checkpoint –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python ema_loader.py                     # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∏–∑ config.yaml
    python ema_loader.py --timeframe 1m      # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    python ema_loader.py --batch-days 7      # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ 7 –¥–Ω–µ–π
    python ema_loader.py --start-date 2024-01-01  # –ù–∞—á–∞—Ç—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
"""

import os
import sys
import re
import logging
import argparse
import yaml
import psycopg2
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Tuple
from tqdm import tqdm
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from database import DatabaseConnection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—ã–≤–æ–¥–æ–º –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å"""
    log_dir = os.path.join(os.path.dirname(__file__), 'logs')
    os.makedirs(log_dir, exist_ok=True)

    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    log_file = os.path.join(log_dir, f'ema_{timestamp}.log')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    file_handler = logging.FileHandler(log_file)
    file_handler.setFormatter(formatter)

    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

    logger.info(f"üìù EMA Loader: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –õ–æ–≥-—Ñ–∞–π–ª: {log_file}")
    return logger

logger = setup_logging()

class EMALoader:
    """
    –ó–∞–≥—Ä—É–∑—á–∏–∫ EMA –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏ checkpoint —Å–∏—Å—Ç–µ–º–æ–π
    """

    def __init__(self, symbol: str = 'BTCUSDT'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        """
        self.db = DatabaseConnection()
        self.symbol = symbol
        self.config = self.load_config()
        self.symbol_progress = ""  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ main() –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.timeframe_minutes = self._parse_timeframes()

    def _parse_timeframes(self) -> dict:
        """
        –ü–∞—Ä—Å–∏—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: 1m, 5m, 15m, 30m, 1h, 4h, 1d, 1w

        Returns:
            dict: –ú–∞–ø–∏–Ω–≥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
        """
        timeframe_map = {}
        timeframes = self.config.get('timeframes', ['1m', '15m', '1h'])

        for tf in timeframes:
            match = re.match(r'^(\d+)([mhdw])$', tf.lower())
            if match:
                number = int(match.group(1))
                unit = match.group(2)

                if unit == 'm':
                    minutes = number
                elif unit == 'h':
                    minutes = number * 60
                elif unit == 'd':
                    minutes = number * 1440
                elif unit == 'w':
                    minutes = number * 10080
                else:
                    continue

                timeframe_map[tf] = minutes

        return timeframe_map

    def load_config(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ indicators_config.yaml"""
        config_path = os.path.join(os.path.dirname(__file__), 'indicators_config.yaml')

        if os.path.exists(config_path):
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = yaml.safe_load(f)
                    logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
                    return config
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å indicators_config.yaml: {e}")
                raise
        else:
            logger.error("‚ùå indicators_config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise FileNotFoundError("indicators_config.yaml not found")

    def create_ema_columns(self, timeframe: str, periods: List[int]):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è EMA –ø–µ—Ä–∏–æ–¥–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ EMA
        """
        table_name = f'indicators_bybit_futures_{timeframe}'

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            cur.execute("""
                SELECT EXISTS (
                    SELECT 1 FROM information_schema.tables
                    WHERE table_name = %s
                )
            """, (table_name,))

            if not cur.fetchone()[0]:
                logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            cur.execute("""
                SELECT column_name
                FROM information_schema.columns
                WHERE table_name = %s
                AND column_name LIKE 'ema_%%'
            """, (table_name,))

            existing = {row[0] for row in cur.fetchall()}

            # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            created = []
            for period in periods:
                col_name = f'ema_{period}'
                if col_name not in existing:
                    try:
                        cur.execute(f"""
                            ALTER TABLE {table_name}
                            ADD COLUMN IF NOT EXISTS {col_name} DECIMAL(20,8)
                        """)
                        created.append(col_name)
                        logger.info(f"  üìä –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {col_name} –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
                    except Exception as e:
                        logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ {col_name}: {e}")

            conn.commit()

            if created:
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ EMA –¥–ª—è {table_name}: {created}")
            else:
                logger.info(f"‚ÑπÔ∏è –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ EMA —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ {table_name}")

            return True

    def get_last_ema_checkpoint(self, timeframe: str, period: int) -> Tuple[Optional[datetime], Optional[float]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ EMA –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            period: –ü–µ—Ä–∏–æ–¥ EMA

        Returns:
            (timestamp, ema_value) –∏–ª–∏ (None, None)
        """
        table_name = f'indicators_bybit_futures_{timeframe}'
        column_name = f'ema_{period}'

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            try:
                cur.execute(f"""
                    SELECT timestamp, {column_name}
                    FROM {table_name}
                    WHERE symbol = %s
                    AND {column_name} IS NOT NULL
                    ORDER BY timestamp DESC
                    LIMIT 1
                """, (self.symbol,))

                result = cur.fetchone()
                if result:
                    return result[0], float(result[1])
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å checkpoint –¥–ª—è {column_name}: {e}")

            return None, None

    def calculate_ema_batch(self, df: pd.DataFrame, periods: List[int],
                           initial_emas: Dict[int, float]) -> pd.DataFrame:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç EMA –¥–ª—è –±–∞—Ç—á–∞ –¥–∞–Ω–Ω—ã—Ö

        Args:
            df: DataFrame —Å —Ü–µ–Ω–∞–º–∏
            periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ EMA
            initial_emas: –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è EMA –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞

        Returns:
            DataFrame —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ EMA
        """
        for period in periods:
            column_name = f'ema_{period}'
            alpha = 2.0 / (period + 1)

            if period in initial_emas and initial_emas[period] is not None:
                # –ï—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ–æ—Ä–º—É–ª—É
                ema_values = []
                prev_ema = initial_emas[period]

                for price in df['price']:
                    if pd.notna(price):
                        new_ema = float(price) * alpha + prev_ema * (1 - alpha)
                        ema_values.append(new_ema)
                        prev_ema = new_ema
                    else:
                        ema_values.append(None)

                df[column_name] = ema_values
            else:
                # –ù–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º pandas.ewm
                df[column_name] = df['price'].ewm(span=period, adjust=False).mean()

        return df

    def process_batch(self, timeframe: str, periods: List[int],
                     start_date: datetime, end_date: datetime,
                     initial_emas: Dict[int, float]) -> Dict[int, float]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –±–∞—Ç—á –¥–∞–Ω–Ω—ã—Ö

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            periods: –ü–µ—Ä–∏–æ–¥—ã EMA
            start_date: –ù–∞—á–∞–ª–æ –±–∞—Ç—á–∞
            end_date: –ö–æ–Ω–µ—Ü –±–∞—Ç—á–∞
            initial_emas: –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è EMA

        Returns:
            –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è EMA –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞
        """
        with self.db.get_connection() as conn:
            cur = conn.cursor()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if timeframe == '1m':
                # –î–ª—è 1m –±–µ—Ä–µ–º close –∏–∑ —Å–≤–µ—á–µ–π
                query = """
                    SELECT timestamp, close
                    FROM candles_bybit_futures_1m
                    WHERE symbol = %s
                    AND timestamp >= %s
                    AND timestamp <= %s
                    ORDER BY timestamp
                """
                cur.execute(query, (self.symbol, start_date, end_date))
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ - –∞–≥—Ä–µ–≥–∞—Ü–∏—è
                minutes = self.timeframe_minutes[timeframe]
                query = f"""
                    WITH candle_data AS (
                        SELECT
                            date_trunc('hour', timestamp) +
                            INTERVAL '{minutes} minutes' * (EXTRACT(MINUTE FROM timestamp)::integer / {minutes}) as period_start,
                            open,  -- –ò—Å–ø–æ–ª—å–∑—É–µ–º OPEN –¥–ª—è —Å—Ç–∞—Ä—à–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
                            symbol,
                            timestamp as original_timestamp
                        FROM candles_bybit_futures_1m
                        WHERE symbol = %s AND timestamp >= %s AND timestamp <= %s
                    )
                    SELECT DISTINCT ON (period_start)
                        period_start + INTERVAL '{minutes} minutes' as timestamp,
                        first_value(open) OVER (PARTITION BY period_start ORDER BY original_timestamp) as price
                    FROM candle_data
                    WHERE symbol = %s
                    ORDER BY period_start
                """
                cur.execute(query, (self.symbol, start_date, end_date, self.symbol))

            rows = cur.fetchall()

            if not rows:
                return initial_emas

            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(rows, columns=['timestamp', 'price'])
            df['price'] = df['price'].astype(float)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA
            df = self.calculate_ema_batch(df, periods, initial_emas)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            table_name = f'indicators_bybit_futures_{timeframe}'

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è batch update
            updates = []
            for _, row in df.iterrows():
                update_values = {'timestamp': row['timestamp'], 'symbol': self.symbol}
                for period in periods:
                    col_name = f'ema_{period}'
                    if col_name in df.columns and pd.notna(row[col_name]):
                        update_values[col_name] = float(row[col_name])

                if len(update_values) > 2:  # –ï—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ EMA
                    updates.append(update_values)

            # –í—ã–ø–æ–ª–Ω—è–µ–º batch update
            if updates:
                for update in updates:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π UPDATE –∑–∞–ø—Ä–æ—Å
                    ema_columns = [k for k in update.keys() if k.startswith('ema_')]
                    if ema_columns:
                        set_clause = ', '.join([f"{col} = %s" for col in ema_columns])
                        values = [update[col] for col in ema_columns]
                        values.extend([update['timestamp'], update['symbol']])

                        update_query = f"""
                            UPDATE {table_name}
                            SET {set_clause}
                            WHERE timestamp = %s AND symbol = %s
                        """

                        try:
                            cur.execute(update_query, values)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

            conn.commit()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è EMA –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞
            last_emas = {}
            for period in periods:
                col_name = f'ema_{period}'
                if col_name in df.columns:
                    last_value = df[col_name].dropna().iloc[-1] if not df[col_name].dropna().empty else None
                    if last_value is not None:
                        last_emas[period] = float(last_value)
                    elif period in initial_emas:
                        last_emas[period] = initial_emas[period]

            return last_emas

    def calculate_and_save_ema(self, timeframe: str, periods: List[int],
                               batch_days: int = 7,
                               start_date: Optional[datetime] = None):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç EMA –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —Å –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ EMA
            batch_days: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (–µ—Å–ª–∏ None, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–ª–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞)
        """
        logger.info(f"\n{'='*60}")
        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ EMA –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {timeframe}")
        logger.info(f"üíπ –ü–µ—Ä–∏–æ–¥—ã EMA: {periods}")
        logger.info(f"üéØ –°–∏–º–≤–æ–ª: {self.symbol}")
        logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_days} –¥–Ω–µ–π")
        logger.info(f"{'='*60}")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not self.create_ema_columns(timeframe, periods):
            return

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º checkpoint –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (checkpoint):")
            checkpoints = {}
            latest_checkpoint = None

            for period in periods:
                last_timestamp, last_ema = self.get_last_ema_checkpoint(timeframe, period)
                checkpoints[period] = {
                    'last_timestamp': last_timestamp,
                    'last_ema': last_ema
                }

                if last_timestamp:
                    logger.info(f"  ‚úÖ EMA_{period}: –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å {last_timestamp} (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {last_ema:.2f})")
                    if not latest_checkpoint or last_timestamp > latest_checkpoint:
                        latest_checkpoint = last_timestamp
                else:
                    logger.info(f"  üìù EMA_{period}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö (–±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω —Å –Ω–∞—á–∞–ª–∞)")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
            if start_date:
                current_date = start_date
                logger.info(f"\nüìÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞: {current_date}")
            elif latest_checkpoint:
                current_date = latest_checkpoint
                logger.info(f"\n‚ôªÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å checkpoint: {current_date}")
            else:
                # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞
                cur.execute("""
                    SELECT MIN(timestamp)
                    FROM candles_bybit_futures_1m
                    WHERE symbol = %s
                """, (self.symbol,))
                result = cur.fetchone()
                if result and result[0]:
                    current_date = result[0]
                    logger.info(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞: {current_date}")
                else:
                    logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    return

            # –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞)
            initial_emas = {}
            if not latest_checkpoint:
                max_period = max(periods)
                buffer_start = current_date - timedelta(minutes=max_period + 50)

                logger.info(f"\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EMA —Å –±—É—Ñ–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
                initial_emas = self.process_batch(
                    timeframe, periods,
                    buffer_start, current_date,
                    {}
                )

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ checkpoints –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                for period, checkpoint in checkpoints.items():
                    if checkpoint['last_ema'] is not None:
                        initial_emas[period] = checkpoint['last_ema']

                logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º checkpoint –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω—ã–µ
                for period, checkpoint in checkpoints.items():
                    if checkpoint['last_ema'] is not None:
                        initial_emas[period] = checkpoint['last_ema']

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
            cur.execute("""
                SELECT MAX(timestamp)
                FROM candles_bybit_futures_1m
                WHERE symbol = %s
            """, (self.symbol,))
            max_date = cur.fetchone()[0]

            if not max_date or current_date >= max_date:
                logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π
            total_days = (max_date - current_date).days
            if total_days <= 0:
                total_days = 1
            total_batches = (total_days + batch_days - 1) // batch_days

            logger.info(f"\nüìä –ü–ª–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏:")
            logger.info(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {total_days} –¥–Ω–µ–π ({current_date.strftime('%Y-%m-%d %H:%M')} ‚Üí {max_date.strftime('%Y-%m-%d %H:%M')})")
            logger.info(f"   ‚Ä¢ –ë–∞—Ç—á–µ–π: {total_batches}")
            logger.info(f"   ‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
            logger.info(f"   ‚Ä¢ EMA –ø–µ—Ä–∏–æ–¥—ã: {periods}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞–º–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
            logger.info(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

            progress_desc = f"{self.symbol} {self.symbol_progress} EMA {periods} {timeframe.upper()}" if self.symbol_progress else f"{self.symbol} EMA {periods} {timeframe.upper()}"
            with tqdm(total=total_batches,
                     desc=f"üìä {progress_desc}",
                     unit='batch',
                     bar_format='{desc}: {percentage:3.0f}%|{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}]') as pbar:

                batch_count = 0
                total_records = 0

                while current_date < max_date:
                    batch_end = min(current_date + timedelta(days=batch_days), max_date)

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
                    try:
                        initial_emas = self.process_batch(
                            timeframe, periods,
                            current_date, batch_end,
                            initial_emas
                        )

                        # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –±–∞—Ç—á–µ
                        if timeframe == '1m':
                            batch_records = batch_days * 1440  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                        else:
                            batch_records = batch_days * (1440 // self.timeframe_minutes[timeframe])

                        total_records += batch_records

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞—Ç—á–∞: {e}")
                        logger.info(f"   –ë–∞—Ç—á: {current_date} - {batch_end}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞
                        pass

                    batch_count += 1
                    pbar.update(1)
                    pbar.set_postfix({
                        '—Ç–µ–∫—É—â–∞—è_–¥–∞—Ç–∞': batch_end.strftime('%Y-%m-%d'),
                        '–∑–∞–ø–∏—Å–µ–π': f'~{total_records:,}'
                    })

                    current_date = batch_end + timedelta(minutes=1)

                    # Checkpoint –∫–∞–∂–¥—ã–µ 10 –±–∞—Ç—á–µ–π
                    if batch_count % 10 == 0:
                        logger.debug(f"üíæ Checkpoint: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {batch_count} –±–∞—Ç—á–µ–π, –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞: {batch_end}")

            logger.info(f"\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ EMA –¥–ª—è {timeframe} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            logger.info(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞—Ç—á–µ–π: {batch_count}")
            logger.info(f"   ‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_records:,}")

    def process_timeframe(self, timeframe: str, batch_days: int = 7,
                         start_date: Optional[datetime] = None):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            batch_days: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        ema_config = self.config.get('indicators', {}).get('ema', {})
        if not ema_config.get('enabled', False):
            logger.info(f"‚è≠Ô∏è EMA –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return

        periods = ema_config.get('periods', [])
        if not periods:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–∏–æ–¥—ã EMA")
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º EMA
        self.calculate_and_save_ema(timeframe, periods, batch_days, start_date)

    def run(self, timeframes: Optional[List[str]] = None,
            batch_days: int = 7,
            start_date: Optional[datetime] = None):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤

        Args:
            timeframes: –°–ø–∏—Å–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∏–ª–∏ None –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            batch_days: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        if not timeframes:
            timeframes = self.config.get('timeframes', ['1m'])

        logger.info(f"\n{'='*60}")
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ EMA Loader")
        logger.info(f"üìä –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {timeframes}")
        logger.info(f"üéØ –°–∏–º–≤–æ–ª: {self.symbol}")
        logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_days} –¥–Ω–µ–π")
        if start_date:
            logger.info(f"üìÖ –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {start_date}")
        else:
            logger.info(f"‚ôªÔ∏è –†–µ–∂–∏–º: –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ checkpoint")
        logger.info(f"{'='*60}")

        for timeframe in timeframes:
            if timeframe not in self.timeframe_minutes:
                logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
                continue

            self.process_timeframe(timeframe, batch_days, start_date)

        logger.info(f"\n{'='*60}")
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"{'='*60}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='EMA Indicator Loader - –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑—á–∏–∫ EMA –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python ema_loader.py                          # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∏–∑ indicators_config.yaml
  python ema_loader.py --timeframe 1m           # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ 1m —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
  python ema_loader.py --timeframes 1m,15m,1h   # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
  python ema_loader.py --batch-days 3           # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞—Ç—á–∏ –ø–æ 3 –¥–Ω—è
  python ema_loader.py --start-date 2024-01-01  # –ù–∞—á–∞—Ç—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
  python ema_loader.py --symbol ETHUSDT         # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        """
    )

    parser.add_argument('--symbol', type=str, default=None,
                       help='–û–¥–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)')
    parser.add_argument('--symbols', type=str, default=None,
                       help='–ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT,ETHUSDT)')
    parser.add_argument('--timeframe', type=str,
                       help='–û–¥–∏–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--timeframes', type=str,
                       help='–ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1m,15m,1h)')
    parser.add_argument('--batch-days', type=int, default=1,
                       help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)')
    parser.add_argument('--start-date', type=str,
                       help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å checkpoint)')

    args = parser.parse_args()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if args.symbols:
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç --symbols
        symbols = [s.strip() for s in args.symbols.split(',')]
    elif args.symbol:
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç --symbol
        symbols = [args.symbol]
    else:
        # –ß–∏—Ç–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ config.yaml
        config_path = os.path.join(os.path.dirname(__file__), 'indicators_config.yaml')
        if os.path.exists(config_path):
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
                symbols = config.get('symbols', ['BTCUSDT'])
        else:
            symbols = ['BTCUSDT']

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
    timeframes = None
    if args.timeframes:
        timeframes = args.timeframes.split(',')
    elif args.timeframe:
        timeframes = [args.timeframe]

    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    start_date = None
    if args.start_date:
        try:
            start_date = datetime.strptime(args.start_date, '%Y-%m-%d')
        except ValueError:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {args.start_date}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
            sys.exit(1)

    logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤: {symbols}")

    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    start_time = time.time()

    # –¶–∏–∫–ª –ø–æ –≤—Å–µ–º —Å–∏–º–≤–æ–ª–∞–º
    total_symbols = len(symbols)
    for idx, symbol in enumerate(symbols, 1):
        logger.info(f"\n{'='*80}")
        logger.info(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–º–≤–æ–ª–∞: {symbol} [{idx}/{total_symbols}]")
        logger.info(f"{'='*80}\n")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
        try:
            loader = EMALoader(symbol=symbol)
            loader.symbol_progress = f"[{idx}/{total_symbols}]"
            loader.run(timeframes, args.batch_days, start_date)
            logger.info(f"\n‚úÖ –°–∏–º–≤–æ–ª {symbol} –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n")
        except KeyboardInterrupt:
            logger.info("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ —Å —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞.")
            sys.exit(0)
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
            import traceback
            traceback.print_exc()
            continue

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    elapsed_time = time.time() - start_time
    minutes = int(elapsed_time // 60)
    seconds = int(elapsed_time % 60)

    logger.info(f"\nüéâ –í—Å–µ —Å–∏–º–≤–æ–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {symbols}")
    logger.info(f"‚è±Ô∏è  Total time: {minutes}m {seconds}s")

if __name__ == "__main__":
    main()