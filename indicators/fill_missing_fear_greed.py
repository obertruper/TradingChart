#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –≤ Fear & Greed Index
–º–µ—Ç–æ–¥–æ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ –¥–Ω—è–º–∏
"""

import sys
import psycopg2
import yaml
import logging
from datetime import datetime, timedelta
from typing import Optional, Tuple, Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class FearGreedGapFiller:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π Fear & Greed Index"""

    def __init__(self, config_path: str = 'indicators_config.yaml'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(config_path, 'r') as f:
            config = yaml.safe_load(f)

        self.db_config = config['database']
        self.symbol = 'BTCUSDT'
        self.timeframes = ['1m', '15m', '1h']

    def connect_db(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        conn = psycopg2.connect(
            host=self.db_config['host'],
            port=self.db_config['port'],
            database=self.db_config['database'],
            user=self.db_config['user'],
            password=self.db_config['password']
        )
        # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –≤—Ä—É—á–Ω—É—é
        conn.autocommit = False
        return conn

    def get_classification(self, value: int) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞

        Args:
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ (0-100)

        Returns:
            –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: 'Extreme Fear', 'Fear', 'Neutral', 'Greed', 'Extreme Greed'
        """
        if value >= 0 and value <= 25:
            return 'Extreme Fear'
        elif value > 25 and value <= 45:
            return 'Fear'
        elif value > 45 and value <= 55:
            return 'Neutral'
        elif value > 55 and value <= 75:
            return 'Greed'
        else:
            return 'Extreme Greed'

    def find_missing_days(self, conn) -> list:
        """
        –ù–∞–π—Ç–∏ –≤—Å–µ –¥–Ω–∏ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ F&G

        Args:
            conn: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î

        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π
        """
        cur = conn.cursor()

        # –ù–∞—Ö–æ–¥–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ F&G
        cur.execute("""
            SELECT
                MIN(DATE(timestamp)) as first_date,
                MAX(DATE(timestamp)) as last_date
            FROM indicators_bybit_futures_1m
            WHERE symbol = %s
              AND fear_and_greed_index_alternative IS NOT NULL
        """, (self.symbol,))

        result = cur.fetchone()
        if not result or not result[0]:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Fear & Greed –≤ –ë–î")
            return []

        first_date, last_date = result

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–Ω–∏ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö F&G –≤ —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ
        cur.execute("""
            WITH all_days AS (
                SELECT DISTINCT DATE(timestamp) as day
                FROM indicators_bybit_futures_1m
                WHERE symbol = %s
                  AND DATE(timestamp) >= %s
                  AND DATE(timestamp) <= %s
            ),
            days_with_fg AS (
                SELECT DISTINCT DATE(timestamp) as day
                FROM indicators_bybit_futures_1m
                WHERE symbol = %s
                  AND fear_and_greed_index_alternative IS NOT NULL
                  AND DATE(timestamp) >= %s
                  AND DATE(timestamp) <= %s
            )
            SELECT ad.day
            FROM all_days ad
            LEFT JOIN days_with_fg dfg ON ad.day = dfg.day
            WHERE dfg.day IS NULL
            ORDER BY ad.day
        """, (self.symbol, first_date, last_date, self.symbol, first_date, last_date))

        missing_days = [row[0] for row in cur.fetchall()]
        cur.close()

        # –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á—Ç–µ–Ω–∏—è
        conn.commit()

        return missing_days

    def get_neighbor_values(self, conn, date) -> Optional[Tuple[int, int]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è F&G –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å

        Args:
            conn: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
            date: –î–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (prev_value, next_value) –∏–ª–∏ None –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞
        """
        cur = conn.cursor()

        prev_day = date - timedelta(days=1)
        next_day = date + timedelta(days=1)

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        cur.execute("""
            SELECT
                (SELECT fear_and_greed_index_alternative
                 FROM indicators_bybit_futures_1m
                 WHERE symbol = %s
                   AND DATE(timestamp) = %s
                   AND fear_and_greed_index_alternative IS NOT NULL
                 LIMIT 1) as prev_value,
                (SELECT fear_and_greed_index_alternative
                 FROM indicators_bybit_futures_1m
                 WHERE symbol = %s
                   AND DATE(timestamp) = %s
                   AND fear_and_greed_index_alternative IS NOT NULL
                 LIMIT 1) as next_value
        """, (self.symbol, prev_day, self.symbol, next_day))

        prev_value, next_value = cur.fetchone()
        cur.close()

        # –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á—Ç–µ–Ω–∏—è
        conn.commit()

        if prev_value is not None and next_value is not None:
            return (prev_value, next_value)
        return None

    def fill_day(self, conn, date, value: int, classification: str) -> Dict[str, int]:
        """
        –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ F&G –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è

        Args:
            conn: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
            date: –î–∞—Ç–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
            classification: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        """
        cur = conn.cursor()
        updated_counts = {}

        try:

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            for timeframe in self.timeframes:
                table_name = f'indicators_bybit_futures_{timeframe}'

                cur.execute(f"""
                    UPDATE {table_name}
                    SET
                        fear_and_greed_index_alternative = %s,
                        fear_and_greed_index_classification_alternative = %s
                    WHERE symbol = %s
                      AND DATE(timestamp) = %s
                      AND fear_and_greed_index_alternative IS NULL
                """, (value, classification, self.symbol, date))

                updated_counts[timeframe] = cur.rowcount
                logger.info(f"  {timeframe}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {cur.rowcount} –∑–∞–ø–∏—Å–µ–π")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            total_updated = sum(updated_counts.values())
            if total_updated == 0:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞ {date}")
                conn.rollback()
                return updated_counts

            # –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            conn.commit()
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω –¥–µ–Ω—å {date} (–≤—Å–µ–≥–æ {total_updated} –∑–∞–ø–∏—Å–µ–π)")

        except Exception as e:
            conn.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ {date}: {e}")
            raise
        finally:
            cur.close()

        return updated_counts

    def run(self, specific_date: Optional[str] = None):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

        Args:
            specific_date: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (YYYY-MM-DD) –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö
        """
        logger.info("="*60)
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π Fear & Greed Index")
        logger.info("="*60)

        conn = self.connect_db()

        try:
            if specific_date:
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
                date = datetime.strptime(specific_date, '%Y-%m-%d').date()
                missing_days = [date]
                logger.info(f"üìÖ –†–µ–∂–∏–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã: {date}")
            else:
                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏
                missing_days = self.find_missing_days(conn)

                if not missing_days:
                    logger.info("‚úÖ –ù–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π!")
                    return

                logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(missing_days)} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –¥–µ–Ω—å
            filled_days = 0
            skipped_days = 0

            for date in missing_days:
                logger.info(f"\nüìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ {date}:")

                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Å–µ–¥–Ω–∏—Ö –¥–Ω–µ–π
                neighbor_values = self.get_neighbor_values(conn, date)

                if neighbor_values:
                    prev_value, next_value = neighbor_values
                    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    avg_value = round((prev_value + next_value) / 2)
                    classification = self.get_classification(avg_value)

                    logger.info(f"  –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è: ({prev_value} + {next_value}) / 2 = {avg_value} ({classification})")

                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ–Ω—å
                    updated_counts = self.fill_day(conn, date, avg_value, classification)

                    if sum(updated_counts.values()) > 0:
                        filled_days += 1
                    else:
                        skipped_days += 1
                else:
                    logger.warning(f"  ‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞—Ç—å (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–æ—Å–µ–¥–Ω–∏–µ –¥–Ω–∏)")
                    skipped_days += 1

            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            logger.info("\n" + "="*60)
            logger.info("üìä –ò–¢–û–ì–ò:")
            logger.info(f"  ‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –¥–Ω–µ–π: {filled_days}")
            if skipped_days > 0:
                logger.info(f"  ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥–Ω–µ–π: {skipped_days}")
            logger.info("="*60)

        finally:
            conn.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    filler = FearGreedGapFiller()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
        specific_date = sys.argv[1]
        filler.run(specific_date)
    else:
        # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏
        filler.run()


if __name__ == "__main__":
    main()