#!/usr/bin/env python3
"""
Start All Loaders - Orchestrator –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö loader'–æ–≤
==========================================================================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –∑–∞–ø—É—Å–∫–∞—è loader'—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
–≤ –ø–æ—Ä—è–¥–∫–µ, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –≤ indicators_config.yaml.

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ß–∏—Ç–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ indicators_config.yaml (—Å–µ–∫—Ü–∏—è orchestrator.loaders)
- –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ loader'—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ true
- –ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è = –ø–æ—Ä—è–¥–æ–∫ –≤ —Å–µ–∫—Ü–∏–∏ indicators –≤ config —Ñ–∞–π–ª–µ
- –£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è stochastic + williams_r (–æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –æ–±–æ–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤)
- –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
- –õ–æ–≥–∏—Ä—É–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å + —Ñ–∞–π–ª logs/run_YYYYMMDD_HHMMSS.log
- –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    cd indicators
    python3 start_all_loaders.py

–ê–≤—Ç–æ—Ä: Trading System
–î–∞—Ç–∞: 2025-10-23
"""

import subprocess
import sys
import os
import yaml
import logging
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Tuple, Optional

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


# Mapping –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –Ω–∞ —Å–∫—Ä–∏–ø—Ç—ã
LOADER_MAPPING = {
    'sma': 'sma_loader.py',
    'ema': 'ema_loader.py',
    'rsi': 'rsi_loader.py',
    'vma': 'vma_loader.py',
    'atr': 'atr_loader.py',
    'macd': 'macd_loader.py',
    'bollinger_bands': 'bollinger_bands_loader.py',
    'adx': 'adx_loader.py',
    'vwap': 'vwap_loader.py',
    'mfi': 'mfi_loader.py',
    'obv': 'obv_loader.py',
    'long_short_ratio': 'long_short_ratio_loader.py',

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ (–Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞)
    'fear_and_greed': 'fear_and_greed_loader_alternative.py',
    'coinmarketcap_fear_and_greed': 'fear_and_greed_coinmarketcap_loader.py',

    # Stochastic + Williams (–æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –æ–±–æ–∏—Ö)
    'stochastic': 'stochastic_williams_loader.py',
    'williams_r': 'stochastic_williams_loader.py',
}


def setup_logging() -> logging.Logger:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = Path(__file__).parent / 'logs'
    log_dir.mkdir(exist_ok=True)

    # –ò–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ —Å timestamp
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    log_file = log_dir / f'start_all_loaders_{timestamp}.log'

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
    logger = logging.getLogger('start_all_loaders')
    logger.setLevel(logging.INFO)

    # Formatter
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

    # Console handler
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)

    # File handler
    file_handler = logging.FileHandler(log_file, encoding='utf-8')
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(formatter)

    # –î–æ–±–∞–≤–ª—è–µ–º handlers
    logger.addHandler(console_handler)
    logger.addHandler(file_handler)

    return logger, log_file


def load_config() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ indicators_config.yaml"""
    config_path = Path(__file__).parent / 'indicators_config.yaml'

    if not config_path.exists():
        raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")

    with open(config_path, 'r', encoding='utf-8') as f:
        config = yaml.safe_load(f)

    return config


def get_execution_order(config: Dict) -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ YAML —Ñ–∞–π–ª–∞

    –ü–æ—Ä—è–¥–æ–∫ = –ø–æ—Ä—è–¥–æ–∫ –∫–ª—é—á–µ–π –≤ —Å–µ–∫—Ü–∏–∏ indicators
    """
    indicators_section = config.get('indicators', {})
    return list(indicators_section.keys())


def get_enabled_loaders(config: Dict) -> Dict[str, bool]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {indicator_name: enabled_flag} –∏–∑ orchestrator.loaders"""
    orchestrator = config.get('orchestrator', {})
    loaders = orchestrator.get('loaders', {})

    if not loaders:
        raise ValueError("–°–µ–∫—Ü–∏—è orchestrator.loaders –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

    return loaders


def get_stochastic_williams_args(config: Dict) -> List[str]:
    """
    –£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ stochastic_williams_loader.py

    Returns:
        –°–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è --indicator —Ñ–ª–∞–≥–∞
    """
    loaders = get_enabled_loaders(config)

    stoch_enabled = loaders.get('stochastic', False)
    williams_enabled = loaders.get('williams_r', False)

    if stoch_enabled and williams_enabled:
        return ['--indicator', 'both']
    elif stoch_enabled:
        return ['--indicator', 'stochastic']
    elif williams_enabled:
        return ['--indicator', 'williams']
    else:
        return []


def format_duration(seconds: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    minutes = int(seconds // 60)
    secs = int(seconds % 60)

    if minutes > 0:
        return f"{minutes}m {secs}s"
    else:
        return f"{secs}s"


def run_loader(indicator_name: str, script_name: str, extra_args: List[str],
               logger: logging.Logger, index: int, total: int) -> Tuple[bool, float]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω loader —á–µ—Ä–µ–∑ subprocess

    Args:
        indicator_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ (–¥–ª—è –ª–æ–≥–æ–≤)
        script_name: –ò–º—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        extra_args: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        logger: Logger –¥–ª—è –≤—ã–≤–æ–¥–∞
        index: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ loader'–∞
        total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ loader'–æ–≤

    Returns:
        Tuple[success: bool, duration: float]
    """
    script_path = Path(__file__).parent / script_name

    if not script_path.exists():
        logger.error(f"‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
        return False, 0.0

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    cmd = [sys.executable, str(script_path)] + extra_args

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ
    logger.info("")
    logger.info("=" * 80)
    logger.info(f"{index}/{total} [{indicator_name.upper()}] –ó–∞–ø—É—Å–∫ {script_name}...")
    logger.info("=" * 80)

    # –ó–∞–ø—É—Å–∫–∞–µ–º
    start_time = time.time()

    try:
        result = subprocess.run(
            cmd,
            cwd=str(Path(__file__).parent),
            check=True,  # Raises CalledProcessError if return code != 0
            text=True
        )

        duration = time.time() - start_time

        logger.info("")
        logger.info(f"{Colors.OKGREEN}‚úÖ [{indicator_name.upper()}] –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {format_duration(duration)}{Colors.ENDC}")

        return True, duration

    except subprocess.CalledProcessError as e:
        duration = time.time() - start_time

        logger.error("")
        logger.error(f"{Colors.FAIL}‚ùå [{indicator_name.upper()}] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è{Colors.ENDC}")
        logger.error(f"Return code: {e.returncode}")
        logger.error(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ –æ—à–∏–±–∫–∏: {format_duration(duration)}")

        return False, duration

    except Exception as e:
        duration = time.time() - start_time

        logger.error("")
        logger.error(f"{Colors.FAIL}‚ùå [{indicator_name.upper()}] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}{Colors.ENDC}")

        return False, duration


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger, log_file = setup_logging()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    print(f"\n{Colors.BOLD}{'=' * 80}{Colors.ENDC}")
    print(f"{Colors.BOLD}{Colors.HEADER}üöÄ –ó–ê–ü–£–°–ö START ALL LOADERS - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤{Colors.ENDC}")
    print(f"{Colors.BOLD}{'=' * 80}{Colors.ENDC}\n")

    logger.info(f"–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info(f"–õ–æ–≥ —Ñ–∞–π–ª: {log_file}")
    logger.info("")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        logger.info("üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ indicators_config.yaml...")
        config = load_config()
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ enabled —Ñ–ª–∞–≥–∏
    execution_order = get_execution_order(config)
    enabled_loaders = get_enabled_loaders(config)

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ enabled=true
    loaders_to_run = [
        indicator for indicator in execution_order
        if enabled_loaders.get(indicator, False)
    ]

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_indicators = len(execution_order)
    enabled_count = len(loaders_to_run)
    disabled_count = total_indicators - enabled_count

    logger.info("")
    logger.info(f"üìä –í—Å–µ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥–µ: {total_indicators}")
    logger.info(f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ (orchestrator.loaders = true): {enabled_count}")
    logger.info(f"‚è∏Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (orchestrator.loaders = false): {disabled_count}")
    logger.info("")

    if enabled_count == 0:
        logger.warning("‚ö†Ô∏è  –ù–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö loader'–æ–≤. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return

    logger.info(f"üéØ –ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
    for idx, indicator in enumerate(loaders_to_run, 1):
        logger.info(f"  {idx}. {indicator}")
    logger.info("")

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è stochastic+williams
    stochastic_williams_args = get_stochastic_williams_args(config)

    # –ó–∞–ø—É—Å–∫–∞–µ–º loader'—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    results = []
    total_start_time = time.time()

    # –§–ª–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ stochastic+williams
    stochastic_williams_processed = False

    for idx, indicator_name in enumerate(loaders_to_run, 1):
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ stochastic + williams_r
        if indicator_name == 'stochastic':
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –æ–±–æ–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            script_name = LOADER_MAPPING[indicator_name]
            success, duration = run_loader(
                'stochastic+williams_r',
                script_name,
                stochastic_williams_args,
                logger,
                idx,
                enabled_count
            )
            results.append((indicator_name, success, duration))
            stochastic_williams_processed = True

            if not success:
                logger.error("")
                logger.error(f"{Colors.FAIL}‚ùå –û–°–¢–ê–ù–û–í–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {indicator_name}{Colors.ENDC}")
                break

        elif indicator_name == 'williams_r':
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç.–∫. —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ stochastic
            if stochastic_williams_processed:
                logger.info("")
                logger.info(f"‚è≠Ô∏è  [{indicator_name.upper()}] –ü—Ä–æ–ø—É—â–µ–Ω–æ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤–º–µ—Å—Ç–µ —Å–æ stochastic)")
                continue
            else:
                # –ï—Å–ª–∏ stochastic –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–æ williams –≤–∫–ª—é—á–µ–Ω - –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                script_name = LOADER_MAPPING[indicator_name]
                success, duration = run_loader(
                    indicator_name,
                    script_name,
                    stochastic_williams_args,
                    logger,
                    idx,
                    enabled_count
                )
                results.append((indicator_name, success, duration))

                if not success:
                    logger.error("")
                    logger.error(f"{Colors.FAIL}‚ùå –û–°–¢–ê–ù–û–í–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {indicator_name}{Colors.ENDC}")
                    break
        else:
            # –û–±—ã—á–Ω—ã–π loader
            script_name = LOADER_MAPPING.get(indicator_name)

            if not script_name:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: {indicator_name}")
                logger.error(f"–î–æ–±–∞–≤—å—Ç–µ mapping –≤ LOADER_MAPPING")
                break

            success, duration = run_loader(
                indicator_name,
                script_name,
                [],
                logger,
                idx,
                enabled_count
            )
            results.append((indicator_name, success, duration))

            if not success:
                logger.error("")
                logger.error(f"{Colors.FAIL}‚ùå –û–°–¢–ê–ù–û–í–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {indicator_name}{Colors.ENDC}")
                break

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_duration = time.time() - total_start_time

    successful = sum(1 for _, success, _ in results if success)
    failed = len(results) - successful

    logger.info("")
    logger.info("=" * 80)
    logger.info(f"{Colors.BOLD}üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê{Colors.ENDC}")
    logger.info("=" * 80)
    logger.info("")

    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É loader'—É
    logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ loader'—ã:")
    for indicator, success, duration in results:
        status = f"{Colors.OKGREEN}‚úÖ{Colors.ENDC}" if success else f"{Colors.FAIL}‚ùå{Colors.ENDC}"
        logger.info(f"  {status} {indicator:25s} - {format_duration(duration)}")

    logger.info("")
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {successful}")
    logger.info(f"‚ùå –û—à–∏–±–∫–∏: {failed}")
    logger.info(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {format_duration(total_duration)}")
    logger.info(f"üìù –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {log_file}")
    logger.info("")

    if failed == 0:
        logger.info(f"{Colors.OKGREEN}{Colors.BOLD}üéâ –í–°–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ –û–ë–ù–û–í–õ–ï–ù–´ –£–°–ü–ï–®–ù–û!{Colors.ENDC}")
    else:
        logger.error(f"{Colors.FAIL}{Colors.BOLD}‚ö†Ô∏è  –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò{Colors.ENDC}")

    logger.info("=" * 80)
    logger.info("")

    # Exit code
    sys.exit(0 if failed == 0 else 1)


if __name__ == '__main__':
    main()
