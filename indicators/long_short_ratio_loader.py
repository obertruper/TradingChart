#!/usr/bin/env python3
"""
Long/Short Ratio Loader

–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ Long/Short Ratio –æ—Ç Bybit –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.

Long/Short Ratio –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–ª–∏–Ω–Ω—ã—Ö –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ–∑–∏—Ü–∏—è—Ö.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞ (market sentiment).

–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: Bybit API /v5/market/account-ratio
–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å 20 –∏—é–ª—è 2020 –≥–æ–¥–∞.

Usage:
    python3 long_short_ratio_loader.py                                    # –í—Å–µ —Å–∏–º–≤–æ–ª—ã, –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
    python3 long_short_ratio_loader.py --symbol BTCUSDT                   # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª
    python3 long_short_ratio_loader.py --symbol BTCUSDT --timeframe 15m   # –°–∏–º–≤–æ–ª + —Ç–∞–π–º—Ñ—Ä–µ–π–º
"""

import sys
import logging
import argparse
import warnings
from pathlib import Path
from datetime import datetime, timedelta
import yaml
import requests
import time
from tqdm import tqdm
import pytz

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ pandas –æ DBAPI2 connection
warnings.filterwarnings('ignore', message='pandas only supports SQLAlchemy connectable')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from indicators.database import DatabaseConnection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BYBIT_API_BASE = "https://api.bybit.com"
BYBIT_API_ENDPOINT = "/v5/market/account-ratio"
EARLIEST_DATA_DATE = datetime(2020, 7, 20, tzinfo=pytz.UTC)  # –°–∞–º–∞—è —Ä–∞–Ω–Ω—è—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –¥–∞—Ç–∞


class LongShortRatioLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ Long/Short Ratio –æ—Ç Bybit"""

    def __init__(self, symbol: str, timeframe: str, config: dict):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ Long/Short Ratio

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º (1m, 15m, 1h)
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ indicators_config.yaml
        """
        self.symbol = symbol
        self.timeframe = timeframe
        self.timeframe_minutes = self._parse_timeframe(timeframe)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        ratio_config = config['indicators']['long_short_ratio']
        self.batch_size = ratio_config.get('batch_size', 1000)
        self.api_retry_attempts = ratio_config.get('api_retry_attempts', 3)
        self.api_retry_delay = ratio_config.get('api_retry_delay', 2)

        # –î–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ)
        self.symbol_progress = ""

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        self.db = DatabaseConnection()
        self.indicators_table = f"indicators_bybit_futures_{timeframe}"

        # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è API Bybit
        self.api_period_map = {
            '1m': None,  # API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 1m
            '15m': '15min',
            '1h': '1h'
        }

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω LongShortRatioLoader –¥–ª—è {symbol} –Ω–∞ {timeframe}")

    def _parse_timeframe(self, tf: str) -> int:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤ –º–∏–Ω—É—Ç—ã

        Args:
            tf: –¢–∞–π–º—Ñ—Ä–µ–π–º (1m, 15m, 1h, etc.)

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
        """
        if tf.endswith('m'):
            return int(tf[:-1])
        elif tf.endswith('h'):
            return int(tf[:-1]) * 60
        elif tf.endswith('d'):
            return int(tf[:-1]) * 1440
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {tf}")

    def ensure_columns_exist(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ Long/Short Ratio –≤ —Ç–∞–±–ª–∏—Ü–µ indicators"""

        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–ª–æ–Ω–æ–∫ Long/Short Ratio –≤ —Ç–∞–±–ª–∏—Ü–µ...")

        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
                cur.execute(f"""
                    SELECT column_name
                    FROM information_schema.columns
                    WHERE table_name = '{self.indicators_table}'
                """)
                existing_columns = {row[0] for row in cur.fetchall()}

                # –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
                columns_to_add = []
                required_columns = {
                    'long_short_buy_ratio': 'DECIMAL(10,6)',
                    'long_short_sell_ratio': 'DECIMAL(10,6)',
                    'long_short_ratio': 'DECIMAL(10,6)'
                }

                for col_name, col_type in required_columns.items():
                    if col_name not in existing_columns:
                        columns_to_add.append(f'{col_name} {col_type}')
                        logger.info(f"  - {col_name} (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)")

                # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if columns_to_add:
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ {len(columns_to_add)} –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫...")

                    for col_def in columns_to_add:
                        col_name = col_def.split()[0]
                        sql = f"ALTER TABLE {self.indicators_table} ADD COLUMN IF NOT EXISTS {col_def}"
                        cur.execute(sql)
                        logger.info(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {col_name}")

                    conn.commit()
                    logger.info("‚úÖ –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ Long/Short Ratio —Å–æ–∑–¥–∞–Ω—ã")
                else:
                    logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")

    def get_date_range(self):
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

        Returns:
            tuple: (start_date, end_date) –≤ UTC
        """

        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É Long/Short Ratio –≤ indicators —Ç–∞–±–ª–∏—Ü–µ
                cur.execute(f"""
                    SELECT MAX(timestamp)
                    FROM {self.indicators_table}
                    WHERE symbol = %s AND long_short_ratio IS NOT NULL
                """, (self.symbol,))

                last_ratio_date = cur.fetchone()[0]

                # 2. –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ indicators —Ç–∞–±–ª–∏—Ü–µ (–¥–ª—è end_date)
                cur.execute(f"""
                    SELECT MAX(timestamp)
                    FROM {self.indicators_table}
                    WHERE symbol = %s
                """, (self.symbol,))

                max_indicator_date = cur.fetchone()[0]

                if max_indicator_date is None:
                    logger.warning(f"‚ö†Ô∏è  –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è {self.symbol} –≤ {self.indicators_table}")
                    return None, None

                # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º start_date
                if last_ratio_date is None:
                    # –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –Ω–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–∞—Ç—ã –∏–ª–∏ –Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö
                    start_date = max(EARLIEST_DATA_DATE, max_indicator_date - timedelta(days=365*5))
                    logger.info(f"üìÖ –î–∞–Ω–Ω—ã—Ö Long/Short Ratio –Ω–µ—Ç. –ù–∞—á–∏–Ω–∞–µ–º —Å: {start_date}")
                else:
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã
                    start_date = last_ratio_date + timedelta(minutes=self.timeframe_minutes)
                    logger.info(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ Long/Short Ratio: {last_ratio_date}")
                    logger.info(f"‚ñ∂Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å: {start_date}")

                # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º end_date (–ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–≤–µ—á–∞)
                end_date = max_indicator_date

                # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–æ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
                if self.timeframe == '1m':
                    end_date = end_date.replace(second=0, microsecond=0)
                elif self.timeframe == '15m':
                    minutes = (end_date.minute // 15) * 15
                    end_date = end_date.replace(minute=minutes, second=0, microsecond=0)
                elif self.timeframe == '1h':
                    end_date = end_date.replace(minute=0, second=0, microsecond=0)

                logger.info(f"üìÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ indicators: {max_indicator_date}")
                logger.info(f"‚è∏Ô∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ end_date –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–≤–µ—á–∏: {end_date}")

                return start_date, end_date

    def fetch_from_bybit_api(self, start_time: datetime, end_time: datetime) -> list:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Long/Short Ratio –æ—Ç Bybit API

        Args:
            start_time: –ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (UTC)
            end_time: –ö–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (UTC)

        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ [{timestamp, buyRatio, sellRatio}, ...]
        """

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        start_ms = int(start_time.timestamp() * 1000)
        end_ms = int(end_time.timestamp() * 1000)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            'category': 'linear',
            'symbol': self.symbol,
            'period': self.api_period_map[self.timeframe],
            'limit': self.batch_size,
            'startTime': start_ms,
            'endTime': end_ms
        }

        url = f"{BYBIT_API_BASE}{BYBIT_API_ENDPOINT}"

        # –ü–æ–ø—ã—Ç–∫–∏ —Å retry
        for attempt in range(self.api_retry_attempts):
            try:
                response = requests.get(url, params=params, timeout=30)
                response.raise_for_status()

                data = response.json()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
                if data.get('retCode') != 0:
                    logger.error(f"API Error: {data.get('retMsg')}")
                    return []

                result_list = data.get('result', {}).get('list', [])

                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result_list)} –∑–∞–ø–∏—Å–µ–π –æ—Ç API")
                return result_list

            except requests.exceptions.RequestException as e:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.api_retry_attempts} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt < self.api_retry_attempts - 1:
                    time.sleep(self.api_retry_delay)
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ {self.api_retry_attempts} –ø–æ–ø—ã—Ç–æ–∫")
                    return []

        return []

    def save_to_db(self, data: list):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ indicators —Ç–∞–±–ª–∏—Ü—É

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç INSERT...ON CONFLICT –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π.
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–ø–∏—Å–∏, –≥–¥–µ long_short_ratio IS NULL.

        Args:
            data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç API
        """

        if not data:
            return

        inserted_count = 0
        updated_count = 0

        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                for record in data:
                    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
                    timestamp_ms = int(record['timestamp'])
                    timestamp = datetime.fromtimestamp(timestamp_ms / 1000, tz=pytz.UTC)
                    buy_ratio = float(record['buyRatio'])
                    sell_ratio = float(record['sellRatio'])

                    # –†–∞—Å—á–µ—Ç Long/Short Ratio (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å)
                    if sell_ratio > 0:
                        ratio = buy_ratio / sell_ratio
                    else:
                        ratio = None

                    # INSERT...ON CONFLICT –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
                    sql = f"""
                        INSERT INTO {self.indicators_table}
                            (timestamp, symbol, long_short_buy_ratio, long_short_sell_ratio, long_short_ratio)
                        VALUES (%s, %s, %s, %s, %s)
                        ON CONFLICT (timestamp, symbol)
                        DO UPDATE SET
                            long_short_buy_ratio = EXCLUDED.long_short_buy_ratio,
                            long_short_sell_ratio = EXCLUDED.long_short_sell_ratio,
                            long_short_ratio = EXCLUDED.long_short_ratio
                        WHERE {self.indicators_table}.long_short_ratio IS NULL
                    """

                    cur.execute(sql, (timestamp, self.symbol, buy_ratio, sell_ratio, ratio))

                    if cur.rowcount > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —ç—Ç–æ –≤—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        # rowcount = 1 –¥–ª—è INSERT, 2 –¥–ª—è UPDATE –≤ PostgreSQL
                        if cur.rowcount == 1:
                            inserted_count += 1
                        else:
                            updated_count += 1

                conn.commit()

        if inserted_count > 0 or updated_count > 0:
            logger.debug(f"–í—Å—Ç–∞–≤–ª–µ–Ω–æ: {inserted_count}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count} –∑–∞–ø–∏—Å–µ–π –≤ –ë–î")

    def set_null_for_existing_records(self):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ NULL –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ 1m

        API Bybit –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ 1m –¥–ª—è Long/Short Ratio.
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NULL —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π (–Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ).

        –õ–æ–≥–∏–∫–∞:
        1. –ù–∞—Ö–æ–¥–∏–º MAX(timestamp) –≤ —Ç–∞–±–ª–∏—Ü–µ (–ø–æ—Å–ª–µ–¥–Ω—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å)
        2. –ù–∞—Ö–æ–¥–∏–º MAX(timestamp) –≥–¥–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã NULL (–ø–æ—Å–ª–µ–¥–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è)
        3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NULL —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–µ–π –º–µ–∂–¥—É –Ω–∏–º–∏
        """

        logger.info("")
        logger.info("=" * 80)
        logger.info(f"üìä {self.symbol} {self.symbol_progress} Long/Short Ratio - 1m (NULL)")
        logger.info("=" * 80)
        logger.info("‚ö†Ô∏è  API Bybit –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ 1m –¥–ª—è Long/Short Ratio")

        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                # 1. –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ –≤–æ–æ–±—â–µ
                cur.execute(f"""
                    SELECT MAX(timestamp)
                    FROM {self.indicators_table}
                    WHERE symbol = %s
                """, (self.symbol,))

                max_timestamp = cur.fetchone()[0]

                if max_timestamp is None:
                    logger.warning(f"‚ö†Ô∏è  –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è {self.symbol} –≤ {self.indicators_table}")
                    logger.info("")
                    return

                # 2. –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å (–≥–¥–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã NULL)
                cur.execute(f"""
                    SELECT MAX(timestamp)
                    FROM {self.indicators_table}
                    WHERE symbol = %s
                      AND long_short_buy_ratio IS NULL
                      AND long_short_sell_ratio IS NULL
                      AND long_short_ratio IS NULL
                """, (self.symbol,))

                last_null_timestamp = cur.fetchone()[0]

                # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
                if last_null_timestamp is None:
                    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
                    logger.info("üìù –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NULL –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π")
                    logger.info(f"üìä –î–∏–∞–ø–∞–∑–æ–Ω: –Ω–∞—á–∞–ª–æ ‚Üí {max_timestamp}")

                    sql = f"""
                        UPDATE {self.indicators_table}
                        SET
                            long_short_buy_ratio = NULL,
                            long_short_sell_ratio = NULL,
                            long_short_ratio = NULL
                        WHERE symbol = %s
                    """
                    cur.execute(sql, (self.symbol,))

                elif last_null_timestamp < max_timestamp:
                    # –ï—Å—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö
                    next_timestamp = last_null_timestamp + timedelta(minutes=1)
                    logger.info(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {last_null_timestamp}")
                    logger.info(f"‚ñ∂Ô∏è  –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏: {next_timestamp} ‚Üí {max_timestamp}")

                    sql = f"""
                        UPDATE {self.indicators_table}
                        SET
                            long_short_buy_ratio = NULL,
                            long_short_sell_ratio = NULL,
                            long_short_ratio = NULL
                        WHERE symbol = %s
                          AND timestamp > %s
                    """
                    cur.execute(sql, (self.symbol, last_null_timestamp))

                else:
                    # last_null_timestamp == max_timestamp - –≤—Å–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                    logger.info(f"‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (–¥–æ {max_timestamp})")
                    logger.info("üìä –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                    logger.info("")
                    return

                updated_rows = cur.rowcount
                conn.commit()

                if updated_rows > 0:
                    logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ NULL –¥–ª—è {updated_rows} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                else:
                    logger.info(f"‚ÑπÔ∏è  –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

                logger.info("")

    def load_ratio_for_symbol(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ Long/Short Ratio –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º?
        if self.api_period_map[self.timeframe] is None:
            logger.warning(f"‚ö†Ô∏è  API Bybit –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ {self.timeframe}")
            self.set_null_for_existing_records()
            return

        logger.info("")
        logger.info("=" * 80)
        logger.info(f"üìä {self.symbol} {self.symbol_progress} –ó–∞–≥—Ä—É–∑–∫–∞ Long/Short Ratio")
        logger.info("=" * 80)
        logger.info(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: {self.timeframe}")
        logger.info(f"üì¶ Batch size: {self.batch_size} –∑–∞–ø–∏—Å–µ–π")

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        self.ensure_columns_exist()

        # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        start_date, end_date = self.get_date_range()

        if start_date is None or end_date is None:
            logger.warning(f"‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {self.symbol}")
            return

        if start_date >= end_date:
            logger.info(f"‚úÖ {self.symbol} - –¥–∞–Ω–Ω—ã–µ Long/Short Ratio –∞–∫—Ç—É–∞–ª—å–Ω—ã")
            return

        # 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
        total_periods = int((end_date - start_date).total_seconds() / (self.timeframe_minutes * 60))
        total_batches = max(1, (total_periods + self.batch_size - 1) // self.batch_size)

        logger.info(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏: {start_date} ‚Üí {end_date}")
        logger.info(f"üìä –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π: ~{total_batches}")
        logger.info("")

        # 4. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–∞–º–∏
        current_start = start_date
        batch_num = 0

        pbar = tqdm(
            total=total_batches,
            desc=f"{self.symbol} {self.symbol_progress} {self.timeframe.upper()} Long/Short Ratio",
            unit="–±–∞—Ç—á"
        )

        while current_start < end_date:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—Ü –±–∞—Ç—á–∞ (–Ω–µ –±–æ–ª–µ–µ batch_size –ø–µ—Ä–∏–æ–¥–æ–≤)
            batch_end = current_start + timedelta(minutes=self.timeframe_minutes * self.batch_size)
            batch_end = min(batch_end, end_date)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç API
            api_data = self.fetch_from_bybit_api(current_start, batch_end)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            if api_data:
                self.save_to_db(api_data)

            batch_num += 1
            pbar.update(1)

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–∞—Ç—á—É
            current_start = batch_end

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è rate limit
            time.sleep(0.1)

        pbar.close()

        logger.info(f"‚úÖ {self.symbol} –∑–∞–≤–µ—Ä—à–µ–Ω")
        logger.info("")


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    logs_dir = Path(__file__).parent / 'logs'
    logs_dir.mkdir(exist_ok=True)

    # –ò–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    log_file = logs_dir / f'long_short_ratio_{timestamp}.log'

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º root logger
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        handlers=[
            logging.FileHandler(log_file, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )

    logger.info(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –õ–æ–≥-—Ñ–∞–π–ª: {log_file}")

    return log_file


def parse_args():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""

    parser = argparse.ArgumentParser(
        description='Long/Short Ratio Loader - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –æ—Ç Bybit',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python3 long_short_ratio_loader.py                                    # –í—Å–µ —Å–∏–º–≤–æ–ª—ã, –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
  python3 long_short_ratio_loader.py --symbol BTCUSDT                   # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª
  python3 long_short_ratio_loader.py --symbol BTCUSDT --timeframe 15m   # –°–∏–º–≤–æ–ª + —Ç–∞–π–º—Ñ—Ä–µ–π–º
  python3 long_short_ratio_loader.py --symbol BTCUSDT ETHUSDT           # –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤

–í–ù–ò–ú–ê–ù–ò–ï: API Bybit –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ 1m. –î–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ 1m –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã NULL –∑–Ω–∞—á–µ–Ω–∏—è.
        """
    )

    parser.add_argument(
        '--symbol',
        nargs='+',
        help='–°–∏–º–≤–æ–ª(—ã) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT ETHUSDT). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—Å–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞'
    )

    parser.add_argument(
        '--timeframe',
        help='–¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (1m, 15m, 1h). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—Å–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞'
    )

    return parser.parse_args()


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ YAML —Ñ–∞–π–ª–∞"""

    config_path = Path(__file__).parent / 'indicators_config.yaml'

    if not config_path.exists():
        raise FileNotFoundError(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")

    with open(config_path, 'r', encoding='utf-8') as f:
        config = yaml.safe_load(f)

    return config


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_file = setup_logging()

    logger.info("=" * 80)
    logger.info("üöÄ Long/Short Ratio Loader - –ó–∞–ø—É—Å–∫")
    logger.info("=" * 80)

    # 2. –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args = parse_args()

    # 3. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        config = load_config()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)

    # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã
    if args.symbol:
        symbols = args.symbol
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {symbols}")
    else:
        symbols = config.get('symbols', [])
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {symbols}")

    if not symbols:
        logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        sys.exit(1)

    # 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
    if args.timeframe:
        timeframes = [args.timeframe]
        logger.info(f"‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {timeframes}")
    else:
        timeframes = config.get('timeframes', ['1m', '15m', '1h'])
        logger.info(f"‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {timeframes}")

    logger.info(f"üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä: Long/Short Ratio")
    logger.info("")

    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    start_time = time.time()

    # 6. –û–±—Ä–∞–±–æ—Ç–∫–∞: —Å–∏–º–≤–æ–ª ‚Üí —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)
    total_symbols = len(symbols)

    for symbol_idx, symbol in enumerate(symbols, start=1):
        logger.info("")
        logger.info("=" * 80)
        logger.info(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–º–≤–æ–ª–∞: {symbol} [{symbol_idx}/{total_symbols}]")
        logger.info("=" * 80)
        logger.info("")

        for timeframe in timeframes:
            try:
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
                loader = LongShortRatioLoader(symbol, timeframe, config)
                loader.symbol_progress = f"[{symbol_idx}/{total_symbols}]"

                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                if timeframe == '1m':
                    # –î–ª—è 1m —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NULL
                    loader.ensure_columns_exist()
                    loader.set_null_for_existing_records()
                else:
                    # –î–ª—è 15m –∏ 1h –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    loader.load_ratio_for_symbol()

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol} –Ω–∞ {timeframe}: {e}", exc_info=True)
                continue

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    elapsed_time = time.time() - start_time
    minutes = int(elapsed_time // 60)
    seconds = int(elapsed_time % 60)

    logger.info("")
    logger.info("=" * 80)
    logger.info("‚úÖ Long/Short Ratio Loader - –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
    logger.info(f"‚è±Ô∏è  Total time: {minutes}m {seconds}s")
    logger.info(f"üìù –õ–æ–≥-—Ñ–∞–π–ª: {log_file}")
    logger.info("=" * 80)


if __name__ == '__main__':
    main()
