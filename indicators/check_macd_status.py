#!/usr/bin/env python3
"""
MACD Status Checker
===================
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
- –ù–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–æ–∫ MACD –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è MACD
- –ü—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö (gaps)
"""

import sys
import os
from datetime import datetime, timedelta
import psycopg2
from typing import Dict, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from indicators.database import DatabaseConnection


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MACD –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
MACD_CONFIGS = [
    {'name': 'classic', 'fast': 12, 'slow': 26, 'signal': 9, 'description': 'Classic MACD - industry standard'},
    {'name': 'crypto', 'fast': 6, 'slow': 13, 'signal': 5, 'description': 'Optimized for crypto volatility'},
    {'name': 'aggressive', 'fast': 5, 'slow': 35, 'signal': 5, 'description': 'Aggressive short/long'},
    {'name': 'balanced', 'fast': 8, 'slow': 17, 'signal': 9, 'description': 'Fast but stable'},
    {'name': 'scalping', 'fast': 5, 'slow': 13, 'signal': 3, 'description': 'Ultra-fast scalping'},
    {'name': 'swing', 'fast': 10, 'slow': 21, 'signal': 9, 'description': 'Medium-term swing'},
    {'name': 'longterm', 'fast': 21, 'slow': 55, 'signal': 13, 'description': 'Long-term trend'},
    {'name': 'ultralong', 'fast': 50, 'slow': 200, 'signal': 9, 'description': 'Very slow trend'},
]


def check_macd_columns(symbol: str = 'BTCUSDT', timeframe: str = '1m'):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–æ–∫ MACD –≤ —Ç–∞–±–ª–∏—Ü–µ

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
    """
    table_name = f'indicators_bybit_futures_{timeframe}'

    print(f"\n{'='*80}")
    print(f"MACD Status for {symbol} ({timeframe})")
    print(f"{'='*80}\n")

    db = DatabaseConnection()

    with db.get_connection() as conn:
        cur = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
        cur.execute(f"""
            SELECT COUNT(*)
            FROM {table_name}
            WHERE symbol = %s
        """, (symbol,))
        total_candles = cur.fetchone()[0]

        print(f"üìä –í—Å–µ–≥–æ —Å–≤–µ—á–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {total_candles:,}\n")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        for config in MACD_CONFIGS:
            fast = config['fast']
            slow = config['slow']
            signal_period = config['signal']

            base_name = f"macd_{fast}_{slow}_{signal_period}"
            columns = {
                'line': f"{base_name}_line",
                'signal': f"{base_name}_signal",
                'histogram': f"{base_name}_histogram"
            }

            print(f"Configuration: {config['name']} ({fast}, {slow}, {signal_period})")
            print(f"Description: {config['description']}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
            column_exists = {}
            for comp_name, col_name in columns.items():
                cur.execute("""
                    SELECT EXISTS (
                        SELECT 1 FROM information_schema.columns
                        WHERE table_schema = 'public'
                        AND table_name = %s
                        AND column_name = %s
                    );
                """, (table_name, col_name))

                column_exists[comp_name] = cur.fetchone()[0]

            # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            if not all(column_exists.values()):
                print(f"  ‚ùå –ö–æ–ª–æ–Ω–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –≤ –ë–î")
                missing = [name for name, exists in column_exists.items() if not exists]
                print(f"  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}")
                print()
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            fill_stats = {}
            for comp_name, col_name in columns.items():
                cur.execute(f"""
                    SELECT COUNT(*)
                    FROM {table_name}
                    WHERE symbol = %s AND {col_name} IS NOT NULL
                """, (symbol,))

                filled = cur.fetchone()[0]
                fill_pct = (filled / total_candles * 100) if total_candles > 0 else 0
                fill_stats[comp_name] = {'filled': filled, 'percent': fill_pct}

            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"  ‚îú‚îÄ Line:      {fill_stats['line']['filled']:,} / {total_candles:,} ({fill_stats['line']['percent']:.1f}%)")
            print(f"  ‚îú‚îÄ Signal:    {fill_stats['signal']['filled']:,} / {total_candles:,} ({fill_stats['signal']['percent']:.1f}%)")
            print(f"  ‚îî‚îÄ Histogram: {fill_stats['histogram']['filled']:,} / {total_candles:,} ({fill_stats['histogram']['percent']:.1f}%)")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            line_col = columns['line']
            signal_col = columns['signal']
            hist_col = columns['histogram']

            cur.execute(f"""
                SELECT timestamp, {line_col}, {signal_col}, {hist_col}
                FROM {table_name}
                WHERE symbol = %s
                  AND {line_col} IS NOT NULL
                ORDER BY timestamp DESC
                LIMIT 1
            """, (symbol,))

            result = cur.fetchone()
            if result:
                ts, line_val, signal_val, hist_val = result
                print(f"\n  Latest values ({ts}):")
                print(f"    Line:      {line_val:.8f}")
                print(f"    Signal:    {signal_val:.8f}")
                print(f"    Histogram: {hist_val:.8f}")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
                if hist_val > 0:
                    trend = "üü¢ Bullish (Histogram > 0)"
                elif hist_val < 0:
                    trend = "üî¥ Bearish (Histogram < 0)"
                else:
                    trend = "‚ö™ Neutral (Histogram = 0)"

                print(f"    Trend: {trend}")

            print()

        cur.close()


def check_macd_gaps(symbol: str = 'BTCUSDT', timeframe: str = '1m', days: int = 30):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö MACD –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    table_name = f'indicators_bybit_futures_{timeframe}'

    print(f"\n{'='*80}")
    print(f"Gap Detection for MACD (last {days} days)")
    print(f"{'='*80}\n")

    db = DatabaseConnection()

    with db.get_connection() as conn:
        cur = conn.cursor()

        # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        start_date = datetime.now() - timedelta(days=days)

        for config in MACD_CONFIGS:
            fast = config['fast']
            slow = config['slow']
            signal_period = config['signal']

            base_name = f"macd_{fast}_{slow}_{signal_period}"
            col_name = f"{base_name}_line"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            cur.execute("""
                SELECT EXISTS (
                    SELECT 1 FROM information_schema.columns
                    WHERE table_schema = 'public'
                    AND table_name = %s
                    AND column_name = %s
                );
            """, (table_name, col_name))

            if not cur.fetchone()[0]:
                continue  # –ö–æ–ª–æ–Ω–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

            # –ò—â–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
            cur.execute(f"""
                WITH candle_data AS (
                    SELECT
                        timestamp,
                        {col_name},
                        LAG({col_name}) OVER (ORDER BY timestamp) as prev_value
                    FROM {table_name}
                    WHERE symbol = %s
                      AND timestamp >= %s
                    ORDER BY timestamp
                )
                SELECT
                    timestamp,
                    {col_name},
                    prev_value
                FROM candle_data
                WHERE {col_name} IS NULL AND prev_value IS NOT NULL
            """, (symbol, start_date))

            gaps = cur.fetchall()

            if gaps:
                print(f"‚ö†Ô∏è  MACD {config['name']} ({fast}, {slow}, {signal_period}): {len(gaps)} gaps found")
                if len(gaps) <= 10:
                    for gap in gaps[:10]:
                        print(f"    {gap[0]}")
            else:
                print(f"‚úÖ MACD {config['name']} ({fast}, {slow}, {signal_period}): No gaps")

        cur.close()


def show_macd_examples(symbol: str = 'BTCUSDT', timeframe: str = '1m', limit: int = 10):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π MACD –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏

    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
    """
    table_name = f'indicators_bybit_futures_{timeframe}'

    print(f"\n{'='*80}")
    print(f"Latest MACD Values (Top {limit})")
    print(f"{'='*80}\n")

    db = DatabaseConnection()

    with db.get_connection() as conn:
        cur = conn.cursor()

        # –ë–µ—Ä—ë–º classic MACD –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        config = MACD_CONFIGS[0]  # classic
        fast = config['fast']
        slow = config['slow']
        signal_period = config['signal']

        base_name = f"macd_{fast}_{slow}_{signal_period}"
        line_col = f"{base_name}_line"
        signal_col = f"{base_name}_signal"
        hist_col = f"{base_name}_histogram"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        cur.execute("""
            SELECT EXISTS (
                SELECT 1 FROM information_schema.columns
                WHERE table_schema = 'public'
                AND table_name = %s
                AND column_name = %s
            );
        """, (table_name, line_col))

        if not cur.fetchone()[0]:
            print(f"‚ùå –ö–æ–ª–æ–Ω–∫–∏ MACD classic –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å close —Ü–µ–Ω–æ–π –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        cur.execute(f"""
            SELECT
                i.timestamp,
                c.close,
                i.{line_col},
                i.{signal_col},
                i.{hist_col}
            FROM {table_name} i
            JOIN candles_bybit_futures_{timeframe} c
                ON i.timestamp = c.timestamp AND i.symbol = c.symbol
            WHERE i.symbol = %s
              AND i.{line_col} IS NOT NULL
            ORDER BY i.timestamp DESC
            LIMIT %s
        """, (symbol, limit))

        results = cur.fetchall()

        if not results:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö MACD")
            return

        print(f"Configuration: {config['name']} ({fast}, {slow}, {signal_period})")
        print(f"\n{'Timestamp':<20} {'Close':<12} {'MACD Line':<15} {'Signal':<15} {'Histogram':<15}")
        print('-' * 80)

        for row in results:
            ts, close, line, signal_val, hist = row
            print(f"{str(ts):<20} {close:<12.2f} {line:<15.8f} {signal_val:<15.8f} {hist:<15.8f}")

        print("\nüí° Hint: –í—ã –º–æ–∂–µ—Ç–µ —Å–≤–µ—Ä–∏—Ç—å —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å Bybit –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á—ë—Ç–æ–≤")

        cur.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description='–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤')
    parser.add_argument('--symbol', type=str, default='BTCUSDT', help='–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞')
    parser.add_argument('--timeframe', type=str, default='1m', help='–¢–∞–π–º—Ñ—Ä–µ–π–º (1m, 15m, 1h)')
    parser.add_argument('--gaps', action='store_true', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--examples', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π')
    parser.add_argument('--days', type=int, default=30, help='–î–Ω–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤')
    parser.add_argument('--limit', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤')

    args = parser.parse_args()

    # –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    check_macd_columns(args.symbol, args.timeframe)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    if args.gaps:
        check_macd_gaps(args.symbol, args.timeframe, args.days)

    # –ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
    if args.examples:
        show_macd_examples(args.symbol, args.timeframe, args.limit)


if __name__ == '__main__':
    main()
