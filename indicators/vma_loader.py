#!/usr/bin/env python3
"""
VMA (Volume Moving Average) Loader with Multi-Timeframe Support
================================================================
–ó–∞–≥—Ä—É–∑—á–∏–∫ VMA –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ (10, 20, 50, 100, 200)
- –ë–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å checkpoint
- –õ—é–±—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ (1m, 15m, 1h)
- –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
- –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–∏–æ–¥–æ–≤ (–º–æ–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å)
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import psycopg2
import psycopg2.extras
from typing import Dict, List, Tuple, Optional
import logging
from tqdm import tqdm
import sys
import os
import warnings
import yaml
import argparse
import time

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è pandas
warnings.filterwarnings('ignore', message='pandas only supports SQLAlchemy')

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from indicators.database import DatabaseConnection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª"""
    log_dir = os.path.join(os.path.dirname(__file__), 'logs')
    os.makedirs(log_dir, exist_ok=True)

    log_filename = os.path.join(log_dir, f'vma_loader_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')

    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler(log_filename, encoding='utf-8')
        ]
    )

    logger = logging.getLogger(__name__)
    logger.info(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –õ–æ–≥-—Ñ–∞–π–ª: {log_filename}")

    return logger

logger = setup_logging()


class VMALoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ VMA (Volume Moving Average) –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""

    def __init__(self, symbol: str = 'BTCUSDT'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        """
        self.db = DatabaseConnection()
        self.symbol = symbol
        self.symbol_progress = ""  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ main() –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.config = self.load_config()

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∞–ø–∏–Ω–≥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –Ω–∞ –º–∏–Ω—É—Ç—ã
        self.timeframe_minutes = self._parse_timeframes()

    def _parse_timeframes(self) -> dict:
        """
        –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–∞—Ä—Å–∏—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: 1m, 5m, 15m, 30m, 1h, 4h, 1d, 1w

        Returns:
            dict: –ú–∞–ø–∏–Ω–≥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
        """
        timeframe_map = {}

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
        timeframes = self.config.get('timeframes', ['1m', '15m', '1h'])

        for tf in timeframes:
            # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ –∏ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
            import re
            match = re.match(r'^(\d+)([mhdw])$', tf.lower())
            if match:
                number = int(match.group(1))
                unit = match.group(2)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã
                if unit == 'm':
                    minutes = number
                elif unit == 'h':
                    minutes = number * 60
                elif unit == 'd':
                    minutes = number * 1440
                elif unit == 'w':
                    minutes = number * 10080  # 7 * 24 * 60
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {tf}")
                    continue

                timeframe_map[tf] = minutes
                logger.debug(f"üìä –¢–∞–π–º—Ñ—Ä–µ–π–º {tf} = {minutes} –º–∏–Ω—É—Ç")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {tf} (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ 1m, 5m, 1h, 1d)")

        if not timeframe_map:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã, –∏—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ")
            timeframe_map = {'1m': 1, '15m': 15, '1h': 60}

        return timeframe_map

    def load_config(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ indicators_config.yaml"""
        config_path = os.path.join(os.path.dirname(__file__), 'indicators_config.yaml')
        if os.path.exists(config_path):
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = yaml.safe_load(f)
                    logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
                    return config
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å indicators_config.yaml: {e}")
                raise
        else:
            logger.error("‚ùå indicators_config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise FileNotFoundError("indicators_config.yaml not found")

    def create_indicators_table(self, timeframe: str) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º (1m, 15m, 1h)

        Returns:
            True –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        table_name = f'indicators_bybit_futures_{timeframe}'

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                cur.execute("""
                    SELECT EXISTS (
                        SELECT 1 FROM information_schema.tables
                        WHERE table_schema = 'public'
                        AND table_name = %s
                    );
                """, (table_name,))

                exists = cur.fetchone()[0]

                if not exists:
                    logger.info(f"üî® –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É {table_name}")

                    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                    create_query = f"""
                    CREATE TABLE {table_name} (
                        timestamp TIMESTAMPTZ NOT NULL,
                        symbol VARCHAR(20) NOT NULL,
                        -- VMA –∫–æ–ª–æ–Ω–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                        PRIMARY KEY (timestamp, symbol)
                    );

                    -- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
                    CREATE INDEX idx_{timeframe}_symbol_timestamp
                    ON {table_name} (symbol, timestamp);

                    CREATE INDEX idx_{timeframe}_timestamp
                    ON {table_name} (timestamp);
                    """

                    cur.execute(create_query)
                    conn.commit()
                    logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —Å–æ–∑–¥–∞–Ω–∞")
                else:
                    logger.info(f"‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

                return True

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
                conn.rollback()
                return False
            finally:
                cur.close()

    def create_vma_columns(self, timeframe: str, periods: List[int]):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è VMA –ø–µ—Ä–∏–æ–¥–æ–≤

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ VMA
        """
        table_name = f'indicators_bybit_futures_{timeframe}'

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            try:
                for period in periods:
                    column_name = f'vma_{period}'

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
                    cur.execute("""
                        SELECT EXISTS (
                            SELECT 1 FROM information_schema.columns
                            WHERE table_schema = 'public'
                            AND table_name = %s
                            AND column_name = %s
                        );
                    """, (table_name, column_name))

                    exists = cur.fetchone()[0]

                    if not exists:
                        logger.info(f"  üìä –°–æ–∑–¥–∞—é –∫–æ–ª–æ–Ω–∫—É {column_name} –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
                        cur.execute(f"""
                            ALTER TABLE {table_name}
                            ADD COLUMN {column_name} DECIMAL(20,8);
                        """)

                conn.commit()
                logger.info(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∏ VMA —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è {table_name}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫: {e}")
                conn.rollback()
            finally:
                cur.close()

    def get_last_vma_date(self, timeframe: str, period: int) -> Optional[datetime]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ VMA

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            period: –ü–µ—Ä–∏–æ–¥ VMA

        Returns:
            –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None
        """
        table_name = f'indicators_bybit_futures_{timeframe}'
        column_name = f'vma_{period}'

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            cur.execute(f"""
                SELECT MAX(timestamp)
                FROM {table_name}
                WHERE symbol = %s AND {column_name} IS NOT NULL
            """, (self.symbol,))

            result = cur.fetchone()
            cur.close()

            return result[0] if result and result[0] else None

    def get_data_date_range(self) -> Tuple[datetime, datetime]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ candles_bybit_futures_1m

        Returns:
            Tuple[min_date, max_date]
        """
        with self.db.get_connection() as conn:
            cur = conn.cursor()

            cur.execute("""
                SELECT MIN(timestamp), MAX(timestamp)
                FROM candles_bybit_futures_1m
                WHERE symbol = %s
            """, (self.symbol,))

            result = cur.fetchone()
            cur.close()

            if not result or result[0] is None:
                raise ValueError(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {self.symbol} –≤ candles_bybit_futures_1m")

            return result[0], result[1]

    def get_last_complete_period(self, current_time: datetime, timeframe: str) -> datetime:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ó–ê–í–ï–†–®–ï–ù–ù–´–ô –ø–µ—Ä–∏–æ–¥

        Args:
            current_time: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º

        Returns:
            Timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        """
        if timeframe == '1m':
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –º–∏–Ω—É—Ç–∞
            return current_time.replace(second=0, microsecond=0) - timedelta(minutes=1)
        elif timeframe == '15m':
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ 15 –º–∏–Ω—É—Ç
            minute = (current_time.minute // 15) * 15
            result = current_time.replace(minute=minute, second=0, microsecond=0)
            if current_time.minute % 15 == 0 and current_time.second == 0:
                result -= timedelta(minutes=15)
            return result
        elif timeframe == '1h':
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —á–∞—Å
            result = current_time.replace(minute=0, second=0, microsecond=0)
            if current_time.minute == 0 and current_time.second == 0:
                result -= timedelta(hours=1)
            return result
        elif timeframe == '1d':
            # –í—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
            return (current_time - timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–∏–Ω—É—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª
            minutes = self.timeframe_minutes.get(timeframe, 60)
            return current_time - timedelta(minutes=minutes)

    def aggregate_candles(self, start_date: datetime, end_date: datetime,
                         timeframe: str) -> pd.DataFrame:
        """
        –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç 1m —Å–≤–µ—á–∏ –≤ –Ω—É–∂–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º, —Å—É–º–º–∏—Ä—É—è –æ–±—ä–µ–º—ã

        Args:
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
            timeframe: –¶–µ–ª–µ–≤–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º

        Returns:
            DataFrame —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (timestamp, symbol, volume)
        """
        minutes = self.timeframe_minutes[timeframe]

        with self.db.get_connection() as conn:
            # –î–ª—è 1m –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if timeframe == '1m':
                query = """
                    SELECT timestamp, symbol, volume
                    FROM candles_bybit_futures_1m
                    WHERE symbol = %s AND timestamp >= %s AND timestamp < %s
                    ORDER BY timestamp
                """
                df = pd.read_sql_query(query, conn, params=(self.symbol, start_date, end_date))
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –°–£–ú–ú–£ –æ–±—ä–µ–º–æ–≤
                query = f"""
                    WITH time_groups AS (
                        SELECT
                            date_trunc('hour', timestamp) +
                            INTERVAL '{minutes} minutes' * (EXTRACT(MINUTE FROM timestamp)::integer / {minutes}) as period_start,
                            volume,
                            symbol
                        FROM candles_bybit_futures_1m
                        WHERE symbol = %s AND timestamp >= %s AND timestamp < %s
                    )
                    SELECT
                        period_start + INTERVAL '{minutes} minutes' as timestamp,
                        symbol,
                        SUM(volume) as volume
                    FROM time_groups
                    GROUP BY period_start, symbol
                    ORDER BY period_start
                """
                df = pd.read_sql_query(query, conn, params=(self.symbol, start_date, end_date))

            if df.empty:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {self.symbol} –≤ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}")
                return pd.DataFrame()

            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ timestamp - —ç—Ç–æ datetime
            df['timestamp'] = pd.to_datetime(df['timestamp'])

            return df

    def save_single_column_to_db(self, df: pd.DataFrame, table_name: str, period: int):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É VMA –≤ –ë–î

        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
            table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
            period: –ü–µ—Ä–∏–æ–¥ VMA
        """
        column_name = f'vma_{period}'

        with self.db.get_connection() as conn:
            cur = conn.cursor()

            try:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                records = []
                for _, row in df.iterrows():
                    value = row[column_name] if pd.notna(row[column_name]) else None
                    records.append((row['timestamp'], self.symbol, value))

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
                insert_query = f"""
                    INSERT INTO {table_name} (timestamp, symbol, {column_name})
                    VALUES (%s, %s, %s)
                    ON CONFLICT (timestamp, symbol) DO UPDATE SET
                    {column_name} = EXCLUDED.{column_name};
                """

                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—Ç–∞–≤–∫—É –±–∞—Ç—á–∞–º–∏
                psycopg2.extras.execute_batch(cur, insert_query, records, page_size=1000)
                conn.commit()

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
                conn.rollback()
                raise
            finally:
                cur.close()

    def calculate_and_save_vma(self, timeframe: str, periods: List[int],
                               batch_days: int = 1):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç VMA –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            periods: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ VMA
            batch_days: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö
        """
        table_name = f'indicators_bybit_futures_{timeframe}'

        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        min_date, max_date = self.get_data_date_range()
        logger.info(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î: {min_date} - {max_date}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        end_date = self.get_last_complete_period(max_date, timeframe)
        logger.info(f"üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {end_date}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–µ—Ä–∏–æ–¥ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û
        for idx, period in enumerate(periods):
            logger.info(f"\n{'‚îÄ'*50}")
            logger.info(f"üìà –û–±—Ä–∞–±–æ—Ç–∫–∞ VMA_{period} ({idx + 1}/{len(periods)}):")
            logger.info(f"{'‚îÄ'*50}")

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –¥–ª—è –≠–¢–û–ì–û –ø–µ—Ä–∏–æ–¥–∞
            last_date = self.get_last_vma_date(timeframe, period)

            if last_date is None:
                # –ö–æ–ª–æ–Ω–∫–∞ –ø—É—Å—Ç–∞—è, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö
                start_date = min_date
                logger.info(f"  üìù VMA_{period}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥—Ä—É–∑–∫–∞ —Å –Ω–∞—á–∞–ª–∞)")
            else:
                # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å (–Ω–∞ —Å–ª—É—á–∞–π –æ–±—Ä—ã–≤–∞)
                start_date = last_date.replace(hour=0, minute=0, second=0, microsecond=0)
                days_behind = (end_date - last_date).days
                logger.info(f"  ‚úÖ VMA_{period}: –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ {last_date.strftime('%Y-%m-%d %H:%M')} "
                           f"(–æ—Ç—Å—Ç–∞–µ—Ç –Ω–∞ {days_behind} –¥–Ω–µ–π)")

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π
            total_time_diff = end_date - start_date
            total_days = total_time_diff.days + 1
            total_batches = (total_days + batch_days - 1) // batch_days

            logger.info(f"\nüìä –ü–ª–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ VMA_{period}:")
            logger.info(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {total_days} –¥–Ω–µ–π ({start_date.strftime('%Y-%m-%d')} ‚Üí {end_date.strftime('%Y-%m-%d')})")
            logger.info(f"   ‚Ä¢ –ë–∞—Ç—á–µ–π: {total_batches} –ø–æ {batch_days} –¥–Ω–µ–π")
            logger.info(f"   ‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")

            # –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            current_date = start_date
            total_records = 0
            processed_batches = 0

            with tqdm(total=total_batches,
                     desc=f"{self.symbol} {self.symbol_progress} VMA-{period} {timeframe.upper()}",
                     unit="batch",
                     bar_format='{desc}: {percentage:3.0f}%|{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]') as pbar:

                while current_date <= end_date:
                    batch_end = min(current_date + timedelta(days=batch_days), end_date)

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–ø–∞—Å–æ–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ VMA (lookback)
                    lookback = timedelta(minutes=period * self.timeframe_minutes[timeframe])
                    data_start = current_date - lookback

                    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    df = self.aggregate_candles(data_start, batch_end, timeframe)

                    if df.empty:
                        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞—Ç—á–∞ {current_date} - {batch_end}")
                        current_date = batch_end
                        pbar.update(1)
                        continue

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º VMA –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                    df[f'vma_{period}'] = df['volume'].rolling(window=period, min_periods=period).mean()

                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (—É–±–∏—Ä–∞–µ–º lookback –¥–∞–Ω–Ω—ã–µ)
                    df_to_save = df[df['timestamp'] >= current_date].copy()

                    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ VMA = NaN (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)
                    df_to_save = df_to_save.dropna(subset=[f'vma_{period}'])

                    if not df_to_save.empty:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —Å retry
                        for attempt in range(3):
                            try:
                                self.save_single_column_to_db(df_to_save, table_name, period)
                                total_records += len(df_to_save)
                                break
                            except Exception as e:
                                if attempt == 2:
                                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å VMA_{period} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫: {e}")
                                    raise
                                logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {2 ** attempt} —Å–µ–∫...")
                                time.sleep(2 ** attempt)

                    processed_batches += 1
                    pbar.update(1)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    if not df_to_save.empty:
                        progress_pct = (processed_batches / total_batches) * 100
                        pbar.set_postfix({
                            '–∑–∞–ø–∏—Å–µ–π': f'{total_records:,}',
                            '–ø–æ—Å–ª–µ–¥–Ω—è—è': df_to_save['timestamp'].max().strftime('%Y-%m-%d %H:%M')
                        })

                    current_date = batch_end

                    # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                    if current_date >= end_date:
                        break

            logger.info(f"‚úÖ VMA_{period}: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_records:,} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {timeframe}")

    def process_timeframe(self, timeframe: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º

        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        logger.info(f"\n{'‚ïê'*50}")
        logger.info(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
        logger.info(f"{'‚ïê'*50}")

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        vma_config = self.config.get('indicators', {}).get('vma', {})
        if not vma_config.get('enabled', False):
            logger.info(f"‚è≠Ô∏è VMA –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return

        periods = vma_config.get('periods', [])
        if not periods:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–∏–æ–¥—ã VMA")
            return

        batch_days = vma_config.get('batch_days', 1)

        logger.info(f"üìä –ü–µ—Ä–∏–æ–¥—ã VMA: {periods}")
        logger.info(f"üìÖ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_days} –¥–µ–Ω—å/–¥–Ω–µ–π")

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not self.create_indicators_table(timeframe):
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è {timeframe}")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è VMA
        self.create_vma_columns(timeframe, periods)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º VMA
        self.calculate_and_save_vma(timeframe, periods, batch_days)

        logger.info(f"\n‚úÖ –¢–∞–π–º—Ñ—Ä–µ–π–º {timeframe} –∑–∞–≤–µ—Ä—à–µ–Ω: {len(periods)} –ø–µ—Ä–∏–æ–¥–æ–≤")

    def run(self, timeframes: Optional[List[str]] = None):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤

        Args:
            timeframes: –°–ø–∏—Å–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∏–ª–∏ None –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        """
        if not timeframes:
            timeframes = self.config.get('timeframes', ['1m'])

        logger.info(f"\n{'‚ïê'*60}")
        logger.info(f"üöÄ VMA Loader: –ó–∞–ø—É—Å–∫ –¥–ª—è {self.symbol}")
        logger.info(f"üìã –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(timeframes)}")
        logger.info(f"{'‚ïê'*60}")

        for timeframe in timeframes:
            if timeframe not in self.timeframe_minutes:
                logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
                continue

            self.process_timeframe(timeframe)

        logger.info(f"\n{'‚ïê'*60}")
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
        logger.info(f"{'‚ïê'*60}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description='VMA (Volume Moving Average) Loader')
    parser.add_argument('--symbol', type=str, default=None,
                      help='–û–¥–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)')
    parser.add_argument('--symbols', type=str, default=None,
                      help='–ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT,ETHUSDT)')
    parser.add_argument('--timeframes', type=str, default=None,
                      help='–¢–∞–π–º—Ñ—Ä–µ–π–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (1m,15m,1h) –∏–ª–∏ –ø—É—Å—Ç–æ –¥–ª—è –≤—Å–µ—Ö –∏–∑ config.yaml')
    parser.add_argument('--timeframe', type=str, default=None,
                      help='–û–¥–∏–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)')
    parser.add_argument('--batch-days', type=int, default=None,
                      help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config.yaml)')
    parser.add_argument('--periods', type=str, default=None,
                      help='–ü–µ—Ä–∏–æ–¥—ã VMA —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (10,20,50)')

    args = parser.parse_args()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if args.symbols:
        symbols = [s.strip() for s in args.symbols.split(',')]
    elif args.symbol:
        symbols = [args.symbol]
    else:
        config_path = os.path.join(os.path.dirname(__file__), 'indicators_config.yaml')
        if os.path.exists(config_path):
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
                symbols = config.get('symbols', ['BTCUSDT'])
        else:
            symbols = ['BTCUSDT']

    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω --timeframe, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if args.timeframe:
        timeframes = [args.timeframe]
    elif args.timeframes:
        timeframes = [tf.strip() for tf in args.timeframes.split(',')]
    else:
        timeframes = None  # –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∏–∑ config.yaml

    logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤: {symbols}")

    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    start_time = time.time()

    # –¶–∏–∫–ª –ø–æ –≤—Å–µ–º —Å–∏–º–≤–æ–ª–∞–º
    total_symbols = len(symbols)
    for idx, symbol in enumerate(symbols, 1):
        logger.info(f"\n{'='*80}")
        logger.info(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–º–≤–æ–ª–∞: {symbol} [{idx}/{total_symbols}]")
        logger.info(f"{'='*80}\n")

        try:
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
            loader = VMALoader(symbol=symbol)
            loader.symbol_progress = f"[{idx}/{total_symbols}] "

            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
            if timeframes and len(timeframes) == 1:
                loader.process_timeframe(timeframes[0])
            else:
                loader.run(timeframes=timeframes)

            logger.info(f"\n‚úÖ –°–∏–º–≤–æ–ª {symbol} –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n")
        except KeyboardInterrupt:
            logger.info("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ —Å —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞.")
            sys.exit(0)
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
            import traceback
            traceback.print_exc()
            continue

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    elapsed_time = time.time() - start_time
    minutes = int(elapsed_time // 60)
    seconds = int(elapsed_time % 60)

    logger.info(f"\nüéâ –í—Å–µ —Å–∏–º–≤–æ–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {symbols}")
    logger.info(f"‚è±Ô∏è  Total time: {minutes}m {seconds}s")


if __name__ == "__main__":
    main()
