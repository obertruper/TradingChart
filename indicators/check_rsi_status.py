#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ RSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import psycopg2
import yaml
from datetime import datetime
import os

def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = os.path.join(os.path.dirname(__file__), 'indicators_config.yaml')
    with open(config_path, 'r') as f:
        config = yaml.safe_load(f)

    db_config = config['database']

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = psycopg2.connect(
        host=db_config['host'],
        port=db_config['port'],
        database=db_config['database'],
        user=db_config['user'],
        password=db_config['password']
    )
    cur = conn.cursor()

    print("="*80)
    print("üìä –°–¢–ê–¢–£–° RSI –ò–ù–î–ò–ö–ê–¢–û–†–û–í –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("="*80)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    cur.execute("""
        SELECT table_name
        FROM information_schema.tables
        WHERE table_name LIKE 'indicators_bybit_futures_%'
        ORDER BY table_name
    """)

    tables = [row[0] for row in cur.fetchall()]

    for table in tables:
        timeframe = table.replace('indicators_bybit_futures_', '')
        print(f"\nüïê –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
        print("-"*60)

        # –ü–æ–ª—É—á–∞–µ–º RSI –∫–æ–ª–æ–Ω–∫–∏
        cur.execute("""
            SELECT column_name
            FROM information_schema.columns
            WHERE table_name = %s AND column_name LIKE 'rsi_%%'
            ORDER BY column_name
        """, (table,))

        rsi_columns = [row[0] for row in cur.fetchall()]

        if not rsi_columns:
            print("  ‚ùå RSI –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            continue

        print(f"  üìà RSI –ø–µ—Ä–∏–æ–¥—ã: {', '.join([col.replace('rsi_', '') for col in rsi_columns])}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è BTCUSDT
        cur.execute(f"""
            SELECT
                COUNT(*) as total,
                MIN(timestamp) as first_date,
                MAX(timestamp) as last_date,
                {', '.join([f'COUNT({col}) as {col}_count' for col in rsi_columns])}
            FROM {table}
            WHERE symbol = 'BTCUSDT'
        """)

        result = cur.fetchone()
        if result and result[0] > 0:
            print(f"\n  üìä –°–∏–º–≤–æ–ª: BTCUSDT")
            print(f"    –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {result[0]:,}")
            print(f"    –ü–µ—Ä–∏–æ–¥: {result[1]} - {result[2]}")
            print(f"\n    –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å RSI:")

            for i, col in enumerate(rsi_columns, start=3):
                count = result[i]
                percent = (count / result[0]) * 100 if result[0] > 0 else 0
                status = "‚úÖ" if percent > 95 else "‚ö†Ô∏è" if percent > 50 else "‚ùå"
                print(f"      {rsi_columns[i-3]}: {count:,}/{result[0]:,} ({percent:.1f}%) {status}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è RSI_14
            if 'rsi_14' in rsi_columns:
                cur.execute(f"""
                    SELECT timestamp, rsi_14, rsi_7, rsi_25
                    FROM {table}
                    WHERE symbol = 'BTCUSDT' AND rsi_14 IS NOT NULL
                    ORDER BY timestamp DESC
                    LIMIT 5
                """)

                last_values = cur.fetchall()
                if last_values:
                    print(f"\n    –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è RSI:")
                    print(f"    {'Timestamp':<20} | {'RSI_14':>8} | {'RSI_7':>8} | {'RSI_25':>8} | –°–æ—Å—Ç–æ—è–Ω–∏–µ")
                    print(f"    {'-'*75}")

                    for row in last_values:
                        timestamp, rsi_14, rsi_7, rsi_25 = row

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞
                        if rsi_14:
                            if rsi_14 > 70:
                                state = "üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å"
                            elif rsi_14 < 30:
                                state = "üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å"
                            elif 45 <= rsi_14 <= 55:
                                state = "‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞"
                            elif rsi_14 > 55:
                                state = "üü° –ë—ã—á–∏–π –∏–º–ø—É–ª—å—Å"
                            else:
                                state = "üîµ –ú–µ–¥–≤–µ–∂–∏–π –∏–º–ø—É–ª—å—Å"
                        else:
                            state = "‚ûñ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

                        print(f"    {str(timestamp)[:19]:<20} | {float(rsi_14) if rsi_14 else 0:>8.2f} | {float(rsi_7) if rsi_7 else 0:>8.2f} | {float(rsi_25) if rsi_25 else 0:>8.2f} | {state}")
        else:
            print(f"  ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è BTCUSDT")

    print("\n" + "="*80)
    print("üìà –°–í–û–î–ö–ê –ü–û RSI")
    print("="*80)

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cur.execute("""
        SELECT
            '1m' as tf,
            COUNT(*) FILTER (WHERE rsi_14 IS NOT NULL) as rsi_14_count,
            MIN(CASE WHEN rsi_14 IS NOT NULL THEN timestamp END) as first_rsi,
            MAX(CASE WHEN rsi_14 IS NOT NULL THEN timestamp END) as last_rsi
        FROM indicators_bybit_futures_1m
        WHERE symbol = 'BTCUSDT'
        UNION ALL
        SELECT
            '15m' as tf,
            COUNT(*) FILTER (WHERE rsi_14 IS NOT NULL) as rsi_14_count,
            MIN(CASE WHEN rsi_14 IS NOT NULL THEN timestamp END) as first_rsi,
            MAX(CASE WHEN rsi_14 IS NOT NULL THEN timestamp END) as last_rsi
        FROM indicators_bybit_futures_15m
        WHERE symbol = 'BTCUSDT'
        UNION ALL
        SELECT
            '1h' as tf,
            COUNT(*) FILTER (WHERE rsi_14 IS NOT NULL) as rsi_14_count,
            MIN(CASE WHEN rsi_14 IS NOT NULL THEN timestamp END) as first_rsi,
            MAX(CASE WHEN rsi_14 IS NOT NULL THEN timestamp END) as last_rsi
        FROM indicators_bybit_futures_1h
        WHERE symbol = 'BTCUSDT'
    """)

    results = cur.fetchall()

    print("\nRSI_14 –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:")
    print(f"{'–¢–∞–π–º—Ñ—Ä–µ–π–º':<12} | {'–ó–∞–ø–∏—Å–µ–π —Å RSI':>15} | {'–ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞':>20} | {'–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞':>20}")
    print("-"*80)

    for row in results:
        tf, count, first_date, last_date = row
        if count and count > 0:
            print(f"{tf:<12} | {count:>15,} | {str(first_date)[:19]:>20} | {str(last_date)[:19]:>20}")
        else:
            print(f"{tf:<12} | {'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':>15} | {'-':>20} | {'-':>20}")

    conn.close()

    print("\nüí° –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ RSI:")
    print("   python indicators/rsi_loader.py --timeframe 1m")
    print("   python indicators/rsi_loader.py --timeframe 15m")
    print("   python indicators/rsi_loader.py --timeframe 1h")

if __name__ == "__main__":
    main()