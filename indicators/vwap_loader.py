#!/usr/bin/env python3
"""
VWAP (Volume Weighted Average Price) Loader

–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ VWAP –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.

VWAP = Œ£(Typical Price √ó Volume) / Œ£(Volume)
–≥–¥–µ Typical Price = (High + Low + Close) / 3

–†–µ–∞–ª–∏–∑—É–µ—Ç –¥–≤–∞ —Ç–∏–ø–∞ VWAP:
1. Daily VWAP - —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 UTC
2. Rolling VWAP - —Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞

Usage:
    python3 vwap_loader.py                                    # –í—Å–µ —Å–∏–º–≤–æ–ª—ã, –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
    python3 vwap_loader.py --symbol BTCUSDT                   # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª
    python3 vwap_loader.py --symbol BTCUSDT --timeframe 1m    # –°–∏–º–≤–æ–ª + —Ç–∞–π–º—Ñ—Ä–µ–π–º
    python3 vwap_loader.py --batch-days 7                     # –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
"""

import sys
import logging
import argparse
import warnings
from pathlib import Path
from datetime import datetime, timedelta
import yaml
import pandas as pd
import numpy as np
from tqdm import tqdm

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ pandas –æ DBAPI2 connection
warnings.filterwarnings('ignore', message='pandas only supports SQLAlchemy connectable')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from indicators.database import DatabaseConnection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class VWAPLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ VWAP –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, symbol: str, timeframe: str, config: dict):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ VWAP

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º (1m, 15m, 1h)
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ indicators_config.yaml
        """
        self.symbol = symbol
        self.timeframe = timeframe
        self.timeframe_minutes = self._parse_timeframe(timeframe)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        vwap_config = config['indicators']['vwap']
        self.daily_enabled = vwap_config['daily_enabled']
        self.rolling_periods = vwap_config['rolling_periods']
        self.batch_days = vwap_config.get('batch_days', 1)
        self.lookback_multiplier = vwap_config.get('lookback_multiplier', 2)

        # –í—ã—á–∏—Å–ª—è–µ–º lookback
        max_period = max(self.rolling_periods)
        self.lookback_periods = max_period * self.lookback_multiplier

        # –î–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ)
        self.symbol_progress = ""

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        self.db = DatabaseConnection()
        self.candles_table = f"candles_bybit_futures_{timeframe}"
        self.indicators_table = f"indicators_bybit_futures_{timeframe}"

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω VWAPLoader –¥–ª—è {symbol} –Ω–∞ {timeframe}")
        logger.info(f"Daily VWAP: {self.daily_enabled}, Rolling –ø–µ—Ä–∏–æ–¥—ã: {len(self.rolling_periods)}")
        logger.info(f"Lookback: {self.lookback_periods} –ø–µ—Ä–∏–æ–¥–æ–≤")

    def _parse_timeframe(self, tf: str) -> int:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤ –º–∏–Ω—É—Ç—ã

        Args:
            tf: –¢–∞–π–º—Ñ—Ä–µ–π–º (1m, 15m, 1h, etc.)

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
        """
        if tf.endswith('m'):
            return int(tf[:-1])
        elif tf.endswith('h'):
            return int(tf[:-1]) * 60
        elif tf.endswith('d'):
            return int(tf[:-1]) * 1440
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {tf}")

    def ensure_columns_exist(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ VWAP –≤ —Ç–∞–±–ª–∏—Ü–µ indicators"""

        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–ª–æ–Ω–æ–∫ VWAP –≤ —Ç–∞–±–ª–∏—Ü–µ...")

        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
                cur.execute(f"""
                    SELECT column_name
                    FROM information_schema.columns
                    WHERE table_name = '{self.indicators_table}'
                """)
                existing_columns = {row[0] for row in cur.fetchall()}

                # –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
                columns_to_add = []

                # Daily VWAP
                if self.daily_enabled and 'vwap_daily' not in existing_columns:
                    columns_to_add.append('vwap_daily DECIMAL(20,8)')
                    logger.info("  - vwap_daily (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)")

                # Rolling VWAP
                for period in self.rolling_periods:
                    col_name = f'vwap_{period}'
                    if col_name not in existing_columns:
                        columns_to_add.append(f'{col_name} DECIMAL(20,8)')
                        logger.info(f"  - {col_name} (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)")

                # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if columns_to_add:
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ {len(columns_to_add)} –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫...")

                    for col_def in columns_to_add:
                        col_name = col_def.split()[0]
                        sql = f"ALTER TABLE {self.indicators_table} ADD COLUMN IF NOT EXISTS {col_def}"
                        cur.execute(sql)
                        logger.info(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {col_name}")

                    conn.commit()
                    logger.info("‚úÖ –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ VWAP —Å–æ–∑–¥–∞–Ω—ã")
                else:
                    logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")

    def get_date_range(self):
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

        Returns:
            tuple: (start_date, end_date) –≤ UTC
        """

        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É VWAP –≤ indicators —Ç–∞–±–ª–∏—Ü–µ
                cur.execute(f"""
                    SELECT MAX(timestamp)
                    FROM {self.indicators_table}
                    WHERE symbol = %s AND vwap_daily IS NOT NULL
                """, (self.symbol,))

                last_vwap_date = cur.fetchone()[0]

                # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö –≤ candles —Ç–∞–±–ª–∏—Ü–µ
                cur.execute(f"""
                    SELECT MIN(timestamp), MAX(timestamp)
                    FROM {self.candles_table}
                    WHERE symbol = %s
                """, (self.symbol,))

                min_candle_date, max_candle_date = cur.fetchone()

                if min_candle_date is None or max_candle_date is None:
                    logger.warning(f"‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {self.symbol} –≤ {self.candles_table}")
                    return None, None

                # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º start_date
                if last_vwap_date is None:
                    # –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞
                    start_date = min_candle_date
                    logger.info(f"üìÖ –î–∞–Ω–Ω—ã—Ö VWAP –Ω–µ—Ç. –ù–∞—á–∏–Ω–∞–µ–º —Å: {start_date}")
                else:
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã
                    start_date = last_vwap_date + timedelta(minutes=self.timeframe_minutes)
                    logger.info(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ VWAP: {last_vwap_date}")
                    logger.info(f"‚ñ∂Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å: {start_date}")

                # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º end_date (–ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–≤–µ—á–∞)
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ª–Ω–æ–π —Å–≤–µ—á–∏ –º–∏–Ω—É—Å 1 –ø–µ—Ä–∏–æ–¥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                end_date = max_candle_date

                # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–æ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
                if self.timeframe == '1m':
                    # –î–ª—è 1m - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ª–Ω–æ–π –º–∏–Ω—É—Ç—ã
                    end_date = end_date.replace(second=0, microsecond=0)
                elif self.timeframe == '15m':
                    # –î–ª—è 15m - –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ 15 –º–∏–Ω—É—Ç
                    minutes = (end_date.minute // 15) * 15
                    end_date = end_date.replace(minute=minutes, second=0, microsecond=0)
                elif self.timeframe == '1h':
                    # –î–ª—è 1h - –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–æ –Ω–∞—á–∞–ª–∞ —á–∞—Å–∞
                    end_date = end_date.replace(minute=0, second=0, microsecond=0)

                logger.info(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î: {min_candle_date} - {max_candle_date}")
                logger.info(f"‚è∏Ô∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ end_date –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–≤–µ—á–∏: {end_date}")

                return start_date, end_date

    def calculate_daily_vwap(self, df: pd.DataFrame) -> pd.Series:
        """
        –†–∞—Å—á–µ—Ç Daily VWAP —Å reset –≤ 00:00 UTC

        Formula:
        - Typical Price (TP) = (High + Low + Close) / 3
        - VWAP = Œ£(TP √ó Volume) / Œ£(Volume)
        - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ, cumsum –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã

        Args:
            df: DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ high, low, close, volume, timestamp

        Returns:
            pd.Series —Å vwap_daily –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å NaN)
        """

        # 1. –í—ã—á–∏—Å–ª—è–µ–º Typical Price
        df['tp'] = (df['high'] + df['low'] + df['close']) / 3
        df['tp_volume'] = df['tp'] * df['volume']

        # 2. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É date (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
        df['date'] = df.index.date

        # 3. –§–∏–ª—å—Ç—Ä—É–µ–º —Å–≤–µ—á–∏ —Å volume > 0
        df_filtered = df[df['volume'] > 0].copy()

        if len(df_filtered) == 0:
            # –í—Å–µ —Å–≤–µ—á–∏ —Å –Ω—É–ª–µ–≤—ã–º –æ–±—ä–µ–º–æ–º
            return pd.Series(np.nan, index=df.index)

        # 4. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –¥–µ–ª–∞–µ–º cumsum –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        df_filtered['cum_tp_volume'] = df_filtered.groupby('date')['tp_volume'].cumsum()
        df_filtered['cum_volume'] = df_filtered.groupby('date')['volume'].cumsum()

        # 5. –í—ã—á–∏—Å–ª—è–µ–º VWAP
        df_filtered['vwap_daily'] = df_filtered['cum_tp_volume'] / df_filtered['cum_volume']

        # 6. –í–æ–∑–≤—Ä–∞—â–∞–µ–º Series —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º (–∑–∞–ø–æ–ª–Ω—è–µ–º NaN –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö)
        return df_filtered['vwap_daily'].reindex(df.index)

    def calculate_rolling_vwap(self, df: pd.DataFrame, period: int) -> pd.Series:
        """
        –†–∞—Å—á–µ—Ç Rolling VWAP –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞

        Formula:
        - VWAP = Œ£(TP √ó Volume)_last_N / Œ£(Volume)_last_N
        - Rolling window —Ä–∞–∑–º–µ—Ä–æ–º period

        Args:
            df: DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ high, low, close, volume
                (tp –∏ tp_volume —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω—ã)
            period: –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤)

        Returns:
            pd.Series —Å vwap_{period} –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        """

        # tp –∏ tp_volume —É–∂–µ –≤—ã—á–∏—Å–ª–µ–Ω—ã –≤ calculate_daily_vwap
        # –ï—Å–ª–∏ –Ω–µ—Ç - –≤—ã—á–∏—Å–ª—è–µ–º
        if 'tp' not in df.columns:
            df['tp'] = (df['high'] + df['low'] + df['close']) / 3
            df['tp_volume'] = df['tp'] * df['volume']

        # Rolling sum –¥–ª—è tp_volume –∏ volume
        # min_periods=1 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ period
        rolling_tp_volume = df['tp_volume'].rolling(window=period, min_periods=1).sum()
        rolling_volume = df['volume'].rolling(window=period, min_periods=1).sum()

        # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        vwap = np.where(
            rolling_volume > 0,
            rolling_tp_volume / rolling_volume,
            np.nan
        )

        # –ü–µ—Ä–≤—ã–µ (period-1) –∑–Ω–∞—á–µ–Ω–∏–π = NULL (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)
        vwap[:period-1] = np.nan

        return pd.Series(vwap, index=df.index, name=f'vwap_{period}')

    def load_candles_with_lookback(self, start_date, end_date):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–µ–π –∏–∑ –ë–î —Å lookback –ø–µ—Ä–∏–æ–¥–æ–º

        Args:
            start_date: –ù–∞—á–∞–ª–æ –±–∞—Ç—á–∞
            end_date: –ö–æ–Ω–µ—Ü –±–∞—Ç—á–∞

        Returns:
            pd.DataFrame —Å –∏–Ω–¥–µ–∫—Å–æ–º timestamp –∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏: high, low, close, volume
        """

        # –í—ã—á–∏—Å–ª—è–µ–º lookback_start
        lookback_start = start_date - timedelta(minutes=self.lookback_periods * self.timeframe_minutes)

        with self.db.get_connection() as conn:
            query = f"""
                SELECT timestamp, high, low, close, volume
                FROM {self.candles_table}
                WHERE symbol = %s
                  AND timestamp >= %s
                  AND timestamp <= %s
                ORDER BY timestamp ASC
            """

            df = pd.read_sql_query(
                query,
                conn,
                params=(self.symbol, lookback_start, end_date),
                parse_dates=['timestamp']
            )

            if df.empty:
                return pd.DataFrame()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timestamp –∫–∞–∫ –∏–Ω–¥–µ–∫—Å
            df.set_index('timestamp', inplace=True)

            return df

    def save_to_db(self, df: pd.DataFrame, batch_start, batch_end, columns: list):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ indicators —Ç–∞–±–ª–∏—Ü—É

        Args:
            df: DataFrame —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ VWAP –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            batch_start: –ù–∞—á–∞–ª–æ –±–∞—Ç—á–∞ (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
            batch_end: –ö–æ–Ω–µ—Ü –±–∞—Ç—á–∞ (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
            columns: –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, ['vwap_daily'] –∏–ª–∏ ['vwap_100'])
        """

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞—Ç—á (–±–µ–∑ lookback)
        df_batch = df[(df.index >= batch_start) & (df.index <= batch_end)].copy()

        if df_batch.empty:
            return

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è UPDATE
        update_data = []
        for timestamp, row in df_batch.iterrows():
            for col in columns:
                if col in row and pd.notna(row[col]):
                    update_data.append({
                        'timestamp': timestamp,
                        'symbol': self.symbol,
                        'column': col,
                        'value': float(row[col])
                    })

        if not update_data:
            return

        # Bulk UPDATE
        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                for data in update_data:
                    sql = f"""
                        UPDATE {self.indicators_table}
                        SET {data['column']} = %s
                        WHERE timestamp = %s AND symbol = %s
                    """
                    cur.execute(sql, (data['value'], data['timestamp'], data['symbol']))

                conn.commit()

    def load_vwap_for_symbol(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ VWAP –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""

        logger.info("")
        logger.info("=" * 80)
        logger.info(f"üìä {self.symbol} {self.symbol_progress} –ó–∞–≥—Ä—É–∑–∫–∞ VWAP")
        logger.info("=" * 80)
        logger.info(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: {self.timeframe}")
        logger.info(f"üì¶ Batch size: {self.batch_days} –¥–µ–Ω—å(–¥–Ω–µ–π)")

        periods_info = "daily" if self.daily_enabled else ""
        if self.rolling_periods:
            if periods_info:
                periods_info += f" + {len(self.rolling_periods)} rolling"
            else:
                periods_info = f"{len(self.rolling_periods)} rolling"
        logger.info(f"üìä –ü–µ—Ä–∏–æ–¥—ã: {periods_info}")

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        self.ensure_columns_exist()

        # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        start_date, end_date = self.get_date_range()

        if start_date is None or end_date is None:
            logger.warning(f"‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {self.symbol}")
            return

        if start_date >= end_date:
            logger.info(f"‚úÖ {self.symbol} - –¥–∞–Ω–Ω—ã–µ VWAP –∞–∫—Ç—É–∞–ª—å–Ω—ã")
            return

        # 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π
        total_days = (end_date - start_date).days + 1
        total_batches = max(1, (total_days + self.batch_days - 1) // self.batch_days)

        logger.info(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏: {start_date} ‚Üí {end_date}")
        logger.info(f"üìä –í—Å–µ–≥–æ –¥–Ω–µ–π: {total_days}, –±–∞—Ç—á–µ–π: {total_batches}")
        logger.info("")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–ø–æ–≤
        total_indicators = (1 if self.daily_enabled else 0) + len(self.rolling_periods)

        # 4. Daily VWAP
        if self.daily_enabled:
            logger.info(f"[1/{total_indicators}] Daily VWAP")

            current_date = start_date
            batch_num = 0

            pbar = tqdm(
                total=total_batches,
                desc=f"{self.symbol} {self.symbol_progress} Daily VWAP",
                unit="–±–∞—Ç—á"
            )

            while current_date < end_date:
                batch_end = min(current_date + timedelta(days=self.batch_days), end_date)

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å lookback
                df = self.load_candles_with_lookback(current_date, batch_end)

                if not df.empty:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Daily VWAP
                    df['vwap_daily'] = self.calculate_daily_vwap(df)

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î (—Ç–æ–ª—å–∫–æ –±–∞—Ç—á, –±–µ–∑ lookback)
                    self.save_to_db(df, current_date, batch_end, ['vwap_daily'])

                batch_num += 1
                pbar.update(1)
                current_date = batch_end

            pbar.close()
            logger.info("")

        # 5. Rolling VWAP (–≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã)
        for idx, period in enumerate(self.rolling_periods):
            indicator_num = (1 if self.daily_enabled else 0) + idx + 1
            logger.info(f"[{indicator_num}/{total_indicators}] Rolling VWAP (period={period})")

            current_date = start_date
            batch_num = 0

            pbar = tqdm(
                total=total_batches,
                desc=f"{self.symbol} {self.symbol_progress} VWAP-{period}",
                unit="–±–∞—Ç—á"
            )

            while current_date < end_date:
                batch_end = min(current_date + timedelta(days=self.batch_days), end_date)

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å lookback
                df = self.load_candles_with_lookback(current_date, batch_end)

                if not df.empty:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Rolling VWAP –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                    col_name = f'vwap_{period}'
                    df[col_name] = self.calculate_rolling_vwap(df, period)

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
                    self.save_to_db(df, current_date, batch_end, [col_name])

                batch_num += 1
                pbar.update(1)
                current_date = batch_end

            pbar.close()
            logger.info("")

        logger.info(f"‚úÖ {self.symbol} –∑–∞–≤–µ—Ä—à–µ–Ω")
        logger.info("")


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    logs_dir = Path(__file__).parent / 'logs'
    logs_dir.mkdir(exist_ok=True)

    # –ò–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    log_file = logs_dir / f'vwap_loader_{timestamp}.log'

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º root logger
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        handlers=[
            logging.FileHandler(log_file, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )

    logger.info(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –õ–æ–≥-—Ñ–∞–π–ª: {log_file}")

    return log_file


def parse_args():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""

    parser = argparse.ArgumentParser(
        description='VWAP Loader - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ VWAP –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python3 vwap_loader.py                                    # –í—Å–µ —Å–∏–º–≤–æ–ª—ã, –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
  python3 vwap_loader.py --symbol BTCUSDT                   # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª
  python3 vwap_loader.py --symbol BTCUSDT --timeframe 1m    # –°–∏–º–≤–æ–ª + —Ç–∞–π–º—Ñ—Ä–µ–π–º
  python3 vwap_loader.py --symbol BTCUSDT ETHUSDT           # –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤
  python3 vwap_loader.py --batch-days 7                     # –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        """
    )

    parser.add_argument(
        '--symbol',
        nargs='+',
        help='–°–∏–º–≤–æ–ª(—ã) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT ETHUSDT). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—Å–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞'
    )

    parser.add_argument(
        '--timeframe',
        help='–¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (1m, 15m, 1h). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—Å–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞'
    )

    parser.add_argument(
        '--batch-days',
        type=int,
        help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –¥–Ω—è—Ö. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–æ–±—ã—á–Ω–æ 1)'
    )

    return parser.parse_args()


def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ YAML —Ñ–∞–π–ª–∞"""

    config_path = Path(__file__).parent / 'indicators_config.yaml'

    if not config_path.exists():
        raise FileNotFoundError(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")

    with open(config_path, 'r', encoding='utf-8') as f:
        config = yaml.safe_load(f)

    return config


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_file = setup_logging()

    logger.info("=" * 80)
    logger.info("üöÄ VWAP Loader - –ó–∞–ø—É—Å–∫")
    logger.info("=" * 80)

    # 2. –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args = parse_args()

    # 3. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        config = load_config()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)

    # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã
    if args.symbol:
        symbols = args.symbol
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {symbols}")
    else:
        symbols = config.get('symbols', [])
        logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {symbols}")

    if not symbols:
        logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        sys.exit(1)

    # 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
    if args.timeframe:
        timeframes = [args.timeframe]
        logger.info(f"‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {timeframes}")
    else:
        timeframes = config.get('timeframes', ['1m', '15m', '1h'])
        logger.info(f"‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {timeframes}")

    # 6. –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º batch_days –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if args.batch_days:
        config['indicators']['vwap']['batch_days'] = args.batch_days
        logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {args.batch_days} –¥–Ω–µ–π")

    logger.info(f"üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä: VWAP")
    logger.info("")

    # 7. –û–±—Ä–∞–±–æ—Ç–∫–∞
    total_symbols = len(symbols)

    for symbol_idx, symbol in enumerate(symbols, start=1):
        logger.info("")
        logger.info("=" * 80)
        logger.info(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–º–≤–æ–ª–∞: {symbol} [{symbol_idx}/{total_symbols}]")
        logger.info("=" * 80)
        logger.info("")

        for timeframe in timeframes:
            try:
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
                loader = VWAPLoader(symbol, timeframe, config)
                loader.symbol_progress = f"[{symbol_idx}/{total_symbols}]"

                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                loader.load_vwap_for_symbol()

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol} –Ω–∞ {timeframe}: {e}", exc_info=True)
                continue

    logger.info("")
    logger.info("=" * 80)
    logger.info("‚úÖ VWAP Loader - –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
    logger.info(f"üìù –õ–æ–≥-—Ñ–∞–π–ª: {log_file}")
    logger.info("=" * 80)


if __name__ == '__main__':
    main()
